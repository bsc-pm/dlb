#!/bin/bash

# Description:
#   Execute and trace an OpenMP application with the dynamic load policy LeWI
#   (Lend When Idle).  The OpenMP runtime must support OMPT, set the flag
#   --verbose=ompt to check whether DLB can register as a OMPT tool.
#
# Usage:
#   ./lewi_omp_trace.sh <application> <args>

#################################################################################
### DLB options                                                               ###
#################################################################################

# Enable LeWI
export DLB_ARGS="$DLB_ARGS --lewi"

# Keep one CPU during a blocking call
#export DLB_ARGS="$DLB_ARGS --lewi-keep-one-cpu"

# Select which MPI calls to use for LewI
# Possible values: [none, all, barrier, collectives], default: all
#export DLB_ARGS="$DLB_ARGS --lewi-mpi-calls=all"

# Select affinity policy to prioritize CPUs to acquire or borrow during LeWI
# Possible values: [any, nearby-first, nearby-only, spread-ifempty],
# default: nearby-first
#export DLB_ARGS="$DLB_ARGS --lewi-affinity=nearby-first"

# Enable OMPT support
export DLB_ARGS="$DLB_ARGS --ompt"

# Enable verbose messages for OMPT.
# Useful to check if the OpenMP runtime supports OMPT. If DLB does not print
# a line with the detected OpenMP runtime, then OMPT is not supported.
#export DLB_ARGS="$DLB_ARGS --verbose=ompt"

# OMPT policy flags for LeWI. Select when DLB will invoke LewI functions.
# Possible values: {mpi, borrow, lend}, default: none
export DLB_ARGS="$DLB_ARGS --lewi-ompt=mpi:borrow:lend"

# Select events to be instrumented
# Possible values: {none:all:mpi:lewi:drom:talp:barrier:ompt:cpus:callbacks},
# default: all
#export DLB_ARGS="$DLB_ARGS --instrument=all"

# Set whether to emit hardware counters on any DLB instrumentation event
# default: no
#export DLB_ARGS="$DLB_ARGS --instrument-counters"


#################################################################################
### OpenMP runtime options                                                    ###
#################################################################################

# Set the OpenMP threads waiting policy to 'passive', they will consume a minimal
# number of cycles while waiting.
export OMP_WAIT_POLICY=passive


## LLVM / Intel variables of interest (although OMP_WAIT_POLICY=passive is enough)

# Make the worker threads to yield to other threads while waiting for more
# parallel work.
# export KMP_LIBRARY=throughput

# Set the time, in milliseconds, that a thread should wait before sleeping.
# export KMP_BLOCKTIME=0


#################################################################################
### Run                                                                       ###
#################################################################################

if [[ -z $DLB_HOME ]] ; then
    export DLB_HOME="@prefix@"
fi

# If the application is not linked with DLB, select which DLB version to preload.
# Choose between the non-MPI version, or the MPI versions for C/C++ or Fortran
#preload="$DLB_HOME/lib/libdlb_instr.so"
preload="$DLB_HOME/lib/libdlb_mpi_instr.so"
#preload="$DLB_HOME/lib/libdlb_mpif_instr.so"

if [[ -z $EXTRAE_HOME ]] ; then
    echo "This DLB script needs \$EXTRAE_HOME defined"
    exit 1
fi

# Choose between the MPI versions for C/C++ or Fortran
preload+=":$EXTRAE_HOME/lib/libompitrace.so"
#preload+=":$EXTRAE_HOME/lib/libompitracef.so"

$DLB_HOME/bin/dlb_run env LD_PRELOAD="$LD_PRELOAD:$preload" "$@"
