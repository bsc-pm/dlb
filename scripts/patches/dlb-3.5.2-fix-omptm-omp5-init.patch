diff --git a/doc/examples/ompt/run.sh b/doc/examples/ompt/run.sh
index 0f58ac46..b10678eb 100644
--- a/doc/examples/ompt/run.sh
+++ b/doc/examples/ompt/run.sh
@@ -1,5 +1,5 @@
 #!/usr/bin/env bash
 
-export OMP_WAIT_POLICY="passive"
-export DLB_ARGS="--ompt --verbose=ompt --ompt-thread-manager=omp5"
+export OMP_NUM_THREADS=1
+export DLB_ARGS="--ompt --verbose=ompt"
 ./app
diff --git a/src/LB_numThreads/omptm_omp5.c b/src/LB_numThreads/omptm_omp5.c
index 30fc2344..c1598bd9 100644
--- a/src/LB_numThreads/omptm_omp5.c
+++ b/src/LB_numThreads/omptm_omp5.c
@@ -274,6 +274,19 @@ void omptm_omp5__init(pid_t process_id, const options_t *options) {
     omptool_opts = options->lewi_ompt;
     pid = process_id;
     hwthreads_per_core = mu_get_system_hwthreads_per_core();
+
+    /* Get process mask */
+    int have_procinfo = shmem_procinfo__getprocessmask(pid, &process_mask, DLB_DROM_FLAGS_NONE);
+    if (have_procinfo != DLB_SUCCESS) {
+        mu_get_system_mask(&process_mask);
+    }
+    memcpy(&active_mask, &process_mask, sizeof(cpu_set_t));
+    verbose(VB_OMPT, "Initial mask set to: %s", mu_to_str(&process_mask));
+
+    /* initialize cpu_bindings based on active_mask */
+    array_cpuid_t_init(&cpu_bindings, mu_get_system_size());
+    compute_cpu_bindings();
+
     if (lewi || drom) {
         int err;
         err = DLB_CallbackSet(dlb_callback_enable_cpu, (dlb_callback_t)cb_enable_cpu, NULL);
@@ -298,11 +311,6 @@ void omptm_omp5__init(pid_t process_id, const options_t *options) {
             warning("DLB_CallbackSet set_process_mask: %s", DLB_Strerror(err));
         }
 
-        /* Get process mask */
-        shmem_procinfo__getprocessmask(pid, &process_mask, DLB_DROM_FLAGS_NONE);
-        memcpy(&active_mask, &process_mask, sizeof(cpu_set_t));
-        verbose(VB_OMPT, "Initial mask set to: %s", mu_to_str(&process_mask));
-
         /* Update number of cores in process mask */
         cpu_set_t core_set;
         mu_get_cores_subset_of_cpuset(&core_set, &process_mask);
@@ -316,7 +324,7 @@ void omptm_omp5__init(pid_t process_id, const options_t *options) {
             num_omp_threads_per_core = 1;
         } else if (openmp_places == OPENMP_PLACE_THREADS) {
             num_omp_threads_per_core = hwthreads_per_core;
-        } else if ( num_initial_omp_threads > 0) {
+        } else if ( num_initial_omp_threads > 0 && num_cores_in_process_mask > 0) {
             num_omp_threads_per_core = max_int(
                 1, num_initial_omp_threads / num_cores_in_process_mask);
         } else {
@@ -325,14 +333,12 @@ void omptm_omp5__init(pid_t process_id, const options_t *options) {
         verbose(VB_OMPT, "hwthreads per core: %d, omp threads per core: %d",
                 hwthreads_per_core, num_omp_threads_per_core);
 
-        array_cpuid_t_init(&cpu_bindings, 8);
-        compute_cpu_bindings();
-
         omptm_omp5__lend();
     }
 }
 
 void omptm_omp5__finalize(void) {
+    array_cpuid_t_destroy(&cpu_bindings);
 }
 
 
