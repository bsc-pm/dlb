{
  "mpi_calls": [
    {
      "name": "MPI_Bsend",
      "base_name": "MPI_Bsend",
      "pmpi_name": "PMPI_Bsend",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
      "c_args": "buf, count, datatype, dest, tag, comm",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm"
    },
    {
      "name": "MPI_Bsend_c",
      "base_name": "MPI_Bsend",
      "pmpi_name": "PMPI_Bsend",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
      "c_args": "buf, count, datatype, dest, tag, comm",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm"
    },
    {
      "name": "MPI_Bsend_init",
      "base_name": "MPI_Bsend_init",
      "pmpi_name": "PMPI_Bsend_init",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Bsend_init_c",
      "base_name": "MPI_Bsend_init",
      "pmpi_name": "PMPI_Bsend_init",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Buffer_attach",
      "base_name": "MPI_Buffer_attach",
      "pmpi_name": "PMPI_Buffer_attach",
      "embiggened": false,
      "c_params": "void* buffer, int size",
      "c_args": "buffer, size",
      "fc_params": "void* buffer, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "buffer, size, ierror",
      "f08_par_list": "buffer, size, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER, INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(c_int), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "CFI_cdesc_t * buffer, int size"
    },
    {
      "name": "MPI_Buffer_attach_c",
      "base_name": "MPI_Buffer_attach",
      "pmpi_name": "PMPI_Buffer_attach",
      "embiggened": true,
      "c_params": "void* buffer, MPI_Count size",
      "c_args": "buffer, size",
      "fc_params": "void* buffer, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "buffer, size, ierror",
      "f08_par_list": "buffer, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "CFI_cdesc_t * buffer, MPI_Count size"
    },
    {
      "name": "MPI_Buffer_detach",
      "base_name": "MPI_Buffer_detach",
      "pmpi_name": "PMPI_Buffer_detach",
      "embiggened": false,
      "c_params": "void* buffer_addr, int* size",
      "c_args": "buffer_addr, size",
      "fc_params": "void* buffer_addr, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "buffer_addr, size, ierror",
      "f08_par_list": "buffer_addr, size, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "TYPE(C_PTR), INTENT(OUT) :: buffer_addr\n    INTEGER, INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer_addr, size",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer_addr, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer_addr, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_ptr), INTENT(OUT) :: buffer_addr\n            INTEGER(c_int), INTENT(OUT) :: size",
      "cshim_cdesc_params": "void* buffer_addr, int* size"
    },
    {
      "name": "MPI_Buffer_detach_c",
      "base_name": "MPI_Buffer_detach",
      "pmpi_name": "PMPI_Buffer_detach",
      "embiggened": true,
      "c_params": "void* buffer_addr, MPI_Count* size",
      "c_args": "buffer_addr, size",
      "fc_params": "void* buffer_addr, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "buffer_addr, size, ierror",
      "f08_par_list": "buffer_addr, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND",
      "f08_par_decl": "TYPE(C_PTR), INTENT(OUT) :: buffer_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer_addr, size",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer_addr, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer_addr, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_long_long",
      "f08_cshim_iface_par_decl": "TYPE(c_ptr), INTENT(OUT) :: buffer_addr\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "void* buffer_addr, MPI_Count* size"
    },
    {
      "name": "MPI_Buffer_flush",
      "base_name": "MPI_Buffer_flush",
      "pmpi_name": "PMPI_Buffer_flush",
      "embiggened": false,
      "c_params": "",
      "c_args": "",
      "fc_params": "MPI_Fint *ierror",
      "fc_args": "ierror",
      "f08_par_list": "ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "",
      "cshim_cdesc_params": ""
    },
    {
      "name": "MPI_Buffer_iflush",
      "base_name": "MPI_Buffer_iflush",
      "pmpi_name": "PMPI_Buffer_iflush",
      "embiggened": false,
      "c_params": "MPI_Request* request",
      "c_args": "request",
      "fc_params": "MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "request, ierror",
      "f08_par_list": "request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint* request"
    },
    {
      "name": "MPI_Cancel",
      "base_name": "MPI_Cancel",
      "pmpi_name": "PMPI_Cancel",
      "embiggened": false,
      "c_params": "MPI_Request* request",
      "c_args": "request",
      "fc_params": "MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "request, ierror",
      "f08_par_list": "request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(IN) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(IN) :: request",
      "cshim_cdesc_params": "MPI_Fint* request"
    },
    {
      "name": "MPI_Comm_attach_buffer",
      "base_name": "MPI_Comm_attach_buffer",
      "pmpi_name": "PMPI_Comm_attach_buffer",
      "embiggened": false,
      "c_params": "MPI_Comm comm, void* buffer, int size",
      "c_args": "comm, buffer, size",
      "fc_params": "MPI_Fint *comm, void* buffer, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "comm, buffer, size, ierror",
      "f08_par_list": "comm, buffer, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER, INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, buffer, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, buffer, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, buffer, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(c_int), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "MPI_Fint comm, CFI_cdesc_t * buffer, int size"
    },
    {
      "name": "MPI_Comm_attach_buffer_c",
      "base_name": "MPI_Comm_attach_buffer",
      "pmpi_name": "PMPI_Comm_attach_buffer",
      "embiggened": true,
      "c_params": "MPI_Comm comm, void* buffer, MPI_Count size",
      "c_args": "comm, buffer, size",
      "fc_params": "MPI_Fint *comm, void* buffer, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "comm, buffer, size, ierror",
      "f08_par_list": "comm, buffer, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, buffer, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, buffer, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, buffer, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "MPI_Fint comm, CFI_cdesc_t * buffer, MPI_Count size"
    },
    {
      "name": "MPI_Comm_detach_buffer",
      "base_name": "MPI_Comm_detach_buffer",
      "pmpi_name": "PMPI_Comm_detach_buffer",
      "embiggened": false,
      "c_params": "MPI_Comm comm, void* buffer_addr, int* size",
      "c_args": "comm, buffer_addr, size",
      "fc_params": "MPI_Fint *comm, void* buffer_addr, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "comm, buffer_addr, size, ierror",
      "f08_par_list": "comm, buffer_addr, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(C_PTR), INTENT(OUT) :: buffer_addr\n    INTEGER, INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, buffer_addr, size",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, buffer_addr, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, buffer_addr, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(c_ptr), INTENT(OUT) :: buffer_addr\n            INTEGER(c_int), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint comm, void* buffer_addr, int* size"
    },
    {
      "name": "MPI_Comm_detach_buffer_c",
      "base_name": "MPI_Comm_detach_buffer",
      "pmpi_name": "PMPI_Comm_detach_buffer",
      "embiggened": true,
      "c_params": "MPI_Comm comm, void* buffer_addr, MPI_Count* size",
      "c_args": "comm, buffer_addr, size",
      "fc_params": "MPI_Fint *comm, void* buffer_addr, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "comm, buffer_addr, size, ierror",
      "f08_par_list": "comm, buffer_addr, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(C_PTR), INTENT(OUT) :: buffer_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, buffer_addr, size",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, buffer_addr, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, buffer_addr, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(c_ptr), INTENT(OUT) :: buffer_addr\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint comm, void* buffer_addr, MPI_Count* size"
    },
    {
      "name": "MPI_Comm_flush_buffer",
      "base_name": "MPI_Comm_flush_buffer",
      "pmpi_name": "PMPI_Comm_flush_buffer",
      "embiggened": false,
      "c_params": "MPI_Comm comm",
      "c_args": "comm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "comm, ierror",
      "f08_par_list": "comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "MPI_Fint comm"
    },
    {
      "name": "MPI_Comm_iflush_buffer",
      "base_name": "MPI_Comm_iflush_buffer",
      "pmpi_name": "PMPI_Comm_iflush_buffer",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Request* request",
      "c_args": "comm, request",
      "fc_params": "MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "comm, request, ierror",
      "f08_par_list": "comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Get_count",
      "base_name": "MPI_Get_count",
      "pmpi_name": "PMPI_Get_count",
      "embiggened": false,
      "c_params": "const MPI_Status* status, MPI_Datatype datatype, int* count",
      "c_args": "status, datatype, count",
      "fc_params": "const MPI_Fint *status, MPI_Fint *datatype, MPI_Fint *count, MPI_Fint *ierror",
      "fc_args": "status, datatype, count, ierror",
      "f08_par_list": "status, datatype, count, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(OUT) :: count\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, datatype, count",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, datatype%MPI_VAL, count",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, datatype, count",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), INTENT(OUT) :: count",
      "cshim_cdesc_params": "const MPI_F08_status* status, MPI_Fint datatype, int* count"
    },
    {
      "name": "MPI_Get_count_c",
      "base_name": "MPI_Get_count",
      "pmpi_name": "PMPI_Get_count",
      "embiggened": true,
      "c_params": "const MPI_Status* status, MPI_Datatype datatype, MPI_Count* count",
      "c_args": "status, datatype, count",
      "fc_params": "const MPI_Fint *status, MPI_Fint *datatype, MPI_Fint *count, MPI_Fint *ierror",
      "fc_args": "status, datatype, count, ierror",
      "f08_par_list": "status, datatype, count, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: count\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, datatype, count",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, datatype%MPI_VAL, count",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, datatype, count",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: count",
      "cshim_cdesc_params": "const MPI_F08_status* status, MPI_Fint datatype, MPI_Count* count"
    },
    {
      "name": "MPI_Ibsend",
      "base_name": "MPI_Ibsend",
      "pmpi_name": "PMPI_Ibsend",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ibsend_c",
      "base_name": "MPI_Ibsend",
      "pmpi_name": "PMPI_Ibsend",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Improbe",
      "base_name": "MPI_Improbe",
      "pmpi_name": "PMPI_Improbe",
      "embiggened": false,
      "c_params": "int source, int tag, MPI_Comm comm, int* flag, MPI_Message* message, MPI_Status* status",
      "c_args": "source, tag, comm, flag, message, status",
      "fc_params": "MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *flag, MPI_Fint *message, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "source, tag, comm, flag, message, status, ierror",
      "f08_par_list": "source, tag, comm, flag, message, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Message, MPI_Status, MPI_Comm",
      "f08_par_decl": "INTEGER, INTENT(IN) :: source, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    LOGICAL, INTENT(OUT) :: flag\n    TYPE(MPI_Message), INTENT(OUT) :: message\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "source, tag, comm, flag, message, status",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "source, tag, comm%MPI_VAL, flag_c, message%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "source, tag, comm, flag, message, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: flag\n            integer(c_int), INTENT(OUT) :: message\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "int source, int tag, MPI_Fint comm, int* flag, MPI_Fint* message, MPI_F08_status* status"
    },
    {
      "name": "MPI_Imrecv",
      "base_name": "MPI_Imrecv",
      "pmpi_name": "PMPI_Imrecv",
      "embiggened": false,
      "c_params": "void* buf, int count, MPI_Datatype datatype, MPI_Message* message, MPI_Request* request",
      "c_args": "buf, count, datatype, message, request",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *message, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, message, request, ierror",
      "f08_par_list": "buf, count, datatype, message, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Message, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Message), INTENT(INOUT) :: message\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, message, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, message%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, message, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(INOUT) :: message\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* message, MPI_Fint* request"
    },
    {
      "name": "MPI_Imrecv_c",
      "base_name": "MPI_Imrecv",
      "pmpi_name": "PMPI_Imrecv",
      "embiggened": true,
      "c_params": "void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Message* message, MPI_Request* request",
      "c_args": "buf, count, datatype, message, request",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *message, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, message, request, ierror",
      "f08_par_list": "buf, count, datatype, message, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Message, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Message), INTENT(INOUT) :: message\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, message, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, message%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, message, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(INOUT) :: message\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* message, MPI_Fint* request"
    },
    {
      "name": "MPI_Iprobe",
      "base_name": "MPI_Iprobe",
      "pmpi_name": "PMPI_Iprobe",
      "embiggened": false,
      "c_params": "int source, int tag, MPI_Comm comm, int* flag, MPI_Status* status",
      "c_args": "source, tag, comm, flag, status",
      "fc_params": "MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *flag, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "source, tag, comm, flag, status, ierror",
      "f08_par_list": "source, tag, comm, flag, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Comm",
      "f08_par_decl": "INTEGER, INTENT(IN) :: source, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    LOGICAL, INTENT(OUT) :: flag\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "source, tag, comm, flag, status",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "source, tag, comm%MPI_VAL, flag_c, status",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "source, tag, comm, flag, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: flag\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "int source, int tag, MPI_Fint comm, int* flag, MPI_F08_status* status"
    },
    {
      "name": "MPI_Irecv",
      "base_name": "MPI_Irecv",
      "pmpi_name": "PMPI_Irecv",
      "embiggened": false,
      "c_params": "void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, source, tag, comm, request",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, source, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, source, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, source, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, source, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, source, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, source, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int source, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Irecv_c",
      "base_name": "MPI_Irecv",
      "pmpi_name": "PMPI_Irecv",
      "embiggened": true,
      "c_params": "void* buf, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, source, tag, comm, request",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, source, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, source, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: source, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, source, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, source, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, source, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int source, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Irsend",
      "base_name": "MPI_Irsend",
      "pmpi_name": "PMPI_Irsend",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Irsend_c",
      "base_name": "MPI_Irsend",
      "pmpi_name": "PMPI_Irsend",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Isend",
      "base_name": "MPI_Isend",
      "pmpi_name": "PMPI_Isend",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Isend_c",
      "base_name": "MPI_Isend",
      "pmpi_name": "PMPI_Isend",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Isendrecv",
      "base_name": "MPI_Isendrecv",
      "pmpi_name": "PMPI_Isendrecv",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void* recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, MPI_Fint *dest, MPI_Fint *sendtag, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *source, MPI_Fint *recvtag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, dest, sendtag, recvcount, source, recvtag\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, dest, sendtag, recvbuf, recvcount, recvtype%MPI_VAL, source, recvtag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendtag\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvtag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, int dest, int sendtag, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int source, int recvtag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Isendrecv_c",
      "base_name": "MPI_Isendrecv",
      "pmpi_name": "PMPI_Isendrecv",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, int dest, int sendtag, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, MPI_Fint *dest, MPI_Fint *sendtag, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *source, MPI_Fint *recvtag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    INTEGER, INTENT(IN) :: dest, sendtag, source, recvtag\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, dest, sendtag, recvbuf, recvcount, recvtype%MPI_VAL, source, recvtag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendtag\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvtag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, int dest, int sendtag, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int source, int recvtag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Isendrecv_replace",
      "base_name": "MPI_Isendrecv_replace",
      "pmpi_name": "PMPI_Isendrecv_replace",
      "embiggened": false,
      "c_params": "void* buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *sendtag, MPI_Fint *source, MPI_Fint *recvtag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, sendtag, source, recvtag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, sendtag, source, recvtag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendtag\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvtag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int sendtag, int source, int recvtag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Isendrecv_replace_c",
      "base_name": "MPI_Isendrecv_replace",
      "pmpi_name": "PMPI_Isendrecv_replace",
      "embiggened": true,
      "c_params": "void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *sendtag, MPI_Fint *source, MPI_Fint *recvtag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, sendtag, source, recvtag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, sendtag, source, recvtag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, sendtag, source, recvtag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendtag\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvtag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int sendtag, int source, int recvtag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Issend",
      "base_name": "MPI_Issend",
      "pmpi_name": "PMPI_Issend",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Issend_c",
      "base_name": "MPI_Issend",
      "pmpi_name": "PMPI_Issend",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Mprobe",
      "base_name": "MPI_Mprobe",
      "pmpi_name": "PMPI_Mprobe",
      "embiggened": false,
      "c_params": "int source, int tag, MPI_Comm comm, MPI_Message* message, MPI_Status* status",
      "c_args": "source, tag, comm, message, status",
      "fc_params": "MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *message, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "source, tag, comm, message, status, ierror",
      "f08_par_list": "source, tag, comm, message, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Message, MPI_Status, MPI_Comm",
      "f08_par_decl": "INTEGER, INTENT(IN) :: source, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Message), INTENT(OUT) :: message\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "source, tag, comm, message, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "source, tag, comm%MPI_VAL, message%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "source, tag, comm, message, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: message\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "int source, int tag, MPI_Fint comm, MPI_Fint* message, MPI_F08_status* status"
    },
    {
      "name": "MPI_Mrecv",
      "base_name": "MPI_Mrecv",
      "pmpi_name": "PMPI_Mrecv",
      "embiggened": false,
      "c_params": "void* buf, int count, MPI_Datatype datatype, MPI_Message* message, MPI_Status* status",
      "c_args": "buf, count, datatype, message, status",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *message, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, message, status, ierror",
      "f08_par_list": "buf, count, datatype, message, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Message, MPI_Status, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Message), INTENT(INOUT) :: message\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, message, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, message%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, message, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(INOUT) :: message\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* message, MPI_F08_status* status"
    },
    {
      "name": "MPI_Mrecv_c",
      "base_name": "MPI_Mrecv",
      "pmpi_name": "PMPI_Mrecv",
      "embiggened": true,
      "c_params": "void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Message* message, MPI_Status* status",
      "c_args": "buf, count, datatype, message, status",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *message, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, message, status, ierror",
      "f08_par_list": "buf, count, datatype, message, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Message, MPI_COUNT_KIND, MPI_Status, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Message), INTENT(INOUT) :: message\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, message, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, message%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, message, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(INOUT) :: message\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* message, MPI_F08_status* status"
    },
    {
      "name": "MPI_Probe",
      "base_name": "MPI_Probe",
      "pmpi_name": "PMPI_Probe",
      "embiggened": false,
      "c_params": "int source, int tag, MPI_Comm comm, MPI_Status* status",
      "c_args": "source, tag, comm, status",
      "fc_params": "MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "source, tag, comm, status, ierror",
      "f08_par_list": "source, tag, comm, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Comm",
      "f08_par_decl": "INTEGER, INTENT(IN) :: source, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "source, tag, comm, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "source, tag, comm%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "source, tag, comm, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "int source, int tag, MPI_Fint comm, MPI_F08_status* status"
    },
    {
      "name": "MPI_Recv",
      "base_name": "MPI_Recv",
      "pmpi_name": "PMPI_Recv",
      "embiggened": false,
      "c_params": "void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status* status",
      "c_args": "buf, count, datatype, source, tag, comm, status",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, source, tag, comm, status, ierror",
      "f08_par_list": "buf, count, datatype, source, tag, comm, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count, source, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, source, tag, comm, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, source, tag, comm%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, source, tag, comm, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int source, int tag, MPI_Fint comm, MPI_F08_status* status"
    },
    {
      "name": "MPI_Recv_c",
      "base_name": "MPI_Recv",
      "pmpi_name": "PMPI_Recv",
      "embiggened": true,
      "c_params": "void* buf, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status* status",
      "c_args": "buf, count, datatype, source, tag, comm, status",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, source, tag, comm, status, ierror",
      "f08_par_list": "buf, count, datatype, source, tag, comm, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: source, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, source, tag, comm, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, source, tag, comm%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, source, tag, comm, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int source, int tag, MPI_Fint comm, MPI_F08_status* status"
    },
    {
      "name": "MPI_Recv_init",
      "base_name": "MPI_Recv_init",
      "pmpi_name": "PMPI_Recv_init",
      "embiggened": false,
      "c_params": "void* buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, source, tag, comm, request",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, source, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, source, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, source, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, source, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, source, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, source, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int source, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Recv_init_c",
      "base_name": "MPI_Recv_init",
      "pmpi_name": "PMPI_Recv_init",
      "embiggened": true,
      "c_params": "void* buf, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, source, tag, comm, request",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, source, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, source, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: source, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, source, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, source, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, source, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int source, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Request_free",
      "base_name": "MPI_Request_free",
      "pmpi_name": "PMPI_Request_free",
      "embiggened": false,
      "c_params": "MPI_Request* request",
      "c_args": "request",
      "fc_params": "MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "request, ierror",
      "f08_par_list": "request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(INOUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: request",
      "cshim_cdesc_params": "MPI_Fint* request"
    },
    {
      "name": "MPI_Request_get_status",
      "base_name": "MPI_Request_get_status",
      "pmpi_name": "PMPI_Request_get_status",
      "embiggened": false,
      "c_params": "MPI_Request request, int* flag, MPI_Status* status",
      "c_args": "request, flag, status",
      "fc_params": "MPI_Fint *request, MPI_Fint *flag, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "request, flag, status, ierror",
      "f08_par_list": "request, flag, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(IN) :: request\n    LOGICAL, INTENT(OUT) :: flag\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request, flag, status",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL, flag_c, status",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "request, flag, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: request\n            INTEGER(c_int), INTENT(OUT) :: flag\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint request, int* flag, MPI_F08_status* status"
    },
    {
      "name": "MPI_Request_get_status_all",
      "base_name": "MPI_Request_get_status_all",
      "pmpi_name": "PMPI_Request_get_status_all",
      "embiggened": false,
      "c_params": "int count, const MPI_Request array_of_requests[], int* flag, MPI_Status array_of_statuses[]",
      "c_args": "count, array_of_requests, flag, array_of_statuses",
      "fc_params": "MPI_Fint *count, const MPI_Fint *array_of_requests, MPI_Fint *flag, MPI_Fint *array_of_statuses, MPI_Fint *ierror",
      "fc_args": "count, array_of_requests, flag, array_of_statuses, ierror",
      "f08_par_list": "count, array_of_requests, flag, array_of_statuses, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Request), INTENT(IN) :: array_of_requests(count)\n    LOGICAL, INTENT(OUT) :: flag\n    TYPE(MPI_Status) :: array_of_statuses(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_requests, flag, array_of_statuses",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_requests%MPI_VAL, flag_c, array_of_statuses",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "count, array_of_requests, flag, array_of_statuses",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), INTENT(IN) :: array_of_requests(count)\n            INTEGER(c_int), INTENT(OUT) :: flag\n            TYPE(MPI_Status) :: array_of_statuses(*)",
      "cshim_cdesc_params": "int count, const MPI_Fint array_of_requests[], int* flag, MPI_Status array_of_statuses[]"
    },
    {
      "name": "MPI_Request_get_status_any",
      "base_name": "MPI_Request_get_status_any",
      "pmpi_name": "PMPI_Request_get_status_any",
      "embiggened": false,
      "c_params": "int count, const MPI_Request array_of_requests[], int* index, int* flag, MPI_Status* status",
      "c_args": "count, array_of_requests, index, flag, status",
      "fc_params": "MPI_Fint *count, const MPI_Fint *array_of_requests, MPI_Fint *index, MPI_Fint *flag, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "count, array_of_requests, index, flag, status, ierror",
      "f08_par_list": "count, array_of_requests, index, flag, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Request), INTENT(IN) :: array_of_requests(count)\n    INTEGER, INTENT(OUT) :: index\n    LOGICAL, INTENT(OUT) :: flag\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_requests, index, flag, status",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: MPI_UNDEFINED\n    use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: index_c\n    integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_requests%MPI_VAL, index_c, flag_c, status",
      "f08_cshim_postcall_stmts": "if (index_c == MPI_UNDEFINED) then\n        index = index_c\n    else\n        index = index_c + 1\n    endif\n    flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "count, array_of_requests, index, flag, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), INTENT(IN) :: array_of_requests(count)\n            INTEGER(c_int), INTENT(OUT) :: index\n            INTEGER(c_int), INTENT(OUT) :: flag\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "int count, const MPI_Fint array_of_requests[], int* index, int* flag, MPI_F08_status* status"
    },
    {
      "name": "MPI_Request_get_status_some",
      "base_name": "MPI_Request_get_status_some",
      "pmpi_name": "PMPI_Request_get_status_some",
      "embiggened": false,
      "c_params": "int incount, const MPI_Request array_of_requests[], int* outcount, int array_of_indices[], MPI_Status array_of_statuses[]",
      "c_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "fc_params": "MPI_Fint *incount, const MPI_Fint *array_of_requests, MPI_Fint *outcount, MPI_Fint *array_of_indices, MPI_Fint *array_of_statuses, MPI_Fint *ierror",
      "fc_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses, ierror",
      "f08_par_list": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: incount\n    TYPE(MPI_Request), INTENT(IN) :: array_of_requests(incount)\n    INTEGER, INTENT(OUT) :: outcount, array_of_indices(*)\n    TYPE(MPI_Status) :: array_of_statuses(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "incount, array_of_requests%MPI_VAL, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: incount\n            integer(c_int), INTENT(IN) :: array_of_requests(incount)\n            INTEGER(c_int), INTENT(OUT) :: outcount\n            INTEGER(c_int), INTENT(OUT) :: array_of_indices(*)\n            TYPE(MPI_Status) :: array_of_statuses(*)",
      "cshim_cdesc_params": "int incount, const MPI_Fint array_of_requests[], int* outcount, int array_of_indices[], MPI_Status array_of_statuses[]"
    },
    {
      "name": "MPI_Rsend",
      "base_name": "MPI_Rsend",
      "pmpi_name": "PMPI_Rsend",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
      "c_args": "buf, count, datatype, dest, tag, comm",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm"
    },
    {
      "name": "MPI_Rsend_c",
      "base_name": "MPI_Rsend",
      "pmpi_name": "PMPI_Rsend",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
      "c_args": "buf, count, datatype, dest, tag, comm",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm"
    },
    {
      "name": "MPI_Rsend_init",
      "base_name": "MPI_Rsend_init",
      "pmpi_name": "PMPI_Rsend_init",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Rsend_init_c",
      "base_name": "MPI_Rsend_init",
      "pmpi_name": "PMPI_Rsend_init",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Send",
      "base_name": "MPI_Send",
      "pmpi_name": "PMPI_Send",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
      "c_args": "buf, count, datatype, dest, tag, comm",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm"
    },
    {
      "name": "MPI_Send_c",
      "base_name": "MPI_Send",
      "pmpi_name": "PMPI_Send",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
      "c_args": "buf, count, datatype, dest, tag, comm",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm"
    },
    {
      "name": "MPI_Send_init",
      "base_name": "MPI_Send_init",
      "pmpi_name": "PMPI_Send_init",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Send_init_c",
      "base_name": "MPI_Send_init",
      "pmpi_name": "PMPI_Send_init",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Sendrecv",
      "base_name": "MPI_Sendrecv",
      "pmpi_name": "PMPI_Sendrecv",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void* recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status* status",
      "c_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, MPI_Fint *dest, MPI_Fint *sendtag, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *source, MPI_Fint *recvtag, MPI_Fint *comm, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, dest, sendtag, recvcount, source, recvtag\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, dest, sendtag, recvbuf, recvcount, recvtype%MPI_VAL, source, recvtag, comm%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendtag\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvtag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, int dest, int sendtag, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int source, int recvtag, MPI_Fint comm, MPI_F08_status* status"
    },
    {
      "name": "MPI_Sendrecv_c",
      "base_name": "MPI_Sendrecv",
      "pmpi_name": "PMPI_Sendrecv",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, int dest, int sendtag, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status* status",
      "c_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, MPI_Fint *dest, MPI_Fint *sendtag, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *source, MPI_Fint *recvtag, MPI_Fint *comm, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    INTEGER, INTENT(IN) :: dest, sendtag, source, recvtag\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, dest, sendtag, recvbuf, recvcount, recvtype%MPI_VAL, source, recvtag, comm%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, dest, sendtag, recvbuf, recvcount, recvtype, source, recvtag, comm, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendtag\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvtag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, int dest, int sendtag, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int source, int recvtag, MPI_Fint comm, MPI_F08_status* status"
    },
    {
      "name": "MPI_Sendrecv_replace",
      "base_name": "MPI_Sendrecv_replace",
      "pmpi_name": "PMPI_Sendrecv_replace",
      "embiggened": false,
      "c_params": "void* buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status* status",
      "c_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *sendtag, MPI_Fint *source, MPI_Fint *recvtag, MPI_Fint *comm, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status, ierror",
      "f08_par_list": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count, dest, sendtag, source, recvtag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, sendtag, source, recvtag, comm%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendtag\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvtag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int sendtag, int source, int recvtag, MPI_Fint comm, MPI_F08_status* status"
    },
    {
      "name": "MPI_Sendrecv_replace_c",
      "base_name": "MPI_Sendrecv_replace",
      "pmpi_name": "PMPI_Sendrecv_replace",
      "embiggened": true,
      "c_params": "void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status* status",
      "c_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status",
      "fc_params": "void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *sendtag, MPI_Fint *source, MPI_Fint *recvtag, MPI_Fint *comm, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status, ierror",
      "f08_par_list": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, sendtag, source, recvtag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, sendtag, source, recvtag, comm%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, sendtag, source, recvtag, comm, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendtag\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvtag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int sendtag, int source, int recvtag, MPI_Fint comm, MPI_F08_status* status"
    },
    {
      "name": "MPI_Session_attach_buffer",
      "base_name": "MPI_Session_attach_buffer",
      "pmpi_name": "PMPI_Session_attach_buffer",
      "embiggened": false,
      "c_params": "MPI_Session session, void* buffer, int size",
      "c_args": "session, buffer, size",
      "fc_params": "MPI_Fint *session, void* buffer, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "session, buffer, size, ierror",
      "f08_par_list": "session, buffer, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER, INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, buffer, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, buffer, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, buffer, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(c_int), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "MPI_Fint session, CFI_cdesc_t * buffer, int size"
    },
    {
      "name": "MPI_Session_attach_buffer_c",
      "base_name": "MPI_Session_attach_buffer",
      "pmpi_name": "PMPI_Session_attach_buffer",
      "embiggened": true,
      "c_params": "MPI_Session session, void* buffer, MPI_Count size",
      "c_args": "session, buffer, size",
      "fc_params": "MPI_Fint *session, void* buffer, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "session, buffer, size, ierror",
      "f08_par_list": "session, buffer, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_COUNT_KIND",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, buffer, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, buffer, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, buffer, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "MPI_Fint session, CFI_cdesc_t * buffer, MPI_Count size"
    },
    {
      "name": "MPI_Session_detach_buffer",
      "base_name": "MPI_Session_detach_buffer",
      "pmpi_name": "PMPI_Session_detach_buffer",
      "embiggened": false,
      "c_params": "MPI_Session session, void* buffer_addr, int* size",
      "c_args": "session, buffer_addr, size",
      "fc_params": "MPI_Fint *session, void* buffer_addr, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "session, buffer_addr, size, ierror",
      "f08_par_list": "session, buffer_addr, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    TYPE(C_PTR), INTENT(OUT) :: buffer_addr\n    INTEGER, INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, buffer_addr, size",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, buffer_addr, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, buffer_addr, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            TYPE(c_ptr), INTENT(OUT) :: buffer_addr\n            INTEGER(c_int), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint session, void* buffer_addr, int* size"
    },
    {
      "name": "MPI_Session_detach_buffer_c",
      "base_name": "MPI_Session_detach_buffer",
      "pmpi_name": "PMPI_Session_detach_buffer",
      "embiggened": true,
      "c_params": "MPI_Session session, void* buffer_addr, MPI_Count* size",
      "c_args": "session, buffer_addr, size",
      "fc_params": "MPI_Fint *session, void* buffer_addr, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "session, buffer_addr, size, ierror",
      "f08_par_list": "session, buffer_addr, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_COUNT_KIND",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    TYPE(C_PTR), INTENT(OUT) :: buffer_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, buffer_addr, size",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, buffer_addr, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, buffer_addr, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            TYPE(c_ptr), INTENT(OUT) :: buffer_addr\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint session, void* buffer_addr, MPI_Count* size"
    },
    {
      "name": "MPI_Session_flush_buffer",
      "base_name": "MPI_Session_flush_buffer",
      "pmpi_name": "PMPI_Session_flush_buffer",
      "embiggened": false,
      "c_params": "MPI_Session session",
      "c_args": "session",
      "fc_params": "MPI_Fint *session, MPI_Fint *ierror",
      "fc_args": "session, ierror",
      "f08_par_list": "session, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session",
      "cshim_cdesc_params": "MPI_Fint session"
    },
    {
      "name": "MPI_Session_iflush_buffer",
      "base_name": "MPI_Session_iflush_buffer",
      "pmpi_name": "PMPI_Session_iflush_buffer",
      "embiggened": false,
      "c_params": "MPI_Session session, MPI_Request* request",
      "c_args": "session, request",
      "fc_params": "MPI_Fint *session, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "session, request, ierror",
      "f08_par_list": "session, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Request",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint session, MPI_Fint* request"
    },
    {
      "name": "MPI_Ssend",
      "base_name": "MPI_Ssend",
      "pmpi_name": "PMPI_Ssend",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
      "c_args": "buf, count, datatype, dest, tag, comm",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm"
    },
    {
      "name": "MPI_Ssend_c",
      "base_name": "MPI_Ssend",
      "pmpi_name": "PMPI_Ssend",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
      "c_args": "buf, count, datatype, dest, tag, comm",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm"
    },
    {
      "name": "MPI_Ssend_init",
      "base_name": "MPI_Ssend_init",
      "pmpi_name": "PMPI_Ssend_init",
      "embiggened": false,
      "c_params": "const void* buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count, dest, tag\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ssend_init_c",
      "base_name": "MPI_Ssend_init",
      "pmpi_name": "PMPI_Ssend_init",
      "embiggened": true,
      "c_params": "const void* buf, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request* request",
      "c_args": "buf, count, datatype, dest, tag, comm, request",
      "fc_params": "const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_par_list": "buf, count, datatype, dest, tag, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: dest, tag\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, count, datatype, dest, tag, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Start",
      "base_name": "MPI_Start",
      "pmpi_name": "PMPI_Start",
      "embiggened": false,
      "c_params": "MPI_Request* request",
      "c_args": "request",
      "fc_params": "MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "request, ierror",
      "f08_par_list": "request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(INOUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: request",
      "cshim_cdesc_params": "MPI_Fint* request"
    },
    {
      "name": "MPI_Startall",
      "base_name": "MPI_Startall",
      "pmpi_name": "PMPI_Startall",
      "embiggened": false,
      "c_params": "int count, MPI_Request array_of_requests[]",
      "c_args": "count, array_of_requests",
      "fc_params": "MPI_Fint *count, MPI_Fint *array_of_requests, MPI_Fint *ierror",
      "fc_args": "count, array_of_requests, ierror",
      "f08_par_list": "count, array_of_requests, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_requests",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_requests%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_requests",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), INTENT(INOUT) :: array_of_requests(count)",
      "cshim_cdesc_params": "int count, MPI_Fint array_of_requests[]"
    },
    {
      "name": "MPI_Status_get_error",
      "base_name": "MPI_Status_get_error",
      "pmpi_name": "PMPI_Status_get_error",
      "embiggened": false,
      "c_params": "const MPI_Status* status, int* err",
      "c_args": "status, err",
      "fc_params": "const MPI_Fint *status, MPI_Fint *err, MPI_Fint *ierror",
      "fc_args": "status, err, ierror",
      "f08_par_list": "status, err, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    INTEGER, INTENT(OUT) :: err\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, err",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, err",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, err",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            INTEGER(c_int), INTENT(OUT) :: err",
      "cshim_cdesc_params": "const MPI_F08_status* status, int* err"
    },
    {
      "name": "MPI_Status_get_source",
      "base_name": "MPI_Status_get_source",
      "pmpi_name": "PMPI_Status_get_source",
      "embiggened": false,
      "c_params": "const MPI_Status* status, int* source",
      "c_args": "status, source",
      "fc_params": "const MPI_Fint *status, MPI_Fint *source, MPI_Fint *ierror",
      "fc_args": "status, source, ierror",
      "f08_par_list": "status, source, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    INTEGER, INTENT(OUT) :: source\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, source",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, source",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, source",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            INTEGER(c_int), INTENT(OUT) :: source",
      "cshim_cdesc_params": "const MPI_F08_status* status, int* source"
    },
    {
      "name": "MPI_Status_get_tag",
      "base_name": "MPI_Status_get_tag",
      "pmpi_name": "PMPI_Status_get_tag",
      "embiggened": false,
      "c_params": "const MPI_Status* status, int* tag",
      "c_args": "status, tag",
      "fc_params": "const MPI_Fint *status, MPI_Fint *tag, MPI_Fint *ierror",
      "fc_args": "status, tag, ierror",
      "f08_par_list": "status, tag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    INTEGER, INTENT(OUT) :: tag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, tag",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, tag",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, tag",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            INTEGER(c_int), INTENT(OUT) :: tag",
      "cshim_cdesc_params": "const MPI_F08_status* status, int* tag"
    },
    {
      "name": "MPI_Test",
      "base_name": "MPI_Test",
      "pmpi_name": "PMPI_Test",
      "embiggened": false,
      "c_params": "MPI_Request* request, int* flag, MPI_Status* status",
      "c_args": "request, flag, status",
      "fc_params": "MPI_Fint *request, MPI_Fint *flag, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "request, flag, status, ierror",
      "f08_par_list": "request, flag, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(INOUT) :: request\n    LOGICAL, INTENT(OUT) :: flag\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request, flag, status",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL, flag_c, status",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "request, flag, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: request\n            INTEGER(c_int), INTENT(OUT) :: flag\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint* request, int* flag, MPI_F08_status* status"
    },
    {
      "name": "MPI_Test_cancelled",
      "base_name": "MPI_Test_cancelled",
      "pmpi_name": "PMPI_Test_cancelled",
      "embiggened": false,
      "c_params": "const MPI_Status* status, int* flag",
      "c_args": "status, flag",
      "fc_params": "const MPI_Fint *status, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "status, flag, ierror",
      "f08_par_list": "status, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "status, flag",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "const MPI_F08_status* status, int* flag"
    },
    {
      "name": "MPI_Testall",
      "base_name": "MPI_Testall",
      "pmpi_name": "PMPI_Testall",
      "embiggened": false,
      "c_params": "int count, MPI_Request array_of_requests[], int* flag, MPI_Status array_of_statuses[]",
      "c_args": "count, array_of_requests, flag, array_of_statuses",
      "fc_params": "MPI_Fint *count, MPI_Fint *array_of_requests, MPI_Fint *flag, MPI_Fint *array_of_statuses, MPI_Fint *ierror",
      "fc_args": "count, array_of_requests, flag, array_of_statuses, ierror",
      "f08_par_list": "count, array_of_requests, flag, array_of_statuses, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count)\n    LOGICAL, INTENT(OUT) :: flag\n    TYPE(MPI_Status) :: array_of_statuses(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_requests, flag, array_of_statuses",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_requests%MPI_VAL, flag_c, array_of_statuses",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "count, array_of_requests, flag, array_of_statuses",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), INTENT(INOUT) :: array_of_requests(count)\n            INTEGER(c_int), INTENT(OUT) :: flag\n            TYPE(MPI_Status) :: array_of_statuses(*)",
      "cshim_cdesc_params": "int count, MPI_Fint array_of_requests[], int* flag, MPI_Status array_of_statuses[]"
    },
    {
      "name": "MPI_Testany",
      "base_name": "MPI_Testany",
      "pmpi_name": "PMPI_Testany",
      "embiggened": false,
      "c_params": "int count, MPI_Request array_of_requests[], int* index, int* flag, MPI_Status* status",
      "c_args": "count, array_of_requests, index, flag, status",
      "fc_params": "MPI_Fint *count, MPI_Fint *array_of_requests, MPI_Fint *index, MPI_Fint *flag, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "count, array_of_requests, index, flag, status, ierror",
      "f08_par_list": "count, array_of_requests, index, flag, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count)\n    INTEGER, INTENT(OUT) :: index\n    LOGICAL, INTENT(OUT) :: flag\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_requests, index, flag, status",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: MPI_UNDEFINED\n    use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: index_c\n    integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_requests%MPI_VAL, index_c, flag_c, status",
      "f08_cshim_postcall_stmts": "if (index_c == MPI_UNDEFINED) then\n        index = index_c\n    else\n        index = index_c + 1\n    endif\n    flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "count, array_of_requests, index, flag, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), INTENT(INOUT) :: array_of_requests(count)\n            INTEGER(c_int), INTENT(OUT) :: index\n            INTEGER(c_int), INTENT(OUT) :: flag\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "int count, MPI_Fint array_of_requests[], int* index, int* flag, MPI_F08_status* status"
    },
    {
      "name": "MPI_Testsome",
      "base_name": "MPI_Testsome",
      "pmpi_name": "PMPI_Testsome",
      "embiggened": false,
      "c_params": "int incount, MPI_Request array_of_requests[], int* outcount, int array_of_indices[], MPI_Status array_of_statuses[]",
      "c_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "fc_params": "MPI_Fint *incount, MPI_Fint *array_of_requests, MPI_Fint *outcount, MPI_Fint *array_of_indices, MPI_Fint *array_of_statuses, MPI_Fint *ierror",
      "fc_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses, ierror",
      "f08_par_list": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: incount\n    TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(incount)\n    INTEGER, INTENT(OUT) :: outcount, array_of_indices(*)\n    TYPE(MPI_Status) :: array_of_statuses(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "incount, array_of_requests%MPI_VAL, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: incount\n            integer(c_int), INTENT(INOUT) :: array_of_requests(incount)\n            INTEGER(c_int), INTENT(OUT) :: outcount\n            INTEGER(c_int), INTENT(OUT) :: array_of_indices(*)\n            TYPE(MPI_Status) :: array_of_statuses(*)",
      "cshim_cdesc_params": "int incount, MPI_Fint array_of_requests[], int* outcount, int array_of_indices[], MPI_Status array_of_statuses[]"
    },
    {
      "name": "MPI_Wait",
      "base_name": "MPI_Wait",
      "pmpi_name": "PMPI_Wait",
      "embiggened": false,
      "c_params": "MPI_Request* request, MPI_Status* status",
      "c_args": "request, status",
      "fc_params": "MPI_Fint *request, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "request, status, ierror",
      "f08_par_list": "request, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(INOUT) :: request\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "request, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: request\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint* request, MPI_F08_status* status"
    },
    {
      "name": "MPI_Waitall",
      "base_name": "MPI_Waitall",
      "pmpi_name": "PMPI_Waitall",
      "embiggened": false,
      "c_params": "int count, MPI_Request array_of_requests[], MPI_Status array_of_statuses[]",
      "c_args": "count, array_of_requests, array_of_statuses",
      "fc_params": "MPI_Fint *count, MPI_Fint *array_of_requests, MPI_Fint *array_of_statuses, MPI_Fint *ierror",
      "fc_args": "count, array_of_requests, array_of_statuses, ierror",
      "f08_par_list": "count, array_of_requests, array_of_statuses, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count)\n    TYPE(MPI_Status) :: array_of_statuses(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_requests, array_of_statuses",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_requests%MPI_VAL, array_of_statuses",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_requests, array_of_statuses",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), INTENT(INOUT) :: array_of_requests(count)\n            TYPE(MPI_Status) :: array_of_statuses(*)",
      "cshim_cdesc_params": "int count, MPI_Fint array_of_requests[], MPI_Status array_of_statuses[]"
    },
    {
      "name": "MPI_Waitany",
      "base_name": "MPI_Waitany",
      "pmpi_name": "PMPI_Waitany",
      "embiggened": false,
      "c_params": "int count, MPI_Request array_of_requests[], int* index, MPI_Status* status",
      "c_args": "count, array_of_requests, index, status",
      "fc_params": "MPI_Fint *count, MPI_Fint *array_of_requests, MPI_Fint *index, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "count, array_of_requests, index, status, ierror",
      "f08_par_list": "count, array_of_requests, index, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count)\n    INTEGER, INTENT(OUT) :: index\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_requests, index, status",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: MPI_UNDEFINED\n    use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: index_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_requests%MPI_VAL, index_c, status",
      "f08_cshim_postcall_stmts": "if (index_c == MPI_UNDEFINED) then\n        index = index_c\n    else\n        index = index_c + 1\n    endif",
      "f08_cshim_iface_par_list": "count, array_of_requests, index, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), INTENT(INOUT) :: array_of_requests(count)\n            INTEGER(c_int), INTENT(OUT) :: index\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "int count, MPI_Fint array_of_requests[], int* index, MPI_F08_status* status"
    },
    {
      "name": "MPI_Waitsome",
      "base_name": "MPI_Waitsome",
      "pmpi_name": "PMPI_Waitsome",
      "embiggened": false,
      "c_params": "int incount, MPI_Request array_of_requests[], int* outcount, int array_of_indices[], MPI_Status array_of_statuses[]",
      "c_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "fc_params": "MPI_Fint *incount, MPI_Fint *array_of_requests, MPI_Fint *outcount, MPI_Fint *array_of_indices, MPI_Fint *array_of_statuses, MPI_Fint *ierror",
      "fc_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses, ierror",
      "f08_par_list": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: incount\n    TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(incount)\n    INTEGER, INTENT(OUT) :: outcount, array_of_indices(*)\n    TYPE(MPI_Status) :: array_of_statuses(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "incount, array_of_requests%MPI_VAL, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "incount, array_of_requests, outcount, array_of_indices, array_of_statuses",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: incount\n            integer(c_int), INTENT(INOUT) :: array_of_requests(incount)\n            INTEGER(c_int), INTENT(OUT) :: outcount\n            INTEGER(c_int), INTENT(OUT) :: array_of_indices(*)\n            TYPE(MPI_Status) :: array_of_statuses(*)",
      "cshim_cdesc_params": "int incount, MPI_Fint array_of_requests[], int* outcount, int array_of_indices[], MPI_Status array_of_statuses[]"
    },
    {
      "name": "MPI_Parrived",
      "base_name": "MPI_Parrived",
      "pmpi_name": "PMPI_Parrived",
      "embiggened": false,
      "c_params": "MPI_Request request, int partition, int* flag",
      "c_args": "request, partition, flag",
      "fc_params": "MPI_Fint *request, MPI_Fint *partition, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "request, partition, flag, ierror",
      "f08_par_list": "request, partition, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(IN) :: request\n    INTEGER, INTENT(IN) :: partition\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request, partition, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL, partition, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "request, partition, flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: request\n            INTEGER(c_int), VALUE, INTENT(IN) :: partition\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint request, int partition, int* flag"
    },
    {
      "name": "MPI_Pready",
      "base_name": "MPI_Pready",
      "pmpi_name": "PMPI_Pready",
      "embiggened": false,
      "c_params": "int partition, MPI_Request request",
      "c_args": "partition, request",
      "fc_params": "MPI_Fint *partition, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "partition, request, ierror",
      "f08_par_list": "partition, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: partition\n    TYPE(MPI_Request), INTENT(IN) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "partition, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "partition, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "partition, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: partition\n            integer(c_int), VALUE, INTENT(IN) :: request",
      "cshim_cdesc_params": "int partition, MPI_Fint request"
    },
    {
      "name": "MPI_Pready_list",
      "base_name": "MPI_Pready_list",
      "pmpi_name": "PMPI_Pready_list",
      "embiggened": false,
      "c_params": "int length, const int array_of_partitions[], MPI_Request request",
      "c_args": "length, array_of_partitions, request",
      "fc_params": "MPI_Fint *length, const MPI_Fint *array_of_partitions, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "length, array_of_partitions, request, ierror",
      "f08_par_list": "length, array_of_partitions, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: length, array_of_partitions(length)\n    TYPE(MPI_Request), INTENT(IN) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "length, array_of_partitions, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "length, array_of_partitions, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "length, array_of_partitions, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: length\n            INTEGER(c_int), INTENT(IN) :: array_of_partitions(length)\n            integer(c_int), VALUE, INTENT(IN) :: request",
      "cshim_cdesc_params": "int length, const int array_of_partitions[], MPI_Fint request"
    },
    {
      "name": "MPI_Pready_range",
      "base_name": "MPI_Pready_range",
      "pmpi_name": "PMPI_Pready_range",
      "embiggened": false,
      "c_params": "int partition_low, int partition_high, MPI_Request request",
      "c_args": "partition_low, partition_high, request",
      "fc_params": "MPI_Fint *partition_low, MPI_Fint *partition_high, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "partition_low, partition_high, request, ierror",
      "f08_par_list": "partition_low, partition_high, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "INTEGER, INTENT(IN) :: partition_low, partition_high\n    TYPE(MPI_Request), INTENT(IN) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "partition_low, partition_high, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "partition_low, partition_high, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "partition_low, partition_high, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: partition_low\n            INTEGER(c_int), VALUE, INTENT(IN) :: partition_high\n            integer(c_int), VALUE, INTENT(IN) :: request",
      "cshim_cdesc_params": "int partition_low, int partition_high, MPI_Fint request"
    },
    {
      "name": "MPI_Precv_init",
      "base_name": "MPI_Precv_init",
      "pmpi_name": "PMPI_Precv_init",
      "embiggened": false,
      "c_params": "void* buf, int partitions, MPI_Count count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "buf, partitions, count, datatype, source, tag, comm, info, request",
      "fc_params": "void* buf, MPI_Fint *partitions, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *source, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, partitions, count, datatype, source, tag, comm, info, request, ierror",
      "f08_par_list": "buf, partitions, count, datatype, source, tag, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: partitions, source, tag\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, partitions, count, datatype, source, tag, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, partitions, count, datatype%MPI_VAL, source, tag, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, partitions, count, datatype, source, tag, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: partitions\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: source\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int partitions, MPI_Count count, MPI_Fint datatype, int source, int tag, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Psend_init",
      "base_name": "MPI_Psend_init",
      "pmpi_name": "PMPI_Psend_init",
      "embiggened": false,
      "c_params": "const void* buf, int partitions, MPI_Count count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "buf, partitions, count, datatype, dest, tag, comm, info, request",
      "fc_params": "const void* buf, MPI_Fint *partitions, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *dest, MPI_Fint *tag, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buf, partitions, count, datatype, dest, tag, comm, info, request, ierror",
      "f08_par_list": "buf, partitions, count, datatype, dest, tag, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: partitions, dest, tag\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buf, partitions, count, datatype, dest, tag, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buf, partitions, count, datatype%MPI_VAL, dest, tag, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buf, partitions, count, datatype, dest, tag, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: partitions\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: dest\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buf, int partitions, MPI_Count count, MPI_Fint datatype, int dest, int tag, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Get_address",
      "base_name": "MPI_Get_address",
      "pmpi_name": "PMPI_Get_address",
      "embiggened": false,
      "c_params": "const void* location, MPI_Aint* address",
      "c_args": "location, address",
      "fc_params": "const void* location, MPI_Fint *address, MPI_Fint *ierror",
      "fc_args": "location, address, ierror",
      "f08_par_list": "location, address, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: location\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: address\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "location, address",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "location, address",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "location, address",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: location\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: address",
      "cshim_cdesc_params": "CFI_cdesc_t * location, MPI_Aint* address"
    },
    {
      "name": "MPI_Get_elements",
      "base_name": "MPI_Get_elements",
      "pmpi_name": "PMPI_Get_elements",
      "embiggened": false,
      "c_params": "const MPI_Status* status, MPI_Datatype datatype, int* count",
      "c_args": "status, datatype, count",
      "fc_params": "const MPI_Fint *status, MPI_Fint *datatype, MPI_Fint *count, MPI_Fint *ierror",
      "fc_args": "status, datatype, count, ierror",
      "f08_par_list": "status, datatype, count, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(OUT) :: count\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, datatype, count",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, datatype%MPI_VAL, count",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, datatype, count",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), INTENT(OUT) :: count",
      "cshim_cdesc_params": "const MPI_F08_status* status, MPI_Fint datatype, int* count"
    },
    {
      "name": "MPI_Get_elements_c",
      "base_name": "MPI_Get_elements",
      "pmpi_name": "PMPI_Get_elements",
      "embiggened": true,
      "c_params": "const MPI_Status* status, MPI_Datatype datatype, MPI_Count* count",
      "c_args": "status, datatype, count",
      "fc_params": "const MPI_Fint *status, MPI_Fint *datatype, MPI_Fint *count, MPI_Fint *ierror",
      "fc_args": "status, datatype, count, ierror",
      "f08_par_list": "status, datatype, count, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: count\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, datatype, count",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, datatype%MPI_VAL, count",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, datatype, count",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: count",
      "cshim_cdesc_params": "const MPI_F08_status* status, MPI_Fint datatype, MPI_Count* count"
    },
    {
      "name": "MPI_Get_elements_x",
      "base_name": "MPI_Get_elements_x",
      "pmpi_name": "PMPI_Get_elements_x",
      "embiggened": false,
      "c_params": "const MPI_Status* status, MPI_Datatype datatype, MPI_Count* count",
      "c_args": "status, datatype, count",
      "fc_params": "const MPI_Fint *status, MPI_Fint *datatype, MPI_Fint *count, MPI_Fint *ierror",
      "fc_args": "status, datatype, count, ierror",
      "f08_par_list": "status, datatype, count, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: count\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, datatype, count",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, datatype%MPI_VAL, count",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, datatype, count",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(IN) :: status\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: count",
      "cshim_cdesc_params": "const MPI_F08_status* status, MPI_Fint datatype, MPI_Count* count"
    },
    {
      "name": "MPI_Pack",
      "base_name": "MPI_Pack",
      "pmpi_name": "PMPI_Pack",
      "embiggened": false,
      "c_params": "const void* inbuf, int incount, MPI_Datatype datatype, void* outbuf, int outsize, int* position, MPI_Comm comm",
      "c_args": "inbuf, incount, datatype, outbuf, outsize, position, comm",
      "fc_params": "const void* inbuf, MPI_Fint *incount, MPI_Fint *datatype, void* outbuf, MPI_Fint *outsize, MPI_Fint *position, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "inbuf, incount, datatype, outbuf, outsize, position, comm, ierror",
      "f08_par_list": "inbuf, incount, datatype, outbuf, outsize, position, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    INTEGER, INTENT(IN) :: incount, outsize\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    CHOICE_BUFFER_TYPE :: outbuf\n    INTEGER, INTENT(INOUT) :: position\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "inbuf, incount, datatype, outbuf, outsize, position, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "inbuf, incount, datatype%MPI_VAL, outbuf, outsize, position, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "inbuf, incount, datatype, outbuf, outsize, position, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: incount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            CHOICE_BUFFER_TYPE :: outbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: outsize\n            INTEGER(c_int), INTENT(INOUT) :: position\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * inbuf, int incount, MPI_Fint datatype, CFI_cdesc_t * outbuf, int outsize, int* position, MPI_Fint comm"
    },
    {
      "name": "MPI_Pack_c",
      "base_name": "MPI_Pack",
      "pmpi_name": "PMPI_Pack",
      "embiggened": true,
      "c_params": "const void* inbuf, MPI_Count incount, MPI_Datatype datatype, void* outbuf, MPI_Count outsize, MPI_Count* position, MPI_Comm comm",
      "c_args": "inbuf, incount, datatype, outbuf, outsize, position, comm",
      "fc_params": "const void* inbuf, MPI_Fint *incount, MPI_Fint *datatype, void* outbuf, MPI_Fint *outsize, MPI_Fint *position, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "inbuf, incount, datatype, outbuf, outsize, position, comm, ierror",
      "f08_par_list": "inbuf, incount, datatype, outbuf, outsize, position, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: incount, outsize\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    CHOICE_BUFFER_TYPE :: outbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: position\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "inbuf, incount, datatype, outbuf, outsize, position, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "inbuf, incount, datatype%MPI_VAL, outbuf, outsize, position, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "inbuf, incount, datatype, outbuf, outsize, position, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: incount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            CHOICE_BUFFER_TYPE :: outbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: outsize\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: position\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * inbuf, MPI_Count incount, MPI_Fint datatype, CFI_cdesc_t * outbuf, MPI_Count outsize, MPI_Count* position, MPI_Fint comm"
    },
    {
      "name": "MPI_Pack_external",
      "base_name": "MPI_Pack_external",
      "pmpi_name": "PMPI_Pack_external",
      "embiggened": false,
      "c_params": "const char datarep[], const void* inbuf, int incount, MPI_Datatype datatype, void* outbuf, MPI_Aint outsize, MPI_Aint* position",
      "c_args": "datarep, inbuf, incount, datatype, outbuf, outsize, position",
      "fc_params": "const char datarep[], const void* inbuf, MPI_Fint *incount, MPI_Fint *datatype, void* outbuf, MPI_Fint *outsize, MPI_Fint *position, MPI_Fint *ierror, int datarep_len",
      "fc_args": "datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror, datarep_len",
      "f08_par_list": "datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: datarep\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    INTEGER, INTENT(IN) :: incount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    CHOICE_BUFFER_TYPE :: outbuf\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: outsize\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datarep, inbuf, incount, datatype, outbuf, outsize, position",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)",
      "f08_cshim_args": "datarep_c, inbuf, incount, datatype%MPI_VAL, outbuf, outsize, position",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datarep, inbuf, incount, datatype, outbuf, outsize, position",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: incount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            CHOICE_BUFFER_TYPE :: outbuf\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: outsize\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position",
      "cshim_cdesc_params": "const char datarep[], CFI_cdesc_t * inbuf, int incount, MPI_Fint datatype, CFI_cdesc_t * outbuf, MPI_Aint outsize, MPI_Aint* position"
    },
    {
      "name": "MPI_Pack_external_c",
      "base_name": "MPI_Pack_external",
      "pmpi_name": "PMPI_Pack_external",
      "embiggened": true,
      "c_params": "const char datarep[], const void* inbuf, MPI_Count incount, MPI_Datatype datatype, void* outbuf, MPI_Count outsize, MPI_Count* position",
      "c_args": "datarep, inbuf, incount, datatype, outbuf, outsize, position",
      "fc_params": "const char datarep[], const void* inbuf, MPI_Fint *incount, MPI_Fint *datatype, void* outbuf, MPI_Fint *outsize, MPI_Fint *position, MPI_Fint *ierror, int datarep_len",
      "fc_args": "datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror, datarep_len",
      "f08_par_list": "datarep, inbuf, incount, datatype, outbuf, outsize, position, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: datarep\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: incount, outsize\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    CHOICE_BUFFER_TYPE :: outbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: position\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datarep, inbuf, incount, datatype, outbuf, outsize, position",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)",
      "f08_cshim_args": "datarep_c, inbuf, incount, datatype%MPI_VAL, outbuf, outsize, position",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datarep, inbuf, incount, datatype, outbuf, outsize, position",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: incount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            CHOICE_BUFFER_TYPE :: outbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: outsize\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: position",
      "cshim_cdesc_params": "const char datarep[], CFI_cdesc_t * inbuf, MPI_Count incount, MPI_Fint datatype, CFI_cdesc_t * outbuf, MPI_Count outsize, MPI_Count* position"
    },
    {
      "name": "MPI_Pack_external_size",
      "base_name": "MPI_Pack_external_size",
      "pmpi_name": "PMPI_Pack_external_size",
      "embiggened": false,
      "c_params": "const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint* size",
      "c_args": "datarep, incount, datatype, size",
      "fc_params": "const char datarep[], MPI_Fint *incount, MPI_Fint *datatype, MPI_Fint *size, MPI_Fint *ierror, int datarep_len",
      "fc_args": "datarep, incount, datatype, size, ierror, datarep_len",
      "f08_par_list": "datarep, incount, datatype, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: datarep\n    INTEGER, INTENT(IN) :: incount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datarep, incount, datatype, size",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)",
      "f08_cshim_args": "datarep_c, incount, datatype%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datarep, incount, datatype, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            INTEGER(c_int), VALUE, INTENT(IN) :: incount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "const char datarep[], int incount, MPI_Fint datatype, MPI_Aint* size"
    },
    {
      "name": "MPI_Pack_external_size_c",
      "base_name": "MPI_Pack_external_size",
      "pmpi_name": "PMPI_Pack_external_size",
      "embiggened": true,
      "c_params": "const char datarep[], MPI_Count incount, MPI_Datatype datatype, MPI_Count* size",
      "c_args": "datarep, incount, datatype, size",
      "fc_params": "const char datarep[], MPI_Fint *incount, MPI_Fint *datatype, MPI_Fint *size, MPI_Fint *ierror, int datarep_len",
      "fc_args": "datarep, incount, datatype, size, ierror, datarep_len",
      "f08_par_list": "datarep, incount, datatype, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: datarep\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: incount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datarep, incount, datatype, size",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)",
      "f08_cshim_args": "datarep_c, incount, datatype%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datarep, incount, datatype, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: incount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "const char datarep[], MPI_Count incount, MPI_Fint datatype, MPI_Count* size"
    },
    {
      "name": "MPI_Pack_size",
      "base_name": "MPI_Pack_size",
      "pmpi_name": "PMPI_Pack_size",
      "embiggened": false,
      "c_params": "int incount, MPI_Datatype datatype, MPI_Comm comm, int* size",
      "c_args": "incount, datatype, comm, size",
      "fc_params": "MPI_Fint *incount, MPI_Fint *datatype, MPI_Fint *comm, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "incount, datatype, comm, size, ierror",
      "f08_par_list": "incount, datatype, comm, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: incount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "incount, datatype, comm, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "incount, datatype%MPI_VAL, comm%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "incount, datatype, comm, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: incount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: size",
      "cshim_cdesc_params": "int incount, MPI_Fint datatype, MPI_Fint comm, int* size"
    },
    {
      "name": "MPI_Pack_size_c",
      "base_name": "MPI_Pack_size",
      "pmpi_name": "PMPI_Pack_size",
      "embiggened": true,
      "c_params": "MPI_Count incount, MPI_Datatype datatype, MPI_Comm comm, MPI_Count* size",
      "c_args": "incount, datatype, comm, size",
      "fc_params": "MPI_Fint *incount, MPI_Fint *datatype, MPI_Fint *comm, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "incount, datatype, comm, size, ierror",
      "f08_par_list": "incount, datatype, comm, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: incount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "incount, datatype, comm, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "incount, datatype%MPI_VAL, comm%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "incount, datatype, comm, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: incount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Count incount, MPI_Fint datatype, MPI_Fint comm, MPI_Count* size"
    },
    {
      "name": "MPI_Type_commit",
      "base_name": "MPI_Type_commit",
      "pmpi_name": "PMPI_Type_commit",
      "embiggened": false,
      "c_params": "MPI_Datatype* datatype",
      "c_args": "datatype",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "datatype, ierror",
      "f08_par_list": "datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(INOUT) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: datatype",
      "cshim_cdesc_params": "MPI_Fint* datatype"
    },
    {
      "name": "MPI_Type_contiguous",
      "base_name": "MPI_Type_contiguous",
      "pmpi_name": "PMPI_Type_contiguous",
      "embiggened": false,
      "c_params": "int count, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, oldtype, newtype, ierror",
      "f08_par_list": "count, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int count, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_contiguous_c",
      "base_name": "MPI_Type_contiguous",
      "pmpi_name": "PMPI_Type_contiguous",
      "embiggened": true,
      "c_params": "MPI_Count count, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, oldtype, newtype, ierror",
      "f08_par_list": "count, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Count count, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_darray",
      "base_name": "MPI_Type_create_darray",
      "pmpi_name": "PMPI_Type_create_darray",
      "embiggened": false,
      "c_params": "int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype",
      "fc_params": "MPI_Fint *size, MPI_Fint *rank, MPI_Fint *ndims, const MPI_Fint *array_of_gsizes, const MPI_Fint *array_of_distribs, const MPI_Fint *array_of_dargs, const MPI_Fint *array_of_psizes, MPI_Fint *order, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype, ierror",
      "f08_par_list": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: size, rank, ndims, array_of_gsizes(ndims), array_of_distribs(ndims), array_of_dargs(ndims), array_of_psizes(ndims), order\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: size\n            INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            INTEGER(c_int), VALUE, INTENT(IN) :: ndims\n            INTEGER(c_int), INTENT(IN) :: array_of_gsizes(ndims)\n            INTEGER(c_int), INTENT(IN) :: array_of_distribs(ndims)\n            INTEGER(c_int), INTENT(IN) :: array_of_dargs(ndims)\n            INTEGER(c_int), INTENT(IN) :: array_of_psizes(ndims)\n            INTEGER(c_int), VALUE, INTENT(IN) :: order\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int size, int rank, int ndims, const int array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_darray_c",
      "base_name": "MPI_Type_create_darray",
      "pmpi_name": "PMPI_Type_create_darray",
      "embiggened": true,
      "c_params": "int size, int rank, int ndims, const MPI_Count array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype",
      "fc_params": "MPI_Fint *size, MPI_Fint *rank, MPI_Fint *ndims, const MPI_Fint *array_of_gsizes, const MPI_Fint *array_of_distribs, const MPI_Fint *array_of_dargs, const MPI_Fint *array_of_psizes, MPI_Fint *order, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype, ierror",
      "f08_par_list": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: size, rank, ndims, array_of_distribs(ndims), array_of_dargs(ndims), array_of_psizes(ndims), order\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_gsizes(ndims)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "size, rank, ndims, array_of_gsizes, array_of_distribs, array_of_dargs, array_of_psizes, order, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: size\n            INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            INTEGER(c_int), VALUE, INTENT(IN) :: ndims\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_gsizes(ndims)\n            INTEGER(c_int), INTENT(IN) :: array_of_distribs(ndims)\n            INTEGER(c_int), INTENT(IN) :: array_of_dargs(ndims)\n            INTEGER(c_int), INTENT(IN) :: array_of_psizes(ndims)\n            INTEGER(c_int), VALUE, INTENT(IN) :: order\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int size, int rank, int ndims, const MPI_Count array_of_gsizes[], const int array_of_distribs[], const int array_of_dargs[], const int array_of_psizes[], int order, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_hindexed",
      "base_name": "MPI_Type_create_hindexed",
      "pmpi_name": "PMPI_Type_create_hindexed",
      "embiggened": false,
      "c_params": "int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "fc_params": "MPI_Fint *count, const MPI_Fint *array_of_blocklengths, const MPI_Fint *array_of_displacements, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror",
      "f08_par_list": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count, array_of_blocklengths(count)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_blocklengths, array_of_displacements, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            INTEGER(c_int), INTENT(IN) :: array_of_blocklengths(count)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_hindexed_c",
      "base_name": "MPI_Type_create_hindexed",
      "pmpi_name": "PMPI_Type_create_hindexed",
      "embiggened": true,
      "c_params": "MPI_Count count, const MPI_Count array_of_blocklengths[], const MPI_Count array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "fc_params": "MPI_Fint *count, const MPI_Fint *array_of_blocklengths, const MPI_Fint *array_of_displacements, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror",
      "f08_par_list": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count, array_of_blocklengths(count), array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_blocklengths, array_of_displacements, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_blocklengths(count)\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Count count, const MPI_Count array_of_blocklengths[], const MPI_Count array_of_displacements[], MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_hindexed_block",
      "base_name": "MPI_Type_create_hindexed_block",
      "pmpi_name": "PMPI_Type_create_hindexed_block",
      "embiggened": false,
      "c_params": "int count, int blocklength, const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, blocklength, array_of_displacements, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *blocklength, const MPI_Fint *array_of_displacements, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, blocklength, array_of_displacements, oldtype, newtype, ierror",
      "f08_par_list": "count, blocklength, array_of_displacements, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count, blocklength\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, blocklength, array_of_displacements, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, blocklength, array_of_displacements, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, blocklength, array_of_displacements, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            INTEGER(c_int), VALUE, INTENT(IN) :: blocklength\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int count, int blocklength, const MPI_Aint array_of_displacements[], MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_hindexed_block_c",
      "base_name": "MPI_Type_create_hindexed_block",
      "pmpi_name": "PMPI_Type_create_hindexed_block",
      "embiggened": true,
      "c_params": "MPI_Count count, MPI_Count blocklength, const MPI_Count array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, blocklength, array_of_displacements, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *blocklength, const MPI_Fint *array_of_displacements, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, blocklength, array_of_displacements, oldtype, newtype, ierror",
      "f08_par_list": "count, blocklength, array_of_displacements, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count, blocklength, array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, blocklength, array_of_displacements, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, blocklength, array_of_displacements, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, blocklength, array_of_displacements, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: blocklength\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Count count, MPI_Count blocklength, const MPI_Count array_of_displacements[], MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_hvector",
      "base_name": "MPI_Type_create_hvector",
      "pmpi_name": "PMPI_Type_create_hvector",
      "embiggened": false,
      "c_params": "int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, blocklength, stride, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *blocklength, MPI_Fint *stride, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, blocklength, stride, oldtype, newtype, ierror",
      "f08_par_list": "count, blocklength, stride, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count, blocklength\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: stride\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, blocklength, stride, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, blocklength, stride, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, blocklength, stride, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            INTEGER(c_int), VALUE, INTENT(IN) :: blocklength\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: stride\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int count, int blocklength, MPI_Aint stride, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_hvector_c",
      "base_name": "MPI_Type_create_hvector",
      "pmpi_name": "PMPI_Type_create_hvector",
      "embiggened": true,
      "c_params": "MPI_Count count, MPI_Count blocklength, MPI_Count stride, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, blocklength, stride, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *blocklength, MPI_Fint *stride, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, blocklength, stride, oldtype, newtype, ierror",
      "f08_par_list": "count, blocklength, stride, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count, blocklength, stride\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, blocklength, stride, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, blocklength, stride, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, blocklength, stride, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: blocklength\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: stride\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Count count, MPI_Count blocklength, MPI_Count stride, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_indexed_block",
      "base_name": "MPI_Type_create_indexed_block",
      "pmpi_name": "PMPI_Type_create_indexed_block",
      "embiggened": false,
      "c_params": "int count, int blocklength, const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, blocklength, array_of_displacements, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *blocklength, const MPI_Fint *array_of_displacements, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, blocklength, array_of_displacements, oldtype, newtype, ierror",
      "f08_par_list": "count, blocklength, array_of_displacements, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count, blocklength, array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, blocklength, array_of_displacements, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, blocklength, array_of_displacements, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, blocklength, array_of_displacements, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            INTEGER(c_int), VALUE, INTENT(IN) :: blocklength\n            INTEGER(c_int), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int count, int blocklength, const int array_of_displacements[], MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_indexed_block_c",
      "base_name": "MPI_Type_create_indexed_block",
      "pmpi_name": "PMPI_Type_create_indexed_block",
      "embiggened": true,
      "c_params": "MPI_Count count, MPI_Count blocklength, const MPI_Count array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, blocklength, array_of_displacements, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *blocklength, const MPI_Fint *array_of_displacements, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, blocklength, array_of_displacements, oldtype, newtype, ierror",
      "f08_par_list": "count, blocklength, array_of_displacements, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count, blocklength, array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, blocklength, array_of_displacements, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, blocklength, array_of_displacements, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, blocklength, array_of_displacements, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: blocklength\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Count count, MPI_Count blocklength, const MPI_Count array_of_displacements[], MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_resized",
      "base_name": "MPI_Type_create_resized",
      "pmpi_name": "PMPI_Type_create_resized",
      "embiggened": false,
      "c_params": "MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype* newtype",
      "c_args": "oldtype, lb, extent, newtype",
      "fc_params": "MPI_Fint *oldtype, MPI_Fint *lb, MPI_Fint *extent, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "oldtype, lb, extent, newtype, ierror",
      "f08_par_list": "oldtype, lb, extent, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: lb, extent\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "oldtype, lb, extent, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "oldtype%MPI_VAL, lb, extent, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "oldtype, lb, extent, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: oldtype\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: lb\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: extent\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Fint oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_resized_c",
      "base_name": "MPI_Type_create_resized",
      "pmpi_name": "PMPI_Type_create_resized",
      "embiggened": true,
      "c_params": "MPI_Datatype oldtype, MPI_Count lb, MPI_Count extent, MPI_Datatype* newtype",
      "c_args": "oldtype, lb, extent, newtype",
      "fc_params": "MPI_Fint *oldtype, MPI_Fint *lb, MPI_Fint *extent, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "oldtype, lb, extent, newtype, ierror",
      "f08_par_list": "oldtype, lb, extent, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: lb, extent\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "oldtype, lb, extent, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "oldtype%MPI_VAL, lb, extent, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "oldtype, lb, extent, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: oldtype\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: lb\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: extent\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Fint oldtype, MPI_Count lb, MPI_Count extent, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_struct",
      "base_name": "MPI_Type_create_struct",
      "pmpi_name": "PMPI_Type_create_struct",
      "embiggened": false,
      "c_params": "int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], const MPI_Datatype array_of_types[], MPI_Datatype* newtype",
      "c_args": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype",
      "fc_params": "MPI_Fint *count, const MPI_Fint *array_of_blocklengths, const MPI_Fint *array_of_displacements, const MPI_Fint *array_of_types, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype, ierror",
      "f08_par_list": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count, array_of_blocklengths(count)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: array_of_types(count)\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_blocklengths, array_of_displacements, array_of_types%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            INTEGER(c_int), INTENT(IN) :: array_of_blocklengths(count)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), INTENT(IN) :: array_of_types(count)\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], const MPI_Fint array_of_types[], MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_struct_c",
      "base_name": "MPI_Type_create_struct",
      "pmpi_name": "PMPI_Type_create_struct",
      "embiggened": true,
      "c_params": "MPI_Count count, const MPI_Count array_of_blocklengths[], const MPI_Count array_of_displacements[], const MPI_Datatype array_of_types[], MPI_Datatype* newtype",
      "c_args": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype",
      "fc_params": "MPI_Fint *count, const MPI_Fint *array_of_blocklengths, const MPI_Fint *array_of_displacements, const MPI_Fint *array_of_types, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype, ierror",
      "f08_par_list": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count, array_of_blocklengths(count), array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: array_of_types(count)\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_blocklengths, array_of_displacements, array_of_types%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_blocklengths, array_of_displacements, array_of_types, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_blocklengths(count)\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), INTENT(IN) :: array_of_types(count)\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Count count, const MPI_Count array_of_blocklengths[], const MPI_Count array_of_displacements[], const MPI_Fint array_of_types[], MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_subarray",
      "base_name": "MPI_Type_create_subarray",
      "pmpi_name": "PMPI_Type_create_subarray",
      "embiggened": false,
      "c_params": "int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype",
      "fc_params": "MPI_Fint *ndims, const MPI_Fint *array_of_sizes, const MPI_Fint *array_of_subsizes, const MPI_Fint *array_of_starts, MPI_Fint *order, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype, ierror",
      "f08_par_list": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: ndims, array_of_sizes(ndims), array_of_subsizes(ndims), array_of_starts(ndims), order\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: ndims\n            INTEGER(c_int), INTENT(IN) :: array_of_sizes(ndims)\n            INTEGER(c_int), INTENT(IN) :: array_of_subsizes(ndims)\n            INTEGER(c_int), INTENT(IN) :: array_of_starts(ndims)\n            INTEGER(c_int), VALUE, INTENT(IN) :: order\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int ndims, const int array_of_sizes[], const int array_of_subsizes[], const int array_of_starts[], int order, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_create_subarray_c",
      "base_name": "MPI_Type_create_subarray",
      "pmpi_name": "PMPI_Type_create_subarray",
      "embiggened": true,
      "c_params": "int ndims, const MPI_Count array_of_sizes[], const MPI_Count array_of_subsizes[], const MPI_Count array_of_starts[], int order, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype",
      "fc_params": "MPI_Fint *ndims, const MPI_Fint *array_of_sizes, const MPI_Fint *array_of_subsizes, const MPI_Fint *array_of_starts, MPI_Fint *order, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype, ierror",
      "f08_par_list": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: ndims, order\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_sizes(ndims), array_of_subsizes(ndims), array_of_starts(ndims)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "ndims, array_of_sizes, array_of_subsizes, array_of_starts, order, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: ndims\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_sizes(ndims)\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_subsizes(ndims)\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_starts(ndims)\n            INTEGER(c_int), VALUE, INTENT(IN) :: order\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int ndims, const MPI_Count array_of_sizes[], const MPI_Count array_of_subsizes[], const MPI_Count array_of_starts[], int order, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_dup",
      "base_name": "MPI_Type_dup",
      "pmpi_name": "PMPI_Type_dup",
      "embiggened": false,
      "c_params": "MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "oldtype, newtype",
      "fc_params": "MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "oldtype, newtype, ierror",
      "f08_par_list": "oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_free",
      "base_name": "MPI_Type_free",
      "pmpi_name": "PMPI_Type_free",
      "embiggened": false,
      "c_params": "MPI_Datatype* datatype",
      "c_args": "datatype",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "datatype, ierror",
      "f08_par_list": "datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(INOUT) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: datatype",
      "cshim_cdesc_params": "MPI_Fint* datatype"
    },
    {
      "name": "MPI_Type_get_contents",
      "base_name": "MPI_Type_get_contents",
      "pmpi_name": "PMPI_Type_get_contents",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]",
      "c_args": "datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *max_integers, MPI_Fint *max_addresses, MPI_Fint *max_datatypes, MPI_Fint *array_of_integers, MPI_Fint *array_of_addresses, MPI_Fint *array_of_datatypes, MPI_Fint *ierror",
      "fc_args": "datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes, ierror",
      "f08_par_list": "datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: max_integers, max_addresses, max_datatypes\n    INTEGER, INTENT(OUT) :: array_of_integers(max_integers)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: array_of_addresses(max_addresses)\n    TYPE(MPI_Datatype), INTENT(OUT) :: array_of_datatypes(max_datatypes)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: max_integers\n            INTEGER(c_int), VALUE, INTENT(IN) :: max_addresses\n            INTEGER(c_int), VALUE, INTENT(IN) :: max_datatypes\n            INTEGER(c_int), INTENT(OUT) :: array_of_integers(max_integers)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: array_of_addresses(max_addresses)\n            integer(c_int), INTENT(OUT) :: array_of_datatypes(max_datatypes)",
      "cshim_cdesc_params": "MPI_Fint datatype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Fint array_of_datatypes[]"
    },
    {
      "name": "MPI_Type_get_contents_c",
      "base_name": "MPI_Type_get_contents",
      "pmpi_name": "PMPI_Type_get_contents",
      "embiggened": true,
      "c_params": "MPI_Datatype datatype, MPI_Count max_integers, MPI_Count max_addresses, MPI_Count max_large_counts, MPI_Count max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Count array_of_large_counts[], MPI_Datatype array_of_datatypes[]",
      "c_args": "datatype, max_integers, max_addresses, max_large_counts, max_datatypes, array_of_integers, array_of_addresses, array_of_large_counts, array_of_datatypes",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *max_integers, MPI_Fint *max_addresses, MPI_Fint *max_datatypes, MPI_Fint *array_of_integers, MPI_Fint *array_of_addresses, MPI_Fint *array_of_datatypes, MPI_Fint *ierror",
      "fc_args": "datatype, max_integers, max_addresses, max_datatypes, array_of_integers, array_of_addresses, array_of_datatypes, ierror",
      "f08_par_list": "datatype, max_integers, max_addresses, max_large_counts, max_datatypes, array_of_integers, array_of_addresses, array_of_large_counts, array_of_datatypes, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: max_integers, max_addresses, max_large_counts, max_datatypes\n    INTEGER, INTENT(OUT) :: array_of_integers(max_integers)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: array_of_addresses(max_addresses)\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: array_of_large_counts(max_large_counts)\n    TYPE(MPI_Datatype), INTENT(OUT) :: array_of_datatypes(max_datatypes)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, max_integers, max_addresses, max_large_counts, max_datatypes, array_of_integers, array_of_addresses, array_of_large_counts, array_of_datatypes",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, max_integers, max_addresses, max_large_counts, max_datatypes, array_of_integers, array_of_addresses, array_of_large_counts, array_of_datatypes%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, max_integers, max_addresses, max_large_counts, max_datatypes, array_of_integers, array_of_addresses, array_of_large_counts, array_of_datatypes",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: max_integers\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: max_addresses\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: max_large_counts\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: max_datatypes\n            INTEGER(c_int), INTENT(OUT) :: array_of_integers(max_integers)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: array_of_addresses(max_addresses)\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: array_of_large_counts(max_large_counts)\n            integer(c_int), INTENT(OUT) :: array_of_datatypes(max_datatypes)",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Count max_integers, MPI_Count max_addresses, MPI_Count max_large_counts, MPI_Count max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Count array_of_large_counts[], MPI_Fint array_of_datatypes[]"
    },
    {
      "name": "MPI_Type_get_envelope",
      "base_name": "MPI_Type_get_envelope",
      "pmpi_name": "PMPI_Type_get_envelope",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, int* num_integers, int* num_addresses, int* num_datatypes, int* combiner",
      "c_args": "datatype, num_integers, num_addresses, num_datatypes, combiner",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *num_integers, MPI_Fint *num_addresses, MPI_Fint *num_datatypes, MPI_Fint *combiner, MPI_Fint *ierror",
      "fc_args": "datatype, num_integers, num_addresses, num_datatypes, combiner, ierror",
      "f08_par_list": "datatype, num_integers, num_addresses, num_datatypes, combiner, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(OUT) :: num_integers, num_addresses, num_datatypes, combiner\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, num_integers, num_addresses, num_datatypes, combiner",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, num_integers, num_addresses, num_datatypes, combiner",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, num_integers, num_addresses, num_datatypes, combiner",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), INTENT(OUT) :: num_integers\n            INTEGER(c_int), INTENT(OUT) :: num_addresses\n            INTEGER(c_int), INTENT(OUT) :: num_datatypes\n            INTEGER(c_int), INTENT(OUT) :: combiner",
      "cshim_cdesc_params": "MPI_Fint datatype, int* num_integers, int* num_addresses, int* num_datatypes, int* combiner"
    },
    {
      "name": "MPI_Type_get_envelope_c",
      "base_name": "MPI_Type_get_envelope",
      "pmpi_name": "PMPI_Type_get_envelope",
      "embiggened": true,
      "c_params": "MPI_Datatype datatype, MPI_Count* num_integers, MPI_Count* num_addresses, MPI_Count* num_large_counts, MPI_Count* num_datatypes, int* combiner",
      "c_args": "datatype, num_integers, num_addresses, num_large_counts, num_datatypes, combiner",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *num_integers, MPI_Fint *num_addresses, MPI_Fint *num_datatypes, MPI_Fint *combiner, MPI_Fint *ierror",
      "fc_args": "datatype, num_integers, num_addresses, num_datatypes, combiner, ierror",
      "f08_par_list": "datatype, num_integers, num_addresses, num_large_counts, num_datatypes, combiner, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: num_integers, num_addresses, num_large_counts, num_datatypes\n    INTEGER, INTENT(OUT) :: combiner\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, num_integers, num_addresses, num_large_counts, num_datatypes, combiner",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, num_integers, num_addresses, num_large_counts, num_datatypes, combiner",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, num_integers, num_addresses, num_large_counts, num_datatypes, combiner",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: num_integers\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: num_addresses\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: num_large_counts\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: num_datatypes\n            INTEGER(c_int), INTENT(OUT) :: combiner",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Count* num_integers, MPI_Count* num_addresses, MPI_Count* num_large_counts, MPI_Count* num_datatypes, int* combiner"
    },
    {
      "name": "MPI_Type_get_extent",
      "base_name": "MPI_Type_get_extent",
      "pmpi_name": "PMPI_Type_get_extent",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, MPI_Aint* lb, MPI_Aint* extent",
      "c_args": "datatype, lb, extent",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *lb, MPI_Fint *extent, MPI_Fint *ierror",
      "fc_args": "datatype, lb, extent, ierror",
      "f08_par_list": "datatype, lb, extent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: lb, extent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, lb, extent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, lb, extent",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, lb, extent",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: lb\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: extent",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Aint* lb, MPI_Aint* extent"
    },
    {
      "name": "MPI_Type_get_extent_c",
      "base_name": "MPI_Type_get_extent",
      "pmpi_name": "PMPI_Type_get_extent",
      "embiggened": true,
      "c_params": "MPI_Datatype datatype, MPI_Count* lb, MPI_Count* extent",
      "c_args": "datatype, lb, extent",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *lb, MPI_Fint *extent, MPI_Fint *ierror",
      "fc_args": "datatype, lb, extent, ierror",
      "f08_par_list": "datatype, lb, extent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: lb, extent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, lb, extent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, lb, extent",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, lb, extent",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: lb\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: extent",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Count* lb, MPI_Count* extent"
    },
    {
      "name": "MPI_Type_get_extent_x",
      "base_name": "MPI_Type_get_extent_x",
      "pmpi_name": "PMPI_Type_get_extent_x",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, MPI_Count* lb, MPI_Count* extent",
      "c_args": "datatype, lb, extent",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *lb, MPI_Fint *extent, MPI_Fint *ierror",
      "fc_args": "datatype, lb, extent, ierror",
      "f08_par_list": "datatype, lb, extent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: lb, extent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, lb, extent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, lb, extent",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, lb, extent",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: lb\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: extent",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Count* lb, MPI_Count* extent"
    },
    {
      "name": "MPI_Type_get_true_extent",
      "base_name": "MPI_Type_get_true_extent",
      "pmpi_name": "PMPI_Type_get_true_extent",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, MPI_Aint* true_lb, MPI_Aint* true_extent",
      "c_args": "datatype, true_lb, true_extent",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *true_lb, MPI_Fint *true_extent, MPI_Fint *ierror",
      "fc_args": "datatype, true_lb, true_extent, ierror",
      "f08_par_list": "datatype, true_lb, true_extent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: true_lb, true_extent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, true_lb, true_extent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, true_lb, true_extent",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, true_lb, true_extent",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: true_lb\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: true_extent",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Aint* true_lb, MPI_Aint* true_extent"
    },
    {
      "name": "MPI_Type_get_true_extent_c",
      "base_name": "MPI_Type_get_true_extent",
      "pmpi_name": "PMPI_Type_get_true_extent",
      "embiggened": true,
      "c_params": "MPI_Datatype datatype, MPI_Count* true_lb, MPI_Count* true_extent",
      "c_args": "datatype, true_lb, true_extent",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *true_lb, MPI_Fint *true_extent, MPI_Fint *ierror",
      "fc_args": "datatype, true_lb, true_extent, ierror",
      "f08_par_list": "datatype, true_lb, true_extent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: true_lb, true_extent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, true_lb, true_extent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, true_lb, true_extent",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, true_lb, true_extent",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: true_lb\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: true_extent",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Count* true_lb, MPI_Count* true_extent"
    },
    {
      "name": "MPI_Type_get_true_extent_x",
      "base_name": "MPI_Type_get_true_extent_x",
      "pmpi_name": "PMPI_Type_get_true_extent_x",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, MPI_Count* true_lb, MPI_Count* true_extent",
      "c_args": "datatype, true_lb, true_extent",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *true_lb, MPI_Fint *true_extent, MPI_Fint *ierror",
      "fc_args": "datatype, true_lb, true_extent, ierror",
      "f08_par_list": "datatype, true_lb, true_extent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: true_lb, true_extent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, true_lb, true_extent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, true_lb, true_extent",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, true_lb, true_extent",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: true_lb\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: true_extent",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Count* true_lb, MPI_Count* true_extent"
    },
    {
      "name": "MPI_Type_indexed",
      "base_name": "MPI_Type_indexed",
      "pmpi_name": "PMPI_Type_indexed",
      "embiggened": false,
      "c_params": "int count, const int array_of_blocklengths[], const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "fc_params": "MPI_Fint *count, const MPI_Fint *array_of_blocklengths, const MPI_Fint *array_of_displacements, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror",
      "f08_par_list": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count, array_of_blocklengths(count), array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_blocklengths, array_of_displacements, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            INTEGER(c_int), INTENT(IN) :: array_of_blocklengths(count)\n            INTEGER(c_int), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int count, const int array_of_blocklengths[], const int array_of_displacements[], MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_indexed_c",
      "base_name": "MPI_Type_indexed",
      "pmpi_name": "PMPI_Type_indexed",
      "embiggened": true,
      "c_params": "MPI_Count count, const MPI_Count array_of_blocklengths[], const MPI_Count array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "fc_params": "MPI_Fint *count, const MPI_Fint *array_of_blocklengths, const MPI_Fint *array_of_displacements, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror",
      "f08_par_list": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count, array_of_blocklengths(count), array_of_displacements(count)\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, array_of_blocklengths, array_of_displacements, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_blocklengths, array_of_displacements, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_blocklengths(count)\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: array_of_displacements(count)\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Count count, const MPI_Count array_of_blocklengths[], const MPI_Count array_of_displacements[], MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_size",
      "base_name": "MPI_Type_size",
      "pmpi_name": "PMPI_Type_size",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, int* size",
      "c_args": "datatype, size",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "datatype, size, ierror",
      "f08_par_list": "datatype, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint datatype, int* size"
    },
    {
      "name": "MPI_Type_size_c",
      "base_name": "MPI_Type_size",
      "pmpi_name": "PMPI_Type_size",
      "embiggened": true,
      "c_params": "MPI_Datatype datatype, MPI_Count* size",
      "c_args": "datatype, size",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "datatype, size, ierror",
      "f08_par_list": "datatype, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Count* size"
    },
    {
      "name": "MPI_Type_size_x",
      "base_name": "MPI_Type_size_x",
      "pmpi_name": "PMPI_Type_size_x",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, MPI_Count* size",
      "c_args": "datatype, size",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "datatype, size, ierror",
      "f08_par_list": "datatype, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint datatype, MPI_Count* size"
    },
    {
      "name": "MPI_Type_vector",
      "base_name": "MPI_Type_vector",
      "pmpi_name": "PMPI_Type_vector",
      "embiggened": false,
      "c_params": "int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, blocklength, stride, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *blocklength, MPI_Fint *stride, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, blocklength, stride, oldtype, newtype, ierror",
      "f08_par_list": "count, blocklength, stride, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count, blocklength, stride\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, blocklength, stride, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, blocklength, stride, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, blocklength, stride, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            INTEGER(c_int), VALUE, INTENT(IN) :: blocklength\n            INTEGER(c_int), VALUE, INTENT(IN) :: stride\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "int count, int blocklength, int stride, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Type_vector_c",
      "base_name": "MPI_Type_vector",
      "pmpi_name": "PMPI_Type_vector",
      "embiggened": true,
      "c_params": "MPI_Count count, MPI_Count blocklength, MPI_Count stride, MPI_Datatype oldtype, MPI_Datatype* newtype",
      "c_args": "count, blocklength, stride, oldtype, newtype",
      "fc_params": "MPI_Fint *count, MPI_Fint *blocklength, MPI_Fint *stride, MPI_Fint *oldtype, MPI_Fint *newtype, MPI_Fint *ierror",
      "fc_args": "count, blocklength, stride, oldtype, newtype, ierror",
      "f08_par_list": "count, blocklength, stride, oldtype, newtype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count, blocklength, stride\n    TYPE(MPI_Datatype), INTENT(IN) :: oldtype\n    TYPE(MPI_Datatype), INTENT(OUT) :: newtype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, blocklength, stride, oldtype, newtype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "count, blocklength, stride, oldtype%MPI_VAL, newtype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, blocklength, stride, oldtype, newtype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: blocklength\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: stride\n            integer(c_int), VALUE, INTENT(IN) :: oldtype\n            integer(c_int), INTENT(OUT) :: newtype",
      "cshim_cdesc_params": "MPI_Count count, MPI_Count blocklength, MPI_Count stride, MPI_Fint oldtype, MPI_Fint* newtype"
    },
    {
      "name": "MPI_Unpack",
      "base_name": "MPI_Unpack",
      "pmpi_name": "PMPI_Unpack",
      "embiggened": false,
      "c_params": "const void* inbuf, int insize, int* position, void* outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm",
      "c_args": "inbuf, insize, position, outbuf, outcount, datatype, comm",
      "fc_params": "const void* inbuf, MPI_Fint *insize, MPI_Fint *position, void* outbuf, MPI_Fint *outcount, MPI_Fint *datatype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "inbuf, insize, position, outbuf, outcount, datatype, comm, ierror",
      "f08_par_list": "inbuf, insize, position, outbuf, outcount, datatype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    INTEGER, INTENT(IN) :: insize, outcount\n    INTEGER, INTENT(INOUT) :: position\n    CHOICE_BUFFER_TYPE :: outbuf\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "inbuf, insize, position, outbuf, outcount, datatype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "inbuf, insize, position, outbuf, outcount, datatype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "inbuf, insize, position, outbuf, outcount, datatype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: insize\n            INTEGER(c_int), INTENT(INOUT) :: position\n            CHOICE_BUFFER_TYPE :: outbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: outcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * inbuf, int insize, int* position, CFI_cdesc_t * outbuf, int outcount, MPI_Fint datatype, MPI_Fint comm"
    },
    {
      "name": "MPI_Unpack_c",
      "base_name": "MPI_Unpack",
      "pmpi_name": "PMPI_Unpack",
      "embiggened": true,
      "c_params": "const void* inbuf, MPI_Count insize, MPI_Count* position, void* outbuf, MPI_Count outcount, MPI_Datatype datatype, MPI_Comm comm",
      "c_args": "inbuf, insize, position, outbuf, outcount, datatype, comm",
      "fc_params": "const void* inbuf, MPI_Fint *insize, MPI_Fint *position, void* outbuf, MPI_Fint *outcount, MPI_Fint *datatype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "inbuf, insize, position, outbuf, outcount, datatype, comm, ierror",
      "f08_par_list": "inbuf, insize, position, outbuf, outcount, datatype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: insize, outcount\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: position\n    CHOICE_BUFFER_TYPE :: outbuf\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "inbuf, insize, position, outbuf, outcount, datatype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "inbuf, insize, position, outbuf, outcount, datatype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "inbuf, insize, position, outbuf, outcount, datatype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: insize\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: position\n            CHOICE_BUFFER_TYPE :: outbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: outcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * inbuf, MPI_Count insize, MPI_Count* position, CFI_cdesc_t * outbuf, MPI_Count outcount, MPI_Fint datatype, MPI_Fint comm"
    },
    {
      "name": "MPI_Unpack_external",
      "base_name": "MPI_Unpack_external",
      "pmpi_name": "PMPI_Unpack_external",
      "embiggened": false,
      "c_params": "const char datarep[], const void* inbuf, MPI_Aint insize, MPI_Aint* position, void* outbuf, int outcount, MPI_Datatype datatype",
      "c_args": "datarep, inbuf, insize, position, outbuf, outcount, datatype",
      "fc_params": "const char datarep[], const void* inbuf, MPI_Fint *insize, MPI_Fint *position, void* outbuf, MPI_Fint *outcount, MPI_Fint *datatype, MPI_Fint *ierror, int datarep_len",
      "fc_args": "datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror, datarep_len",
      "f08_par_list": "datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: datarep\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: insize\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position\n    CHOICE_BUFFER_TYPE :: outbuf\n    INTEGER, INTENT(IN) :: outcount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datarep, inbuf, insize, position, outbuf, outcount, datatype",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)",
      "f08_cshim_args": "datarep_c, inbuf, insize, position, outbuf, outcount, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datarep, inbuf, insize, position, outbuf, outcount, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: insize\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(INOUT) :: position\n            CHOICE_BUFFER_TYPE :: outbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: outcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "const char datarep[], CFI_cdesc_t * inbuf, MPI_Aint insize, MPI_Aint* position, CFI_cdesc_t * outbuf, int outcount, MPI_Fint datatype"
    },
    {
      "name": "MPI_Unpack_external_c",
      "base_name": "MPI_Unpack_external",
      "pmpi_name": "PMPI_Unpack_external",
      "embiggened": true,
      "c_params": "const char datarep[], const void* inbuf, MPI_Count insize, MPI_Count* position, void* outbuf, MPI_Count outcount, MPI_Datatype datatype",
      "c_args": "datarep, inbuf, insize, position, outbuf, outcount, datatype",
      "fc_params": "const char datarep[], const void* inbuf, MPI_Fint *insize, MPI_Fint *position, void* outbuf, MPI_Fint *outcount, MPI_Fint *datatype, MPI_Fint *ierror, int datarep_len",
      "fc_args": "datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror, datarep_len",
      "f08_par_list": "datarep, inbuf, insize, position, outbuf, outcount, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: datarep\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: insize, outcount\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: position\n    CHOICE_BUFFER_TYPE :: outbuf\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datarep, inbuf, insize, position, outbuf, outcount, datatype",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)",
      "f08_cshim_args": "datarep_c, inbuf, insize, position, outbuf, outcount, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datarep, inbuf, insize, position, outbuf, outcount, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: insize\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(INOUT) :: position\n            CHOICE_BUFFER_TYPE :: outbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: outcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "const char datarep[], CFI_cdesc_t * inbuf, MPI_Count insize, MPI_Count* position, CFI_cdesc_t * outbuf, MPI_Count outcount, MPI_Fint datatype"
    },
    {
      "name": "MPI_Allgather",
      "base_name": "MPI_Allgather",
      "pmpi_name": "PMPI_Allgather",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Allgather_c",
      "base_name": "MPI_Allgather",
      "pmpi_name": "PMPI_Allgather",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Allgather_init",
      "base_name": "MPI_Allgather_init",
      "pmpi_name": "PMPI_Allgather_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Allgather_init_c",
      "base_name": "MPI_Allgather_init",
      "pmpi_name": "PMPI_Allgather_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Allgatherv",
      "base_name": "MPI_Allgatherv",
      "pmpi_name": "PMPI_Allgatherv",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Allgatherv_c",
      "base_name": "MPI_Allgatherv",
      "pmpi_name": "PMPI_Allgatherv",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Allgatherv_init",
      "base_name": "MPI_Allgatherv_init",
      "pmpi_name": "PMPI_Allgatherv_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Allgatherv_init_c",
      "base_name": "MPI_Allgatherv_init",
      "pmpi_name": "PMPI_Allgatherv_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Allreduce",
      "base_name": "MPI_Allreduce",
      "pmpi_name": "PMPI_Allreduce",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Allreduce_c",
      "base_name": "MPI_Allreduce",
      "pmpi_name": "PMPI_Allreduce",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Allreduce_init",
      "base_name": "MPI_Allreduce_init",
      "pmpi_name": "PMPI_Allreduce_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Allreduce_init_c",
      "base_name": "MPI_Allreduce_init",
      "pmpi_name": "PMPI_Allreduce_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Alltoall",
      "base_name": "MPI_Alltoall",
      "pmpi_name": "PMPI_Alltoall",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Alltoall_c",
      "base_name": "MPI_Alltoall",
      "pmpi_name": "PMPI_Alltoall",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Alltoall_init",
      "base_name": "MPI_Alltoall_init",
      "pmpi_name": "PMPI_Alltoall_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Alltoall_init_c",
      "base_name": "MPI_Alltoall_init",
      "pmpi_name": "PMPI_Alltoall_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Alltoallv",
      "base_name": "MPI_Alltoallv",
      "pmpi_name": "PMPI_Alltoallv",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Alltoallv_c",
      "base_name": "MPI_Alltoallv",
      "pmpi_name": "PMPI_Alltoallv",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Alltoallv_init",
      "base_name": "MPI_Alltoallv_init",
      "pmpi_name": "PMPI_Alltoallv_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Alltoallv_init_c",
      "base_name": "MPI_Alltoallv_init",
      "pmpi_name": "PMPI_Alltoallv_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Alltoallw",
      "base_name": "MPI_Alltoallw",
      "pmpi_name": "PMPI_Alltoallw",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Comm_size",
      "f08_cshim_local_vars": "integer :: comm_size",
      "f08_cshim_precall_stmts": "call PMPI_Comm_size(comm, comm_size)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:comm_size)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:comm_size)%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm"
    },
    {
      "name": "MPI_Alltoallw_c",
      "base_name": "MPI_Alltoallw",
      "pmpi_name": "PMPI_Alltoallw",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Comm_size",
      "f08_cshim_local_vars": "integer :: comm_size",
      "f08_cshim_precall_stmts": "call PMPI_Comm_size(comm, comm_size)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:comm_size)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:comm_size)%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm"
    },
    {
      "name": "MPI_Alltoallw_init",
      "base_name": "MPI_Alltoallw_init",
      "pmpi_name": "PMPI_Alltoallw_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Comm_size",
      "f08_cshim_local_vars": "integer :: comm_size",
      "f08_cshim_precall_stmts": "call PMPI_Comm_size(comm, comm_size)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:comm_size)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:comm_size)%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Alltoallw_init_c",
      "base_name": "MPI_Alltoallw_init",
      "pmpi_name": "PMPI_Alltoallw_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Comm_size",
      "f08_cshim_local_vars": "integer :: comm_size",
      "f08_cshim_precall_stmts": "call PMPI_Comm_size(comm, comm_size)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:comm_size)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:comm_size)%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Barrier",
      "base_name": "MPI_Barrier",
      "pmpi_name": "PMPI_Barrier",
      "embiggened": false,
      "c_params": "MPI_Comm comm",
      "c_args": "comm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "comm, ierror",
      "f08_par_list": "comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "MPI_Fint comm"
    },
    {
      "name": "MPI_Barrier_init",
      "base_name": "MPI_Barrier_init",
      "pmpi_name": "PMPI_Barrier_init",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "comm, info, request",
      "fc_params": "MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "comm, info, request, ierror",
      "f08_par_list": "comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Bcast",
      "base_name": "MPI_Bcast",
      "pmpi_name": "PMPI_Bcast",
      "embiggened": false,
      "c_params": "void* buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm",
      "c_args": "buffer, count, datatype, root, comm",
      "fc_params": "void* buffer, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buffer, count, datatype, root, comm, ierror",
      "f08_par_list": "buffer, count, datatype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n    INTEGER, INTENT(IN) :: count, root\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer, count, datatype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer, count, datatype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer, count, datatype, root, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buffer, int count, MPI_Fint datatype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Bcast_c",
      "base_name": "MPI_Bcast",
      "pmpi_name": "PMPI_Bcast",
      "embiggened": true,
      "c_params": "void* buffer, MPI_Count count, MPI_Datatype datatype, int root, MPI_Comm comm",
      "c_args": "buffer, count, datatype, root, comm",
      "fc_params": "void* buffer, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "buffer, count, datatype, root, comm, ierror",
      "f08_par_list": "buffer, count, datatype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer, count, datatype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer, count, datatype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer, count, datatype, root, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * buffer, MPI_Count count, MPI_Fint datatype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Bcast_init",
      "base_name": "MPI_Bcast_init",
      "pmpi_name": "PMPI_Bcast_init",
      "embiggened": false,
      "c_params": "void* buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "buffer, count, datatype, root, comm, info, request",
      "fc_params": "void* buffer, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buffer, count, datatype, root, comm, info, request, ierror",
      "f08_par_list": "buffer, count, datatype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER, INTENT(IN) :: count, root\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer, count, datatype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer, count, datatype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer, count, datatype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buffer, int count, MPI_Fint datatype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Bcast_init_c",
      "base_name": "MPI_Bcast_init",
      "pmpi_name": "PMPI_Bcast_init",
      "embiggened": true,
      "c_params": "void* buffer, MPI_Count count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "buffer, count, datatype, root, comm, info, request",
      "fc_params": "void* buffer, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buffer, count, datatype, root, comm, info, request, ierror",
      "f08_par_list": "buffer, count, datatype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer, count, datatype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer, count, datatype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer, count, datatype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buffer, MPI_Count count, MPI_Fint datatype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Exscan",
      "base_name": "MPI_Exscan",
      "pmpi_name": "PMPI_Exscan",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Exscan_c",
      "base_name": "MPI_Exscan",
      "pmpi_name": "PMPI_Exscan",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Exscan_init",
      "base_name": "MPI_Exscan_init",
      "pmpi_name": "PMPI_Exscan_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Exscan_init_c",
      "base_name": "MPI_Exscan_init",
      "pmpi_name": "PMPI_Exscan_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Gather",
      "base_name": "MPI_Gather",
      "pmpi_name": "PMPI_Gather",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Gather_c",
      "base_name": "MPI_Gather",
      "pmpi_name": "PMPI_Gather",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Gather_init",
      "base_name": "MPI_Gather_init",
      "pmpi_name": "PMPI_Gather_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Gather_init_c",
      "base_name": "MPI_Gather_init",
      "pmpi_name": "PMPI_Gather_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Gatherv",
      "base_name": "MPI_Gatherv",
      "pmpi_name": "PMPI_Gatherv",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*), root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Gatherv_c",
      "base_name": "MPI_Gatherv",
      "pmpi_name": "PMPI_Gatherv",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, int root, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Gatherv_init",
      "base_name": "MPI_Gatherv_init",
      "pmpi_name": "PMPI_Gatherv_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Gatherv_init_c",
      "base_name": "MPI_Gatherv_init",
      "pmpi_name": "PMPI_Gatherv_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: displs(*)\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Iallgather",
      "base_name": "MPI_Iallgather",
      "pmpi_name": "PMPI_Iallgather",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iallgather_c",
      "base_name": "MPI_Iallgather",
      "pmpi_name": "PMPI_Iallgather",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iallgatherv",
      "base_name": "MPI_Iallgatherv",
      "pmpi_name": "PMPI_Iallgatherv",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iallgatherv_c",
      "base_name": "MPI_Iallgatherv",
      "pmpi_name": "PMPI_Iallgatherv",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iallreduce",
      "base_name": "MPI_Iallreduce",
      "pmpi_name": "PMPI_Iallreduce",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iallreduce_c",
      "base_name": "MPI_Iallreduce",
      "pmpi_name": "PMPI_Iallreduce",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ialltoall",
      "base_name": "MPI_Ialltoall",
      "pmpi_name": "PMPI_Ialltoall",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ialltoall_c",
      "base_name": "MPI_Ialltoall",
      "pmpi_name": "PMPI_Ialltoall",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ialltoallv",
      "base_name": "MPI_Ialltoallv",
      "pmpi_name": "PMPI_Ialltoallv",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ialltoallv_c",
      "base_name": "MPI_Ialltoallv",
      "pmpi_name": "PMPI_Ialltoallv",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ialltoallw",
      "base_name": "MPI_Ialltoallw",
      "pmpi_name": "PMPI_Ialltoallw",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Comm_size",
      "f08_cshim_local_vars": "integer :: comm_size",
      "f08_cshim_precall_stmts": "call PMPI_Comm_size(comm, comm_size)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:comm_size)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:comm_size)%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ialltoallw_c",
      "base_name": "MPI_Ialltoallw",
      "pmpi_name": "PMPI_Ialltoallw",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Comm_size",
      "f08_cshim_local_vars": "integer :: comm_size",
      "f08_cshim_precall_stmts": "call PMPI_Comm_size(comm, comm_size)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:comm_size)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:comm_size)%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ibarrier",
      "base_name": "MPI_Ibarrier",
      "pmpi_name": "PMPI_Ibarrier",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Request* request",
      "c_args": "comm, request",
      "fc_params": "MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "comm, request, ierror",
      "f08_par_list": "comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ibcast",
      "base_name": "MPI_Ibcast",
      "pmpi_name": "PMPI_Ibcast",
      "embiggened": false,
      "c_params": "void* buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "buffer, count, datatype, root, comm, request",
      "fc_params": "void* buffer, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buffer, count, datatype, root, comm, request, ierror",
      "f08_par_list": "buffer, count, datatype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER, INTENT(IN) :: count, root\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer, count, datatype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer, count, datatype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer, count, datatype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buffer, int count, MPI_Fint datatype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ibcast_c",
      "base_name": "MPI_Ibcast",
      "pmpi_name": "PMPI_Ibcast",
      "embiggened": true,
      "c_params": "void* buffer, MPI_Count count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "buffer, count, datatype, root, comm, request",
      "fc_params": "void* buffer, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "buffer, count, datatype, root, comm, request, ierror",
      "f08_par_list": "buffer, count, datatype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buffer\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "buffer, count, datatype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "buffer, count, datatype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "buffer, count, datatype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: buffer\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * buffer, MPI_Count count, MPI_Fint datatype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iexscan",
      "base_name": "MPI_Iexscan",
      "pmpi_name": "PMPI_Iexscan",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iexscan_c",
      "base_name": "MPI_Iexscan",
      "pmpi_name": "PMPI_Iexscan",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Igather",
      "base_name": "MPI_Igather",
      "pmpi_name": "PMPI_Igather",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Igather_c",
      "base_name": "MPI_Igather",
      "pmpi_name": "PMPI_Igather",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Igatherv",
      "base_name": "MPI_Igatherv",
      "pmpi_name": "PMPI_Igatherv",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Igatherv_c",
      "base_name": "MPI_Igatherv",
      "pmpi_name": "PMPI_Igatherv",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: displs(*)\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ireduce",
      "base_name": "MPI_Ireduce",
      "pmpi_name": "PMPI_Ireduce",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, root, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, root, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: count, root\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ireduce_c",
      "base_name": "MPI_Ireduce",
      "pmpi_name": "PMPI_Ireduce",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, root, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, root, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ireduce_scatter",
      "base_name": "MPI_Ireduce_scatter",
      "pmpi_name": "PMPI_Ireduce_scatter",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, const MPI_Fint *recvcounts, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcounts, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, const int recvcounts[], MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ireduce_scatter_c",
      "base_name": "MPI_Ireduce_scatter",
      "pmpi_name": "PMPI_Ireduce_scatter",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, const MPI_Count recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, const MPI_Fint *recvcounts, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcounts, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ireduce_scatter_block",
      "base_name": "MPI_Ireduce_scatter_block",
      "pmpi_name": "PMPI_Ireduce_scatter_block",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcount, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ireduce_scatter_block_c",
      "base_name": "MPI_Ireduce_scatter_block",
      "pmpi_name": "PMPI_Ireduce_scatter_block",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcount, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iscan",
      "base_name": "MPI_Iscan",
      "pmpi_name": "PMPI_Iscan",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iscan_c",
      "base_name": "MPI_Iscan",
      "pmpi_name": "PMPI_Iscan",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iscatter",
      "base_name": "MPI_Iscatter",
      "pmpi_name": "PMPI_Iscatter",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iscatter_c",
      "base_name": "MPI_Iscatter",
      "pmpi_name": "PMPI_Iscatter",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iscatterv",
      "base_name": "MPI_Iscatterv",
      "pmpi_name": "PMPI_Iscatterv",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *displs, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), displs(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: recvcount, root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, displs, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int displs[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Iscatterv_c",
      "base_name": "MPI_Iscatterv",
      "pmpi_name": "PMPI_Iscatterv",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint displs[], MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *displs, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: displs(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcount\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, displs, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint displs[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Op_commutative",
      "base_name": "MPI_Op_commutative",
      "pmpi_name": "PMPI_Op_commutative",
      "embiggened": false,
      "c_params": "MPI_Op op, int* commute",
      "c_args": "op, commute",
      "fc_params": "MPI_Fint *op, MPI_Fint *commute, MPI_Fint *ierror",
      "fc_args": "op, commute, ierror",
      "f08_par_list": "op, commute, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op",
      "f08_par_decl": "TYPE(MPI_Op), INTENT(IN) :: op\n    LOGICAL, INTENT(OUT) :: commute\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "op, commute",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: commute_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "op%MPI_VAL, commute_c",
      "f08_cshim_postcall_stmts": "commute = (commute_c /= 0)",
      "f08_cshim_iface_par_list": "op, commute",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: op\n            INTEGER(c_int), INTENT(OUT) :: commute",
      "cshim_cdesc_params": "MPI_Fint op, int* commute"
    },
    {
      "name": "MPI_Op_create",
      "base_name": "MPI_Op_create",
      "pmpi_name": "PMPI_Op_create",
      "embiggened": false,
      "c_params": "MPI_User_function* user_fn, int commute, MPI_Op* op",
      "c_args": "user_fn, commute, op",
      "fc_params": "MPI_Fint *user_fn, MPI_Fint *commute, MPI_Fint *op, MPI_Fint *ierror",
      "fc_args": "user_fn, commute, op, ierror",
      "f08_par_list": "user_fn, commute, op, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_User_function",
      "f08_par_decl": "PROCEDURE(MPI_User_function) :: user_fn\n    LOGICAL, INTENT(IN) :: commute\n    TYPE(MPI_Op), INTENT(OUT) :: op\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "user_fn, commute, op",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc, c_int",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_user_fn\n    integer(c_int) :: commute_c",
      "f08_cshim_precall_stmts": "cfunptr_user_fn = c_funloc(user_fn)\n    if (commute) then\n        commute_c = 1\n    else\n        commute_c = 0\n    endif",
      "f08_cshim_args": "cfunptr_user_fn, commute_c, op%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "user_fn, commute, op",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: user_fn\n            INTEGER(c_int), VALUE, INTENT(IN) :: commute\n            integer(c_int), INTENT(OUT) :: op",
      "cshim_cdesc_params": "MPI_User_function* user_fn, int commute, MPI_Fint* op"
    },
    {
      "name": "MPI_Op_create_c",
      "base_name": "MPI_Op_create_c",
      "pmpi_name": "PMPI_Op_create_c",
      "embiggened": true,
      "c_params": "MPI_User_function_c* user_fn, int commute, MPI_Op* op",
      "c_args": "user_fn, commute, op",
      "fc_params": "MPI_Fint *user_fn, MPI_Fint *commute, MPI_Fint *op, MPI_Fint *ierror",
      "fc_args": "user_fn, commute, op, ierror",
      "f08_par_list": "user_fn, commute, op, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_User_function_c",
      "f08_par_decl": "PROCEDURE(MPI_User_function_c) :: user_fn\n    LOGICAL, INTENT(IN) :: commute\n    TYPE(MPI_Op), INTENT(OUT) :: op\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "user_fn, commute, op",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc, c_int",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_user_fn\n    integer(c_int) :: commute_c",
      "f08_cshim_precall_stmts": "cfunptr_user_fn = c_funloc(user_fn)\n    if (commute) then\n        commute_c = 1\n    else\n        commute_c = 0\n    endif",
      "f08_cshim_args": "cfunptr_user_fn, commute_c, op%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "user_fn, commute, op",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: user_fn\n            INTEGER(c_int), VALUE, INTENT(IN) :: commute\n            integer(c_int), INTENT(OUT) :: op",
      "cshim_cdesc_params": "MPI_User_function_c* user_fn, int commute, MPI_Fint* op"
    },
    {
      "name": "MPI_Op_free",
      "base_name": "MPI_Op_free",
      "pmpi_name": "PMPI_Op_free",
      "embiggened": false,
      "c_params": "MPI_Op* op",
      "c_args": "op",
      "fc_params": "MPI_Fint *op, MPI_Fint *ierror",
      "fc_args": "op, ierror",
      "f08_par_list": "op, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op",
      "f08_par_decl": "TYPE(MPI_Op), INTENT(INOUT) :: op\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "op",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "op%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "op",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: op",
      "cshim_cdesc_params": "MPI_Fint* op"
    },
    {
      "name": "MPI_Reduce",
      "base_name": "MPI_Reduce",
      "pmpi_name": "PMPI_Reduce",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, count, datatype, op, root, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, root, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: count, root\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Reduce_c",
      "base_name": "MPI_Reduce",
      "pmpi_name": "PMPI_Reduce",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, count, datatype, op, root, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, root, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Reduce_init",
      "base_name": "MPI_Reduce_init",
      "pmpi_name": "PMPI_Reduce_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: count, root\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Reduce_init_c",
      "base_name": "MPI_Reduce_init",
      "pmpi_name": "PMPI_Reduce_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Reduce_local",
      "base_name": "MPI_Reduce_local",
      "pmpi_name": "PMPI_Reduce_local",
      "embiggened": false,
      "c_params": "const void* inbuf, void* inoutbuf, int count, MPI_Datatype datatype, MPI_Op op",
      "c_args": "inbuf, inoutbuf, count, datatype, op",
      "fc_params": "const void* inbuf, void* inoutbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *ierror",
      "fc_args": "inbuf, inoutbuf, count, datatype, op, ierror",
      "f08_par_list": "inbuf, inoutbuf, count, datatype, op, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    CHOICE_BUFFER_TYPE :: inoutbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "inbuf, inoutbuf, count, datatype, op",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "inbuf, inoutbuf, count, datatype%MPI_VAL, op%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "inbuf, inoutbuf, count, datatype, op",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            CHOICE_BUFFER_TYPE :: inoutbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op",
      "cshim_cdesc_params": "CFI_cdesc_t * inbuf, CFI_cdesc_t * inoutbuf, int count, MPI_Fint datatype, MPI_Fint op"
    },
    {
      "name": "MPI_Reduce_local_c",
      "base_name": "MPI_Reduce_local",
      "pmpi_name": "PMPI_Reduce_local",
      "embiggened": true,
      "c_params": "const void* inbuf, void* inoutbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op",
      "c_args": "inbuf, inoutbuf, count, datatype, op",
      "fc_params": "const void* inbuf, void* inoutbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *ierror",
      "fc_args": "inbuf, inoutbuf, count, datatype, op, ierror",
      "f08_par_list": "inbuf, inoutbuf, count, datatype, op, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n    CHOICE_BUFFER_TYPE :: inoutbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "inbuf, inoutbuf, count, datatype, op",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "inbuf, inoutbuf, count, datatype%MPI_VAL, op%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "inbuf, inoutbuf, count, datatype, op",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: inbuf\n            CHOICE_BUFFER_TYPE :: inoutbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op",
      "cshim_cdesc_params": "CFI_cdesc_t * inbuf, CFI_cdesc_t * inoutbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op"
    },
    {
      "name": "MPI_Reduce_scatter",
      "base_name": "MPI_Reduce_scatter",
      "pmpi_name": "PMPI_Reduce_scatter",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, const MPI_Fint *recvcounts, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcounts, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, const int recvcounts[], MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Reduce_scatter_c",
      "base_name": "MPI_Reduce_scatter",
      "pmpi_name": "PMPI_Reduce_scatter",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, const MPI_Count recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, const MPI_Fint *recvcounts, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcounts, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Reduce_scatter_block",
      "base_name": "MPI_Reduce_scatter_block",
      "pmpi_name": "PMPI_Reduce_scatter_block",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, recvcount, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcount, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcount, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Reduce_scatter_block_c",
      "base_name": "MPI_Reduce_scatter_block",
      "pmpi_name": "PMPI_Reduce_scatter_block",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, recvcount, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcount, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcount, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Reduce_scatter_block_init",
      "base_name": "MPI_Reduce_scatter_block_init",
      "pmpi_name": "PMPI_Reduce_scatter_block_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcount, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Reduce_scatter_block_init_c",
      "base_name": "MPI_Reduce_scatter_block_init",
      "pmpi_name": "PMPI_Reduce_scatter_block_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcount, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcount, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Reduce_scatter_init",
      "base_name": "MPI_Reduce_scatter_init",
      "pmpi_name": "PMPI_Reduce_scatter_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, const MPI_Fint *recvcounts, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcounts, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, const int recvcounts[], MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Reduce_scatter_init_c",
      "base_name": "MPI_Reduce_scatter_init",
      "pmpi_name": "PMPI_Reduce_scatter_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, const MPI_Count recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, const MPI_Fint *recvcounts, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, recvcounts, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, recvcounts, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Scan",
      "base_name": "MPI_Scan",
      "pmpi_name": "PMPI_Scan",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Scan_c",
      "base_name": "MPI_Scan",
      "pmpi_name": "PMPI_Scan",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm"
    },
    {
      "name": "MPI_Scan_init",
      "base_name": "MPI_Scan_init",
      "pmpi_name": "PMPI_Scan_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, void* recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, int count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Scan_init_c",
      "base_name": "MPI_Scan_init",
      "pmpi_name": "PMPI_Scan_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, void* recvbuf, MPI_Count count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "fc_params": "const void* sendbuf, void* recvbuf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *op, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, recvbuf, count, datatype%MPI_VAL, op%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, recvbuf, count, datatype, op, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, CFI_cdesc_t * recvbuf, MPI_Count count, MPI_Fint datatype, MPI_Fint op, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Scatter",
      "base_name": "MPI_Scatter",
      "pmpi_name": "PMPI_Scatter",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Scatter_c",
      "base_name": "MPI_Scatter",
      "pmpi_name": "PMPI_Scatter",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Scatter_init",
      "base_name": "MPI_Scatter_init",
      "pmpi_name": "PMPI_Scatter_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Scatter_init_c",
      "base_name": "MPI_Scatter_init",
      "pmpi_name": "PMPI_Scatter_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Scatterv",
      "base_name": "MPI_Scatterv",
      "pmpi_name": "PMPI_Scatterv",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *displs, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcounts(*), displs(*), recvcount, root\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, displs, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int displs[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Scatterv_c",
      "base_name": "MPI_Scatterv",
      "pmpi_name": "PMPI_Scatterv",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint displs[], MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *displs, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*), recvcount\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, displs, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint displs[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm"
    },
    {
      "name": "MPI_Scatterv_init",
      "base_name": "MPI_Scatterv_init",
      "pmpi_name": "PMPI_Scatterv_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *displs, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), displs(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN) :: recvcount, root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, displs, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int displs[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Scatterv_init_c",
      "base_name": "MPI_Scatterv_init",
      "pmpi_name": "PMPI_Scatterv_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint displs[], MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *displs, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: displs(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcount\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, displs, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, root, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, displs, sendtype, recvbuf, recvcount, recvtype, root, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint displs[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, int root, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Type_get_value_index",
      "base_name": "MPI_Type_get_value_index",
      "pmpi_name": "PMPI_Type_get_value_index",
      "embiggened": false,
      "c_params": "MPI_Datatype value_type, MPI_Datatype index_type, MPI_Datatype* pair_type",
      "c_args": "value_type, index_type, pair_type",
      "fc_params": "MPI_Fint *value_type, MPI_Fint *index_type, MPI_Fint *pair_type, MPI_Fint *ierror",
      "fc_args": "value_type, index_type, pair_type, ierror",
      "f08_par_list": "value_type, index_type, pair_type, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: value_type, index_type\n    TYPE(MPI_Datatype), INTENT(OUT) :: pair_type\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "value_type, index_type, pair_type",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "value_type%MPI_VAL, index_type%MPI_VAL, pair_type%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "value_type, index_type, pair_type",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: value_type\n            integer(c_int), VALUE, INTENT(IN) :: index_type\n            integer(c_int), INTENT(OUT) :: pair_type",
      "cshim_cdesc_params": "MPI_Fint value_type, MPI_Fint index_type, MPI_Fint* pair_type"
    },
    {
      "name": "MPI_Comm_compare",
      "base_name": "MPI_Comm_compare",
      "pmpi_name": "PMPI_Comm_compare",
      "embiggened": false,
      "c_params": "MPI_Comm comm1, MPI_Comm comm2, int* result",
      "c_args": "comm1, comm2, result",
      "fc_params": "MPI_Fint *comm1, MPI_Fint *comm2, MPI_Fint *result, MPI_Fint *ierror",
      "fc_args": "comm1, comm2, result, ierror",
      "f08_par_list": "comm1, comm2, result, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm1, comm2\n    INTEGER, INTENT(OUT) :: result\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm1, comm2, result",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm1%MPI_VAL, comm2%MPI_VAL, result",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm1, comm2, result",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm1\n            integer(c_int), VALUE, INTENT(IN) :: comm2\n            INTEGER(c_int), INTENT(OUT) :: result",
      "cshim_cdesc_params": "MPI_Fint comm1, MPI_Fint comm2, int* result"
    },
    {
      "name": "MPI_Comm_create",
      "base_name": "MPI_Comm_create",
      "pmpi_name": "PMPI_Comm_create",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Group group, MPI_Comm* newcomm",
      "c_args": "comm, group, newcomm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *group, MPI_Fint *newcomm, MPI_Fint *ierror",
      "fc_args": "comm, group, newcomm, ierror",
      "f08_par_list": "comm, group, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Group), INTENT(IN) :: group\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, group, newcomm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, group%MPI_VAL, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, group, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: group\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint group, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_create_from_group",
      "base_name": "MPI_Comm_create_from_group",
      "pmpi_name": "PMPI_Comm_create_from_group",
      "embiggened": false,
      "c_params": "MPI_Group group, const char* stringtag, MPI_Info info, MPI_Errhandler errhandler, MPI_Comm* newcomm",
      "c_args": "group, stringtag, info, errhandler, newcomm",
      "fc_params": "MPI_Fint *group, const char* stringtag, MPI_Fint *info, MPI_Fint *errhandler, MPI_Fint *newcomm, MPI_Fint *ierror, int stringtag_len",
      "fc_args": "group, stringtag, info, errhandler, newcomm, ierror, stringtag_len",
      "f08_par_list": "group, stringtag, info, errhandler, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Group, MPI_Comm, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    CHARACTER(LEN=*), INTENT(IN) :: stringtag\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Errhandler), INTENT(IN) :: errhandler\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, stringtag, info, errhandler, newcomm",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: stringtag_c(len_trim(stringtag)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(stringtag, stringtag_c)",
      "f08_cshim_args": "group%MPI_VAL, stringtag_c, info%MPI_VAL, errhandler%MPI_VAL, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, stringtag, info, errhandler, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            CHARACTER(kind=c_char), INTENT(IN) :: stringtag(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: errhandler\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "MPI_Fint group, const char* stringtag, MPI_Fint info, MPI_Fint errhandler, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_create_group",
      "base_name": "MPI_Comm_create_group",
      "pmpi_name": "PMPI_Comm_create_group",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Group group, int tag, MPI_Comm* newcomm",
      "c_args": "comm, group, tag, newcomm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *group, MPI_Fint *tag, MPI_Fint *newcomm, MPI_Fint *ierror",
      "fc_args": "comm, group, tag, newcomm, ierror",
      "f08_par_list": "comm, group, tag, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(IN) :: tag\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, group, tag, newcomm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, group%MPI_VAL, tag, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, group, tag, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint group, int tag, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_create_keyval",
      "base_name": "MPI_Comm_create_keyval",
      "pmpi_name": "PMPI_Comm_create_keyval",
      "embiggened": false,
      "c_params": "MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, int* comm_keyval, void* extra_state",
      "c_args": "comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval, extra_state",
      "fc_params": "MPI_Fint *comm_copy_attr_fn, MPI_Fint *comm_delete_attr_fn, MPI_Fint *comm_keyval, void* extra_state, MPI_Fint *ierror",
      "fc_args": "comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval, extra_state, ierror",
      "f08_par_list": "comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval, extra_state, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm_copy_attr_function, MPI_Comm_delete_attr_function, MPI_ADDRESS_KIND",
      "f08_par_decl": "PROCEDURE(MPI_Comm_copy_attr_function) :: comm_copy_attr_fn\n    PROCEDURE(MPI_Comm_delete_attr_function) :: comm_delete_attr_fn\n    INTEGER, INTENT(OUT) :: comm_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval, extra_state",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_comm_copy_attr_fn\n    type(c_funptr) :: cfunptr_comm_delete_attr_fn",
      "f08_cshim_precall_stmts": "cfunptr_comm_copy_attr_fn = c_funloc(comm_copy_attr_fn)\n    cfunptr_comm_delete_attr_fn = c_funloc(comm_delete_attr_fn)",
      "f08_cshim_args": "cfunptr_comm_copy_attr_fn, cfunptr_comm_delete_attr_fn, comm_keyval, extra_state",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm_copy_attr_fn, comm_delete_attr_fn, comm_keyval, extra_state",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: comm_copy_attr_fn\n            TYPE(c_funptr), VALUE :: comm_delete_attr_fn\n            INTEGER(c_int), INTENT(OUT) :: comm_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state",
      "cshim_cdesc_params": "MPI_Comm_copy_attr_function* comm_copy_attr_fn, MPI_Comm_delete_attr_function* comm_delete_attr_fn, int* comm_keyval, void* extra_state"
    },
    {
      "name": "MPI_Comm_delete_attr",
      "base_name": "MPI_Comm_delete_attr",
      "pmpi_name": "PMPI_Comm_delete_attr",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int comm_keyval",
      "c_args": "comm, comm_keyval",
      "fc_params": "MPI_Fint *comm, MPI_Fint *comm_keyval, MPI_Fint *ierror",
      "fc_args": "comm, comm_keyval, ierror",
      "f08_par_list": "comm, comm_keyval, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: comm_keyval\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, comm_keyval",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, comm_keyval",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, comm_keyval",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: comm_keyval",
      "cshim_cdesc_params": "MPI_Fint comm, int comm_keyval"
    },
    {
      "name": "MPI_Comm_dup",
      "base_name": "MPI_Comm_dup",
      "pmpi_name": "PMPI_Comm_dup",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Comm* newcomm",
      "c_args": "comm, newcomm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *newcomm, MPI_Fint *ierror",
      "fc_args": "comm, newcomm, ierror",
      "f08_par_list": "comm, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, newcomm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_dup_with_info",
      "base_name": "MPI_Comm_dup_with_info",
      "pmpi_name": "PMPI_Comm_dup_with_info",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Info info, MPI_Comm* newcomm",
      "c_args": "comm, info, newcomm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *info, MPI_Fint *newcomm, MPI_Fint *ierror",
      "fc_args": "comm, info, newcomm, ierror",
      "f08_par_list": "comm, info, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, info, newcomm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, info%MPI_VAL, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, info, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint info, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_free",
      "base_name": "MPI_Comm_free",
      "pmpi_name": "PMPI_Comm_free",
      "embiggened": false,
      "c_params": "MPI_Comm* comm",
      "c_args": "comm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "comm, ierror",
      "f08_par_list": "comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(INOUT) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: comm",
      "cshim_cdesc_params": "MPI_Fint* comm"
    },
    {
      "name": "MPI_Comm_free_keyval",
      "base_name": "MPI_Comm_free_keyval",
      "pmpi_name": "PMPI_Comm_free_keyval",
      "embiggened": false,
      "c_params": "int* comm_keyval",
      "c_args": "comm_keyval",
      "fc_params": "MPI_Fint *comm_keyval, MPI_Fint *ierror",
      "fc_args": "comm_keyval, ierror",
      "f08_par_list": "comm_keyval, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(INOUT) :: comm_keyval\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm_keyval",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm_keyval",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm_keyval",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(INOUT) :: comm_keyval",
      "cshim_cdesc_params": "int* comm_keyval"
    },
    {
      "name": "MPI_Comm_get_attr",
      "base_name": "MPI_Comm_get_attr",
      "pmpi_name": "PMPI_Comm_get_attr",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int comm_keyval, void* attribute_val, int* flag",
      "c_args": "comm, comm_keyval, attribute_val, flag",
      "fc_params": "MPI_Fint *comm, MPI_Fint *comm_keyval, void* attribute_val, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "comm, comm_keyval, attribute_val, flag, ierror",
      "f08_par_list": "comm, comm_keyval, attribute_val, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: comm_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, comm_keyval, attribute_val, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, comm_keyval, attribute_val, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "comm, comm_keyval, attribute_val, flag",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: comm_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint comm, int comm_keyval, void* attribute_val, int* flag"
    },
    {
      "name": "MPI_Comm_get_info",
      "base_name": "MPI_Comm_get_info",
      "pmpi_name": "PMPI_Comm_get_info",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Info* info_used",
      "c_args": "comm, info_used",
      "fc_params": "MPI_Fint *comm, MPI_Fint *info_used, MPI_Fint *ierror",
      "fc_args": "comm, info_used, ierror",
      "f08_par_list": "comm, info_used, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(OUT) :: info_used\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, info_used",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, info_used%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, info_used",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: info_used",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint* info_used"
    },
    {
      "name": "MPI_Comm_get_name",
      "base_name": "MPI_Comm_get_name",
      "pmpi_name": "PMPI_Comm_get_name",
      "embiggened": false,
      "c_params": "MPI_Comm comm, char* comm_name, int* resultlen",
      "c_args": "comm, comm_name, resultlen",
      "fc_params": "MPI_Fint *comm, char* comm_name, MPI_Fint *resultlen, MPI_Fint *ierror, int comm_name_len",
      "fc_args": "comm, comm_name, resultlen, ierror, comm_name_len",
      "f08_par_list": "comm, comm_name, resultlen, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_MAX_OBJECT_NAME, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: comm_name\n    INTEGER, INTENT(OUT) :: resultlen\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, comm_name, resultlen",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: comm_name_c(MPI_MAX_OBJECT_NAME + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, comm_name_c, resultlen",
      "f08_cshim_postcall_stmts": "call string_c2f(comm_name_c, comm_name)",
      "f08_cshim_iface_par_list": "comm, comm_name, resultlen",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            CHARACTER(kind=c_char), INTENT(OUT) :: comm_name(*)\n            INTEGER(c_int), INTENT(OUT) :: resultlen",
      "cshim_cdesc_params": "MPI_Fint comm, char* comm_name, int* resultlen"
    },
    {
      "name": "MPI_Comm_group",
      "base_name": "MPI_Comm_group",
      "pmpi_name": "PMPI_Comm_group",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Group* group",
      "c_args": "comm, group",
      "fc_params": "MPI_Fint *comm, MPI_Fint *group, MPI_Fint *ierror",
      "fc_args": "comm, group, ierror",
      "f08_par_list": "comm, group, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Group), INTENT(OUT) :: group\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, group",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, group%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, group",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: group",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint* group"
    },
    {
      "name": "MPI_Comm_idup",
      "base_name": "MPI_Comm_idup",
      "pmpi_name": "PMPI_Comm_idup",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Comm* newcomm, MPI_Request* request",
      "c_args": "comm, newcomm, request",
      "fc_params": "MPI_Fint *comm, MPI_Fint *newcomm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "comm, newcomm, request, ierror",
      "f08_par_list": "comm, newcomm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Comm), INTENT(OUT), ASYNCHRONOUS :: newcomm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, newcomm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, newcomm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, newcomm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: newcomm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint* newcomm, MPI_Fint* request"
    },
    {
      "name": "MPI_Comm_idup_with_info",
      "base_name": "MPI_Comm_idup_with_info",
      "pmpi_name": "PMPI_Comm_idup_with_info",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Info info, MPI_Comm* newcomm, MPI_Request* request",
      "c_args": "comm, info, newcomm, request",
      "fc_params": "MPI_Fint *comm, MPI_Fint *info, MPI_Fint *newcomm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "comm, info, newcomm, request, ierror",
      "f08_par_list": "comm, info, newcomm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(OUT), ASYNCHRONOUS :: newcomm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, info, newcomm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, info%MPI_VAL, newcomm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, info, newcomm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: newcomm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint info, MPI_Fint* newcomm, MPI_Fint* request"
    },
    {
      "name": "MPI_Comm_rank",
      "base_name": "MPI_Comm_rank",
      "pmpi_name": "PMPI_Comm_rank",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int* rank",
      "c_args": "comm, rank",
      "fc_params": "MPI_Fint *comm, MPI_Fint *rank, MPI_Fint *ierror",
      "fc_args": "comm, rank, ierror",
      "f08_par_list": "comm, rank, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(OUT) :: rank\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, rank",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, rank",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, rank",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: rank",
      "cshim_cdesc_params": "MPI_Fint comm, int* rank"
    },
    {
      "name": "MPI_Comm_remote_group",
      "base_name": "MPI_Comm_remote_group",
      "pmpi_name": "PMPI_Comm_remote_group",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Group* group",
      "c_args": "comm, group",
      "fc_params": "MPI_Fint *comm, MPI_Fint *group, MPI_Fint *ierror",
      "fc_args": "comm, group, ierror",
      "f08_par_list": "comm, group, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Group), INTENT(OUT) :: group\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, group",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, group%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, group",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: group",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint* group"
    },
    {
      "name": "MPI_Comm_remote_size",
      "base_name": "MPI_Comm_remote_size",
      "pmpi_name": "PMPI_Comm_remote_size",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int* size",
      "c_args": "comm, size",
      "fc_params": "MPI_Fint *comm, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "comm, size, ierror",
      "f08_par_list": "comm, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint comm, int* size"
    },
    {
      "name": "MPI_Comm_set_attr",
      "base_name": "MPI_Comm_set_attr",
      "pmpi_name": "PMPI_Comm_set_attr",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int comm_keyval, void* attribute_val",
      "c_args": "comm, comm_keyval, attribute_val",
      "fc_params": "MPI_Fint *comm, MPI_Fint *comm_keyval, void* attribute_val, MPI_Fint *ierror",
      "fc_args": "comm, comm_keyval, attribute_val, ierror",
      "f08_par_list": "comm, comm_keyval, attribute_val, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: comm_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, comm_keyval, attribute_val",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, comm_keyval, attribute_val",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, comm_keyval, attribute_val",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: comm_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val",
      "cshim_cdesc_params": "MPI_Fint comm, int comm_keyval, void* attribute_val"
    },
    {
      "name": "MPI_Comm_set_info",
      "base_name": "MPI_Comm_set_info",
      "pmpi_name": "PMPI_Comm_set_info",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Info info",
      "c_args": "comm, info",
      "fc_params": "MPI_Fint *comm, MPI_Fint *info, MPI_Fint *ierror",
      "fc_args": "comm, info, ierror",
      "f08_par_list": "comm, info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, info",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint info"
    },
    {
      "name": "MPI_Comm_set_name",
      "base_name": "MPI_Comm_set_name",
      "pmpi_name": "PMPI_Comm_set_name",
      "embiggened": false,
      "c_params": "MPI_Comm comm, const char* comm_name",
      "c_args": "comm, comm_name",
      "fc_params": "MPI_Fint *comm, const char* comm_name, MPI_Fint *ierror, int comm_name_len",
      "fc_args": "comm, comm_name, ierror, comm_name_len",
      "f08_par_list": "comm, comm_name, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    CHARACTER(LEN=*), INTENT(IN) :: comm_name\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, comm_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: comm_name_c(len_trim(comm_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(comm_name, comm_name_c)",
      "f08_cshim_args": "comm%MPI_VAL, comm_name_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, comm_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            CHARACTER(kind=c_char), INTENT(IN) :: comm_name(*)",
      "cshim_cdesc_params": "MPI_Fint comm, const char* comm_name"
    },
    {
      "name": "MPI_Comm_size",
      "base_name": "MPI_Comm_size",
      "pmpi_name": "PMPI_Comm_size",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int* size",
      "c_args": "comm, size",
      "fc_params": "MPI_Fint *comm, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "comm, size, ierror",
      "f08_par_list": "comm, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint comm, int* size"
    },
    {
      "name": "MPI_Comm_split",
      "base_name": "MPI_Comm_split",
      "pmpi_name": "PMPI_Comm_split",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int color, int key, MPI_Comm* newcomm",
      "c_args": "comm, color, key, newcomm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *color, MPI_Fint *key, MPI_Fint *newcomm, MPI_Fint *ierror",
      "fc_args": "comm, color, key, newcomm, ierror",
      "f08_par_list": "comm, color, key, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: color, key\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, color, key, newcomm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, color, key, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, color, key, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: color\n            INTEGER(c_int), VALUE, INTENT(IN) :: key\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "MPI_Fint comm, int color, int key, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_split_type",
      "base_name": "MPI_Comm_split_type",
      "pmpi_name": "PMPI_Comm_split_type",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm* newcomm",
      "c_args": "comm, split_type, key, info, newcomm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *split_type, MPI_Fint *key, MPI_Fint *info, MPI_Fint *newcomm, MPI_Fint *ierror",
      "fc_args": "comm, split_type, key, info, newcomm, ierror",
      "f08_par_list": "comm, split_type, key, info, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: split_type, key\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, split_type, key, info, newcomm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, split_type, key, info%MPI_VAL, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, split_type, key, info, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: split_type\n            INTEGER(c_int), VALUE, INTENT(IN) :: key\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "MPI_Fint comm, int split_type, int key, MPI_Fint info, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_test_inter",
      "base_name": "MPI_Comm_test_inter",
      "pmpi_name": "PMPI_Comm_test_inter",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int* flag",
      "c_args": "comm, flag",
      "fc_params": "MPI_Fint *comm, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "comm, flag, ierror",
      "f08_par_list": "comm, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "comm, flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint comm, int* flag"
    },
    {
      "name": "MPI_Group_compare",
      "base_name": "MPI_Group_compare",
      "pmpi_name": "PMPI_Group_compare",
      "embiggened": false,
      "c_params": "MPI_Group group1, MPI_Group group2, int* result",
      "c_args": "group1, group2, result",
      "fc_params": "MPI_Fint *group1, MPI_Fint *group2, MPI_Fint *result, MPI_Fint *ierror",
      "fc_args": "group1, group2, result, ierror",
      "f08_par_list": "group1, group2, result, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group1, group2\n    INTEGER, INTENT(OUT) :: result\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group1, group2, result",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group1%MPI_VAL, group2%MPI_VAL, result",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group1, group2, result",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group1\n            integer(c_int), VALUE, INTENT(IN) :: group2\n            INTEGER(c_int), INTENT(OUT) :: result",
      "cshim_cdesc_params": "MPI_Fint group1, MPI_Fint group2, int* result"
    },
    {
      "name": "MPI_Group_difference",
      "base_name": "MPI_Group_difference",
      "pmpi_name": "PMPI_Group_difference",
      "embiggened": false,
      "c_params": "MPI_Group group1, MPI_Group group2, MPI_Group* newgroup",
      "c_args": "group1, group2, newgroup",
      "fc_params": "MPI_Fint *group1, MPI_Fint *group2, MPI_Fint *newgroup, MPI_Fint *ierror",
      "fc_args": "group1, group2, newgroup, ierror",
      "f08_par_list": "group1, group2, newgroup, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group1, group2\n    TYPE(MPI_Group), INTENT(OUT) :: newgroup\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group1, group2, newgroup",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group1%MPI_VAL, group2%MPI_VAL, newgroup%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group1, group2, newgroup",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group1\n            integer(c_int), VALUE, INTENT(IN) :: group2\n            integer(c_int), INTENT(OUT) :: newgroup",
      "cshim_cdesc_params": "MPI_Fint group1, MPI_Fint group2, MPI_Fint* newgroup"
    },
    {
      "name": "MPI_Group_excl",
      "base_name": "MPI_Group_excl",
      "pmpi_name": "PMPI_Group_excl",
      "embiggened": false,
      "c_params": "MPI_Group group, int n, const int ranks[], MPI_Group* newgroup",
      "c_args": "group, n, ranks, newgroup",
      "fc_params": "MPI_Fint *group, MPI_Fint *n, const MPI_Fint *ranks, MPI_Fint *newgroup, MPI_Fint *ierror",
      "fc_args": "group, n, ranks, newgroup, ierror",
      "f08_par_list": "group, n, ranks, newgroup, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(IN) :: n, ranks(n)\n    TYPE(MPI_Group), INTENT(OUT) :: newgroup\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, n, ranks, newgroup",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL, n, ranks, newgroup%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, n, ranks, newgroup",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), VALUE, INTENT(IN) :: n\n            INTEGER(c_int), INTENT(IN) :: ranks(n)\n            integer(c_int), INTENT(OUT) :: newgroup",
      "cshim_cdesc_params": "MPI_Fint group, int n, const int ranks[], MPI_Fint* newgroup"
    },
    {
      "name": "MPI_Group_free",
      "base_name": "MPI_Group_free",
      "pmpi_name": "PMPI_Group_free",
      "embiggened": false,
      "c_params": "MPI_Group* group",
      "c_args": "group",
      "fc_params": "MPI_Fint *group, MPI_Fint *ierror",
      "fc_args": "group, ierror",
      "f08_par_list": "group, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(INOUT) :: group\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: group",
      "cshim_cdesc_params": "MPI_Fint* group"
    },
    {
      "name": "MPI_Group_from_session_pset",
      "base_name": "MPI_Group_from_session_pset",
      "pmpi_name": "PMPI_Group_from_session_pset",
      "embiggened": false,
      "c_params": "MPI_Session session, const char* pset_name, MPI_Group* newgroup",
      "c_args": "session, pset_name, newgroup",
      "fc_params": "MPI_Fint *session, const char* pset_name, MPI_Fint *newgroup, MPI_Fint *ierror, int pset_name_len",
      "fc_args": "session, pset_name, newgroup, ierror, pset_name_len",
      "f08_par_list": "session, pset_name, newgroup, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Group",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    CHARACTER(LEN=*), INTENT(IN) :: pset_name\n    TYPE(MPI_Group), INTENT(OUT) :: newgroup\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, pset_name, newgroup",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: pset_name_c(len_trim(pset_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(pset_name, pset_name_c)",
      "f08_cshim_args": "session%MPI_VAL, pset_name_c, newgroup%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, pset_name, newgroup",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            CHARACTER(kind=c_char), INTENT(IN) :: pset_name(*)\n            integer(c_int), INTENT(OUT) :: newgroup",
      "cshim_cdesc_params": "MPI_Fint session, const char* pset_name, MPI_Fint* newgroup"
    },
    {
      "name": "MPI_Group_incl",
      "base_name": "MPI_Group_incl",
      "pmpi_name": "PMPI_Group_incl",
      "embiggened": false,
      "c_params": "MPI_Group group, int n, const int ranks[], MPI_Group* newgroup",
      "c_args": "group, n, ranks, newgroup",
      "fc_params": "MPI_Fint *group, MPI_Fint *n, const MPI_Fint *ranks, MPI_Fint *newgroup, MPI_Fint *ierror",
      "fc_args": "group, n, ranks, newgroup, ierror",
      "f08_par_list": "group, n, ranks, newgroup, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(IN) :: n, ranks(n)\n    TYPE(MPI_Group), INTENT(OUT) :: newgroup\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, n, ranks, newgroup",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL, n, ranks, newgroup%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, n, ranks, newgroup",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), VALUE, INTENT(IN) :: n\n            INTEGER(c_int), INTENT(IN) :: ranks(n)\n            integer(c_int), INTENT(OUT) :: newgroup",
      "cshim_cdesc_params": "MPI_Fint group, int n, const int ranks[], MPI_Fint* newgroup"
    },
    {
      "name": "MPI_Group_intersection",
      "base_name": "MPI_Group_intersection",
      "pmpi_name": "PMPI_Group_intersection",
      "embiggened": false,
      "c_params": "MPI_Group group1, MPI_Group group2, MPI_Group* newgroup",
      "c_args": "group1, group2, newgroup",
      "fc_params": "MPI_Fint *group1, MPI_Fint *group2, MPI_Fint *newgroup, MPI_Fint *ierror",
      "fc_args": "group1, group2, newgroup, ierror",
      "f08_par_list": "group1, group2, newgroup, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group1, group2\n    TYPE(MPI_Group), INTENT(OUT) :: newgroup\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group1, group2, newgroup",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group1%MPI_VAL, group2%MPI_VAL, newgroup%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group1, group2, newgroup",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group1\n            integer(c_int), VALUE, INTENT(IN) :: group2\n            integer(c_int), INTENT(OUT) :: newgroup",
      "cshim_cdesc_params": "MPI_Fint group1, MPI_Fint group2, MPI_Fint* newgroup"
    },
    {
      "name": "MPI_Group_range_excl",
      "base_name": "MPI_Group_range_excl",
      "pmpi_name": "PMPI_Group_range_excl",
      "embiggened": false,
      "c_params": "MPI_Group group, int n, int ranges[][3], MPI_Group* newgroup",
      "c_args": "group, n, ranges, newgroup",
      "fc_params": "MPI_Fint *group, MPI_Fint *n, MPI_Fint *ranges, MPI_Fint *newgroup, MPI_Fint *ierror",
      "fc_args": "group, n, ranges, newgroup, ierror",
      "f08_par_list": "group, n, ranges, newgroup, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(IN) :: n, ranges(3, n)\n    TYPE(MPI_Group), INTENT(OUT) :: newgroup\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, n, ranges, newgroup",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL, n, ranges, newgroup%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, n, ranges, newgroup",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), VALUE, INTENT(IN) :: n\n            INTEGER(c_int), INTENT(IN) :: ranges(3, n)\n            integer(c_int), INTENT(OUT) :: newgroup",
      "cshim_cdesc_params": "MPI_Fint group, int n, int ranges[][3], MPI_Fint* newgroup"
    },
    {
      "name": "MPI_Group_range_incl",
      "base_name": "MPI_Group_range_incl",
      "pmpi_name": "PMPI_Group_range_incl",
      "embiggened": false,
      "c_params": "MPI_Group group, int n, int ranges[][3], MPI_Group* newgroup",
      "c_args": "group, n, ranges, newgroup",
      "fc_params": "MPI_Fint *group, MPI_Fint *n, MPI_Fint *ranges, MPI_Fint *newgroup, MPI_Fint *ierror",
      "fc_args": "group, n, ranges, newgroup, ierror",
      "f08_par_list": "group, n, ranges, newgroup, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(IN) :: n, ranges(3, n)\n    TYPE(MPI_Group), INTENT(OUT) :: newgroup\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, n, ranges, newgroup",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL, n, ranges, newgroup%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, n, ranges, newgroup",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), VALUE, INTENT(IN) :: n\n            INTEGER(c_int), INTENT(IN) :: ranges(3, n)\n            integer(c_int), INTENT(OUT) :: newgroup",
      "cshim_cdesc_params": "MPI_Fint group, int n, int ranges[][3], MPI_Fint* newgroup"
    },
    {
      "name": "MPI_Group_rank",
      "base_name": "MPI_Group_rank",
      "pmpi_name": "PMPI_Group_rank",
      "embiggened": false,
      "c_params": "MPI_Group group, int* rank",
      "c_args": "group, rank",
      "fc_params": "MPI_Fint *group, MPI_Fint *rank, MPI_Fint *ierror",
      "fc_args": "group, rank, ierror",
      "f08_par_list": "group, rank, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(OUT) :: rank\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, rank",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL, rank",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, rank",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), INTENT(OUT) :: rank",
      "cshim_cdesc_params": "MPI_Fint group, int* rank"
    },
    {
      "name": "MPI_Group_size",
      "base_name": "MPI_Group_size",
      "pmpi_name": "PMPI_Group_size",
      "embiggened": false,
      "c_params": "MPI_Group group, int* size",
      "c_args": "group, size",
      "fc_params": "MPI_Fint *group, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "group, size, ierror",
      "f08_par_list": "group, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, size",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint group, int* size"
    },
    {
      "name": "MPI_Group_translate_ranks",
      "base_name": "MPI_Group_translate_ranks",
      "pmpi_name": "PMPI_Group_translate_ranks",
      "embiggened": false,
      "c_params": "MPI_Group group1, int n, const int ranks1[], MPI_Group group2, int ranks2[]",
      "c_args": "group1, n, ranks1, group2, ranks2",
      "fc_params": "MPI_Fint *group1, MPI_Fint *n, const MPI_Fint *ranks1, MPI_Fint *group2, MPI_Fint *ranks2, MPI_Fint *ierror",
      "fc_args": "group1, n, ranks1, group2, ranks2, ierror",
      "f08_par_list": "group1, n, ranks1, group2, ranks2, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group1, group2\n    INTEGER, INTENT(IN) :: n, ranks1(n)\n    INTEGER, INTENT(OUT) :: ranks2(n)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group1, n, ranks1, group2, ranks2",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group1%MPI_VAL, n, ranks1, group2%MPI_VAL, ranks2",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group1, n, ranks1, group2, ranks2",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group1\n            INTEGER(c_int), VALUE, INTENT(IN) :: n\n            INTEGER(c_int), INTENT(IN) :: ranks1(n)\n            integer(c_int), VALUE, INTENT(IN) :: group2\n            INTEGER(c_int), INTENT(OUT) :: ranks2(n)",
      "cshim_cdesc_params": "MPI_Fint group1, int n, const int ranks1[], MPI_Fint group2, int ranks2[]"
    },
    {
      "name": "MPI_Group_union",
      "base_name": "MPI_Group_union",
      "pmpi_name": "PMPI_Group_union",
      "embiggened": false,
      "c_params": "MPI_Group group1, MPI_Group group2, MPI_Group* newgroup",
      "c_args": "group1, group2, newgroup",
      "fc_params": "MPI_Fint *group1, MPI_Fint *group2, MPI_Fint *newgroup, MPI_Fint *ierror",
      "fc_args": "group1, group2, newgroup, ierror",
      "f08_par_list": "group1, group2, newgroup, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group1, group2\n    TYPE(MPI_Group), INTENT(OUT) :: newgroup\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group1, group2, newgroup",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group1%MPI_VAL, group2%MPI_VAL, newgroup%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group1, group2, newgroup",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group1\n            integer(c_int), VALUE, INTENT(IN) :: group2\n            integer(c_int), INTENT(OUT) :: newgroup",
      "cshim_cdesc_params": "MPI_Fint group1, MPI_Fint group2, MPI_Fint* newgroup"
    },
    {
      "name": "MPI_Intercomm_create",
      "base_name": "MPI_Intercomm_create",
      "pmpi_name": "PMPI_Intercomm_create",
      "embiggened": false,
      "c_params": "MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm* newintercomm",
      "c_args": "local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm",
      "fc_params": "MPI_Fint *local_comm, MPI_Fint *local_leader, MPI_Fint *peer_comm, MPI_Fint *remote_leader, MPI_Fint *tag, MPI_Fint *newintercomm, MPI_Fint *ierror",
      "fc_args": "local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm, ierror",
      "f08_par_list": "local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: local_comm, peer_comm\n    INTEGER, INTENT(IN) :: local_leader, remote_leader, tag\n    TYPE(MPI_Comm), INTENT(OUT) :: newintercomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "local_comm%MPI_VAL, local_leader, peer_comm%MPI_VAL, remote_leader, tag, newintercomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "local_comm, local_leader, peer_comm, remote_leader, tag, newintercomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: local_comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: local_leader\n            integer(c_int), VALUE, INTENT(IN) :: peer_comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: remote_leader\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag\n            integer(c_int), INTENT(OUT) :: newintercomm",
      "cshim_cdesc_params": "MPI_Fint local_comm, int local_leader, MPI_Fint peer_comm, int remote_leader, int tag, MPI_Fint* newintercomm"
    },
    {
      "name": "MPI_Intercomm_create_from_groups",
      "base_name": "MPI_Intercomm_create_from_groups",
      "pmpi_name": "PMPI_Intercomm_create_from_groups",
      "embiggened": false,
      "c_params": "MPI_Group local_group, int local_leader, MPI_Group remote_group, int remote_leader, const char* stringtag, MPI_Info info, MPI_Errhandler errhandler, MPI_Comm* newintercomm",
      "c_args": "local_group, local_leader, remote_group, remote_leader, stringtag, info, errhandler, newintercomm",
      "fc_params": "MPI_Fint *local_group, MPI_Fint *local_leader, MPI_Fint *remote_group, MPI_Fint *remote_leader, const char* stringtag, MPI_Fint *info, MPI_Fint *errhandler, MPI_Fint *newintercomm, MPI_Fint *ierror, int stringtag_len",
      "fc_args": "local_group, local_leader, remote_group, remote_leader, stringtag, info, errhandler, newintercomm, ierror, stringtag_len",
      "f08_par_list": "local_group, local_leader, remote_group, remote_leader, stringtag, info, errhandler, newintercomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Group, MPI_Comm, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: local_group, remote_group\n    INTEGER, INTENT(IN) :: local_leader, remote_leader\n    CHARACTER(LEN=*), INTENT(IN) :: stringtag\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Errhandler), INTENT(IN) :: errhandler\n    TYPE(MPI_Comm), INTENT(OUT) :: newintercomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "local_group, local_leader, remote_group, remote_leader, stringtag, info, errhandler, newintercomm",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: stringtag_c(len_trim(stringtag)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(stringtag, stringtag_c)",
      "f08_cshim_args": "local_group%MPI_VAL, local_leader, remote_group%MPI_VAL, remote_leader, stringtag_c, info%MPI_VAL, errhandler%MPI_VAL, newintercomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "local_group, local_leader, remote_group, remote_leader, stringtag, info, errhandler, newintercomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: local_group\n            INTEGER(c_int), VALUE, INTENT(IN) :: local_leader\n            integer(c_int), VALUE, INTENT(IN) :: remote_group\n            INTEGER(c_int), VALUE, INTENT(IN) :: remote_leader\n            CHARACTER(kind=c_char), INTENT(IN) :: stringtag(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: errhandler\n            integer(c_int), INTENT(OUT) :: newintercomm",
      "cshim_cdesc_params": "MPI_Fint local_group, int local_leader, MPI_Fint remote_group, int remote_leader, const char* stringtag, MPI_Fint info, MPI_Fint errhandler, MPI_Fint* newintercomm"
    },
    {
      "name": "MPI_Intercomm_merge",
      "base_name": "MPI_Intercomm_merge",
      "pmpi_name": "PMPI_Intercomm_merge",
      "embiggened": false,
      "c_params": "MPI_Comm intercomm, int high, MPI_Comm* newintracomm",
      "c_args": "intercomm, high, newintracomm",
      "fc_params": "MPI_Fint *intercomm, MPI_Fint *high, MPI_Fint *newintracomm, MPI_Fint *ierror",
      "fc_args": "intercomm, high, newintracomm, ierror",
      "f08_par_list": "intercomm, high, newintracomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: intercomm\n    LOGICAL, INTENT(IN) :: high\n    TYPE(MPI_Comm), INTENT(OUT) :: newintracomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "intercomm, high, newintracomm",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: high_c",
      "f08_cshim_precall_stmts": "if (high) then\n        high_c = 1\n    else\n        high_c = 0\n    endif",
      "f08_cshim_args": "intercomm%MPI_VAL, high_c, newintracomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "intercomm, high, newintracomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: intercomm\n            INTEGER(c_int), VALUE, INTENT(IN) :: high\n            integer(c_int), INTENT(OUT) :: newintracomm",
      "cshim_cdesc_params": "MPI_Fint intercomm, int high, MPI_Fint* newintracomm"
    },
    {
      "name": "MPI_Type_create_keyval",
      "base_name": "MPI_Type_create_keyval",
      "pmpi_name": "PMPI_Type_create_keyval",
      "embiggened": false,
      "c_params": "MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, int* type_keyval, void* extra_state",
      "c_args": "type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state",
      "fc_params": "MPI_Fint *type_copy_attr_fn, MPI_Fint *type_delete_attr_fn, MPI_Fint *type_keyval, void* extra_state, MPI_Fint *ierror",
      "fc_args": "type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state, ierror",
      "f08_par_list": "type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Type_delete_attr_function, MPI_ADDRESS_KIND, MPI_Type_copy_attr_function",
      "f08_par_decl": "PROCEDURE(MPI_Type_copy_attr_function) :: type_copy_attr_fn\n    PROCEDURE(MPI_Type_delete_attr_function) :: type_delete_attr_fn\n    INTEGER, INTENT(OUT) :: type_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_type_copy_attr_fn\n    type(c_funptr) :: cfunptr_type_delete_attr_fn",
      "f08_cshim_precall_stmts": "cfunptr_type_copy_attr_fn = c_funloc(type_copy_attr_fn)\n    cfunptr_type_delete_attr_fn = c_funloc(type_delete_attr_fn)",
      "f08_cshim_args": "cfunptr_type_copy_attr_fn, cfunptr_type_delete_attr_fn, type_keyval, extra_state",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "type_copy_attr_fn, type_delete_attr_fn, type_keyval, extra_state",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: type_copy_attr_fn\n            TYPE(c_funptr), VALUE :: type_delete_attr_fn\n            INTEGER(c_int), INTENT(OUT) :: type_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state",
      "cshim_cdesc_params": "MPI_Type_copy_attr_function* type_copy_attr_fn, MPI_Type_delete_attr_function* type_delete_attr_fn, int* type_keyval, void* extra_state"
    },
    {
      "name": "MPI_Type_delete_attr",
      "base_name": "MPI_Type_delete_attr",
      "pmpi_name": "PMPI_Type_delete_attr",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, int type_keyval",
      "c_args": "datatype, type_keyval",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *type_keyval, MPI_Fint *ierror",
      "fc_args": "datatype, type_keyval, ierror",
      "f08_par_list": "datatype, type_keyval, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: type_keyval\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, type_keyval",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, type_keyval",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, type_keyval",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: type_keyval",
      "cshim_cdesc_params": "MPI_Fint datatype, int type_keyval"
    },
    {
      "name": "MPI_Type_free_keyval",
      "base_name": "MPI_Type_free_keyval",
      "pmpi_name": "PMPI_Type_free_keyval",
      "embiggened": false,
      "c_params": "int* type_keyval",
      "c_args": "type_keyval",
      "fc_params": "MPI_Fint *type_keyval, MPI_Fint *ierror",
      "fc_args": "type_keyval, ierror",
      "f08_par_list": "type_keyval, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(INOUT) :: type_keyval\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "type_keyval",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "type_keyval",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "type_keyval",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(INOUT) :: type_keyval",
      "cshim_cdesc_params": "int* type_keyval"
    },
    {
      "name": "MPI_Type_get_attr",
      "base_name": "MPI_Type_get_attr",
      "pmpi_name": "PMPI_Type_get_attr",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, int type_keyval, void* attribute_val, int* flag",
      "c_args": "datatype, type_keyval, attribute_val, flag",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *type_keyval, void* attribute_val, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "datatype, type_keyval, attribute_val, flag, ierror",
      "f08_par_list": "datatype, type_keyval, attribute_val, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: type_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, type_keyval, attribute_val, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, type_keyval, attribute_val, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "datatype, type_keyval, attribute_val, flag",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: type_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint datatype, int type_keyval, void* attribute_val, int* flag"
    },
    {
      "name": "MPI_Type_get_name",
      "base_name": "MPI_Type_get_name",
      "pmpi_name": "PMPI_Type_get_name",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, char* type_name, int* resultlen",
      "c_args": "datatype, type_name, resultlen",
      "fc_params": "MPI_Fint *datatype, char* type_name, MPI_Fint *resultlen, MPI_Fint *ierror, int type_name_len",
      "fc_args": "datatype, type_name, resultlen, ierror, type_name_len",
      "f08_par_list": "datatype, type_name, resultlen, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_MAX_OBJECT_NAME, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: type_name\n    INTEGER, INTENT(OUT) :: resultlen\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, type_name, resultlen",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: type_name_c(MPI_MAX_OBJECT_NAME + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, type_name_c, resultlen",
      "f08_cshim_postcall_stmts": "call string_c2f(type_name_c, type_name)",
      "f08_cshim_iface_par_list": "datatype, type_name, resultlen",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            CHARACTER(kind=c_char), INTENT(OUT) :: type_name(*)\n            INTEGER(c_int), INTENT(OUT) :: resultlen",
      "cshim_cdesc_params": "MPI_Fint datatype, char* type_name, int* resultlen"
    },
    {
      "name": "MPI_Type_set_attr",
      "base_name": "MPI_Type_set_attr",
      "pmpi_name": "PMPI_Type_set_attr",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, int type_keyval, void* attribute_val",
      "c_args": "datatype, type_keyval, attribute_val",
      "fc_params": "MPI_Fint *datatype, MPI_Fint *type_keyval, void* attribute_val, MPI_Fint *ierror",
      "fc_args": "datatype, type_keyval, attribute_val, ierror",
      "f08_par_list": "datatype, type_keyval, attribute_val, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: type_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, type_keyval, attribute_val",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "datatype%MPI_VAL, type_keyval, attribute_val",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, type_keyval, attribute_val",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: type_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val",
      "cshim_cdesc_params": "MPI_Fint datatype, int type_keyval, void* attribute_val"
    },
    {
      "name": "MPI_Type_set_name",
      "base_name": "MPI_Type_set_name",
      "pmpi_name": "PMPI_Type_set_name",
      "embiggened": false,
      "c_params": "MPI_Datatype datatype, const char* type_name",
      "c_args": "datatype, type_name",
      "fc_params": "MPI_Fint *datatype, const char* type_name, MPI_Fint *ierror, int type_name_len",
      "fc_args": "datatype, type_name, ierror, type_name_len",
      "f08_par_list": "datatype, type_name, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    CHARACTER(LEN=*), INTENT(IN) :: type_name\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datatype, type_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: type_name_c(len_trim(type_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(type_name, type_name_c)",
      "f08_cshim_args": "datatype%MPI_VAL, type_name_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datatype, type_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: datatype\n            CHARACTER(kind=c_char), INTENT(IN) :: type_name(*)",
      "cshim_cdesc_params": "MPI_Fint datatype, const char* type_name"
    },
    {
      "name": "MPI_Win_create_keyval",
      "base_name": "MPI_Win_create_keyval",
      "pmpi_name": "PMPI_Win_create_keyval",
      "embiggened": false,
      "c_params": "MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, int* win_keyval, void* extra_state",
      "c_args": "win_copy_attr_fn, win_delete_attr_fn, win_keyval, extra_state",
      "fc_params": "MPI_Fint *win_copy_attr_fn, MPI_Fint *win_delete_attr_fn, MPI_Fint *win_keyval, void* extra_state, MPI_Fint *ierror",
      "fc_args": "win_copy_attr_fn, win_delete_attr_fn, win_keyval, extra_state, ierror",
      "f08_par_list": "win_copy_attr_fn, win_delete_attr_fn, win_keyval, extra_state, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win_delete_attr_function, MPI_Win_copy_attr_function, MPI_ADDRESS_KIND",
      "f08_par_decl": "PROCEDURE(MPI_Win_copy_attr_function) :: win_copy_attr_fn\n    PROCEDURE(MPI_Win_delete_attr_function) :: win_delete_attr_fn\n    INTEGER, INTENT(OUT) :: win_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win_copy_attr_fn, win_delete_attr_fn, win_keyval, extra_state",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_win_copy_attr_fn\n    type(c_funptr) :: cfunptr_win_delete_attr_fn",
      "f08_cshim_precall_stmts": "cfunptr_win_copy_attr_fn = c_funloc(win_copy_attr_fn)\n    cfunptr_win_delete_attr_fn = c_funloc(win_delete_attr_fn)",
      "f08_cshim_args": "cfunptr_win_copy_attr_fn, cfunptr_win_delete_attr_fn, win_keyval, extra_state",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win_copy_attr_fn, win_delete_attr_fn, win_keyval, extra_state",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: win_copy_attr_fn\n            TYPE(c_funptr), VALUE :: win_delete_attr_fn\n            INTEGER(c_int), INTENT(OUT) :: win_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state",
      "cshim_cdesc_params": "MPI_Win_copy_attr_function* win_copy_attr_fn, MPI_Win_delete_attr_function* win_delete_attr_fn, int* win_keyval, void* extra_state"
    },
    {
      "name": "MPI_Win_delete_attr",
      "base_name": "MPI_Win_delete_attr",
      "pmpi_name": "PMPI_Win_delete_attr",
      "embiggened": false,
      "c_params": "MPI_Win win, int win_keyval",
      "c_args": "win, win_keyval",
      "fc_params": "MPI_Fint *win, MPI_Fint *win_keyval, MPI_Fint *ierror",
      "fc_args": "win, win_keyval, ierror",
      "f08_par_list": "win, win_keyval, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, INTENT(IN) :: win_keyval\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, win_keyval",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, win_keyval",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, win_keyval",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            INTEGER(c_int), VALUE, INTENT(IN) :: win_keyval",
      "cshim_cdesc_params": "MPI_Fint win, int win_keyval"
    },
    {
      "name": "MPI_Win_free_keyval",
      "base_name": "MPI_Win_free_keyval",
      "pmpi_name": "PMPI_Win_free_keyval",
      "embiggened": false,
      "c_params": "int* win_keyval",
      "c_args": "win_keyval",
      "fc_params": "MPI_Fint *win_keyval, MPI_Fint *ierror",
      "fc_args": "win_keyval, ierror",
      "f08_par_list": "win_keyval, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(INOUT) :: win_keyval\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win_keyval",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win_keyval",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win_keyval",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(INOUT) :: win_keyval",
      "cshim_cdesc_params": "int* win_keyval"
    },
    {
      "name": "MPI_Win_get_attr",
      "base_name": "MPI_Win_get_attr",
      "pmpi_name": "PMPI_Win_get_attr",
      "embiggened": false,
      "c_params": "MPI_Win win, int win_keyval, void* attribute_val, int* flag",
      "c_args": "win, win_keyval, attribute_val, flag",
      "fc_params": "MPI_Fint *win, MPI_Fint *win_keyval, void* attribute_val, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "win, win_keyval, attribute_val, flag, ierror",
      "f08_par_list": "win, win_keyval, attribute_val, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, INTENT(IN) :: win_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, win_keyval, attribute_val, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, win_keyval, attribute_val, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "win, win_keyval, attribute_val, flag",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            INTEGER(c_int), VALUE, INTENT(IN) :: win_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint win, int win_keyval, void* attribute_val, int* flag"
    },
    {
      "name": "MPI_Win_get_name",
      "base_name": "MPI_Win_get_name",
      "pmpi_name": "PMPI_Win_get_name",
      "embiggened": false,
      "c_params": "MPI_Win win, char* win_name, int* resultlen",
      "c_args": "win, win_name, resultlen",
      "fc_params": "MPI_Fint *win, char* win_name, MPI_Fint *resultlen, MPI_Fint *ierror, int win_name_len",
      "fc_args": "win, win_name, resultlen, ierror, win_name_len",
      "f08_par_list": "win, win_name, resultlen, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_MAX_OBJECT_NAME",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: win_name\n    INTEGER, INTENT(OUT) :: resultlen\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, win_name, resultlen",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: win_name_c(MPI_MAX_OBJECT_NAME + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, win_name_c, resultlen",
      "f08_cshim_postcall_stmts": "call string_c2f(win_name_c, win_name)",
      "f08_cshim_iface_par_list": "win, win_name, resultlen",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            CHARACTER(kind=c_char), INTENT(OUT) :: win_name(*)\n            INTEGER(c_int), INTENT(OUT) :: resultlen",
      "cshim_cdesc_params": "MPI_Fint win, char* win_name, int* resultlen"
    },
    {
      "name": "MPI_Win_set_attr",
      "base_name": "MPI_Win_set_attr",
      "pmpi_name": "PMPI_Win_set_attr",
      "embiggened": false,
      "c_params": "MPI_Win win, int win_keyval, void* attribute_val",
      "c_args": "win, win_keyval, attribute_val",
      "fc_params": "MPI_Fint *win, MPI_Fint *win_keyval, void* attribute_val, MPI_Fint *ierror",
      "fc_args": "win, win_keyval, attribute_val, ierror",
      "f08_par_list": "win, win_keyval, attribute_val, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, INTENT(IN) :: win_keyval\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, win_keyval, attribute_val",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, win_keyval, attribute_val",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, win_keyval, attribute_val",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            INTEGER(c_int), VALUE, INTENT(IN) :: win_keyval\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val",
      "cshim_cdesc_params": "MPI_Fint win, int win_keyval, void* attribute_val"
    },
    {
      "name": "MPI_Win_set_name",
      "base_name": "MPI_Win_set_name",
      "pmpi_name": "PMPI_Win_set_name",
      "embiggened": false,
      "c_params": "MPI_Win win, const char* win_name",
      "c_args": "win, win_name",
      "fc_params": "MPI_Fint *win, const char* win_name, MPI_Fint *ierror, int win_name_len",
      "fc_args": "win, win_name, ierror, win_name_len",
      "f08_par_list": "win, win_name, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    CHARACTER(LEN=*), INTENT(IN) :: win_name\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, win_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: win_name_c(len_trim(win_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(win_name, win_name_c)",
      "f08_cshim_args": "win%MPI_VAL, win_name_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, win_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            CHARACTER(kind=c_char), INTENT(IN) :: win_name(*)",
      "cshim_cdesc_params": "MPI_Fint win, const char* win_name"
    },
    {
      "name": "MPI_Cart_coords",
      "base_name": "MPI_Cart_coords",
      "pmpi_name": "PMPI_Cart_coords",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int rank, int maxdims, int coords[]",
      "c_args": "comm, rank, maxdims, coords",
      "fc_params": "MPI_Fint *comm, MPI_Fint *rank, MPI_Fint *maxdims, MPI_Fint *coords, MPI_Fint *ierror",
      "fc_args": "comm, rank, maxdims, coords, ierror",
      "f08_par_list": "comm, rank, maxdims, coords, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: rank, maxdims\n    INTEGER, INTENT(OUT) :: coords(maxdims)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, rank, maxdims, coords",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, rank, maxdims, coords",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, rank, maxdims, coords",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            INTEGER(c_int), VALUE, INTENT(IN) :: maxdims\n            INTEGER(c_int), INTENT(OUT) :: coords(maxdims)",
      "cshim_cdesc_params": "MPI_Fint comm, int rank, int maxdims, int coords[]"
    },
    {
      "name": "MPI_Cart_create",
      "base_name": "MPI_Cart_create",
      "pmpi_name": "PMPI_Cart_create",
      "embiggened": false,
      "c_params": "MPI_Comm comm_old, int ndims, const int dims[], const int periods[], int reorder, MPI_Comm* comm_cart",
      "c_args": "comm_old, ndims, dims, periods, reorder, comm_cart",
      "fc_params": "MPI_Fint *comm_old, MPI_Fint *ndims, const MPI_Fint *dims, const MPI_Fint *periods, MPI_Fint *reorder, MPI_Fint *comm_cart, MPI_Fint *ierror",
      "fc_args": "comm_old, ndims, dims, periods, reorder, comm_cart, ierror",
      "f08_par_list": "comm_old, ndims, dims, periods, reorder, comm_cart, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm_old\n    INTEGER, INTENT(IN) :: ndims, dims(ndims)\n    LOGICAL, INTENT(IN) :: periods(ndims), reorder\n    TYPE(MPI_Comm), INTENT(OUT) :: comm_cart\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm_old, ndims, dims, periods, reorder, comm_cart",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: periods_c(ndims)\n    integer(c_int) :: reorder_c",
      "f08_cshim_precall_stmts": "periods_c = merge(1, 0, periods)\n    if (reorder) then\n        reorder_c = 1\n    else\n        reorder_c = 0\n    endif",
      "f08_cshim_args": "comm_old%MPI_VAL, ndims, dims, periods_c, reorder_c, comm_cart%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm_old, ndims, dims, periods, reorder, comm_cart",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm_old\n            INTEGER(c_int), VALUE, INTENT(IN) :: ndims\n            INTEGER(c_int), INTENT(IN) :: dims(ndims)\n            INTEGER(c_int), INTENT(IN) :: periods(ndims)\n            INTEGER(c_int), VALUE, INTENT(IN) :: reorder\n            integer(c_int), INTENT(OUT) :: comm_cart",
      "cshim_cdesc_params": "MPI_Fint comm_old, int ndims, const int dims[], const int periods[], int reorder, MPI_Fint* comm_cart"
    },
    {
      "name": "MPI_Cart_get",
      "base_name": "MPI_Cart_get",
      "pmpi_name": "PMPI_Cart_get",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[]",
      "c_args": "comm, maxdims, dims, periods, coords",
      "fc_params": "MPI_Fint *comm, MPI_Fint *maxdims, MPI_Fint *dims, MPI_Fint *periods, MPI_Fint *coords, MPI_Fint *ierror",
      "fc_args": "comm, maxdims, dims, periods, coords, ierror",
      "f08_par_list": "comm, maxdims, dims, periods, coords, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: maxdims\n    INTEGER, INTENT(OUT) :: dims(maxdims), coords(maxdims)\n    LOGICAL, INTENT(OUT) :: periods(maxdims)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, maxdims, dims, periods, coords",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: periods_c(maxdims)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, maxdims, dims, periods_c, coords",
      "f08_cshim_postcall_stmts": "periods = (periods_c /= 0)",
      "f08_cshim_iface_par_list": "comm, maxdims, dims, periods, coords",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: maxdims\n            INTEGER(c_int), INTENT(OUT) :: dims(maxdims)\n            INTEGER(c_int), INTENT(OUT) :: periods(maxdims)\n            INTEGER(c_int), INTENT(OUT) :: coords(maxdims)",
      "cshim_cdesc_params": "MPI_Fint comm, int maxdims, int dims[], int periods[], int coords[]"
    },
    {
      "name": "MPI_Cart_map",
      "base_name": "MPI_Cart_map",
      "pmpi_name": "PMPI_Cart_map",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int ndims, const int dims[], const int periods[], int* newrank",
      "c_args": "comm, ndims, dims, periods, newrank",
      "fc_params": "MPI_Fint *comm, MPI_Fint *ndims, const MPI_Fint *dims, const MPI_Fint *periods, MPI_Fint *newrank, MPI_Fint *ierror",
      "fc_args": "comm, ndims, dims, periods, newrank, ierror",
      "f08_par_list": "comm, ndims, dims, periods, newrank, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: ndims, dims(ndims)\n    LOGICAL, INTENT(IN) :: periods(ndims)\n    INTEGER, INTENT(OUT) :: newrank\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, ndims, dims, periods, newrank",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: periods_c(ndims)",
      "f08_cshim_precall_stmts": "periods_c = merge(1, 0, periods)",
      "f08_cshim_args": "comm%MPI_VAL, ndims, dims, periods_c, newrank",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, ndims, dims, periods, newrank",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: ndims\n            INTEGER(c_int), INTENT(IN) :: dims(ndims)\n            INTEGER(c_int), INTENT(IN) :: periods(ndims)\n            INTEGER(c_int), INTENT(OUT) :: newrank",
      "cshim_cdesc_params": "MPI_Fint comm, int ndims, const int dims[], const int periods[], int* newrank"
    },
    {
      "name": "MPI_Cart_rank",
      "base_name": "MPI_Cart_rank",
      "pmpi_name": "PMPI_Cart_rank",
      "embiggened": false,
      "c_params": "MPI_Comm comm, const int coords[], int* rank",
      "c_args": "comm, coords, rank",
      "fc_params": "MPI_Fint *comm, const MPI_Fint *coords, MPI_Fint *rank, MPI_Fint *ierror",
      "fc_args": "comm, coords, rank, ierror",
      "f08_par_list": "comm, coords, rank, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: coords(*)\n    INTEGER, INTENT(OUT) :: rank\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, coords, rank",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, coords, rank",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, coords, rank",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(IN) :: coords(*)\n            INTEGER(c_int), INTENT(OUT) :: rank",
      "cshim_cdesc_params": "MPI_Fint comm, const int coords[], int* rank"
    },
    {
      "name": "MPI_Cart_shift",
      "base_name": "MPI_Cart_shift",
      "pmpi_name": "PMPI_Cart_shift",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int direction, int disp, int* rank_source, int* rank_dest",
      "c_args": "comm, direction, disp, rank_source, rank_dest",
      "fc_params": "MPI_Fint *comm, MPI_Fint *direction, MPI_Fint *disp, MPI_Fint *rank_source, MPI_Fint *rank_dest, MPI_Fint *ierror",
      "fc_args": "comm, direction, disp, rank_source, rank_dest, ierror",
      "f08_par_list": "comm, direction, disp, rank_source, rank_dest, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: direction, disp\n    INTEGER, INTENT(OUT) :: rank_source, rank_dest\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, direction, disp, rank_source, rank_dest",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, direction, disp, rank_source, rank_dest",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, direction, disp, rank_source, rank_dest",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: direction\n            INTEGER(c_int), VALUE, INTENT(IN) :: disp\n            INTEGER(c_int), INTENT(OUT) :: rank_source\n            INTEGER(c_int), INTENT(OUT) :: rank_dest",
      "cshim_cdesc_params": "MPI_Fint comm, int direction, int disp, int* rank_source, int* rank_dest"
    },
    {
      "name": "MPI_Cart_sub",
      "base_name": "MPI_Cart_sub",
      "pmpi_name": "PMPI_Cart_sub",
      "embiggened": false,
      "c_params": "MPI_Comm comm, const int remain_dims[], MPI_Comm* newcomm",
      "c_args": "comm, remain_dims, newcomm",
      "fc_params": "MPI_Fint *comm, const MPI_Fint *remain_dims, MPI_Fint *newcomm, MPI_Fint *ierror",
      "fc_args": "comm, remain_dims, newcomm, ierror",
      "f08_par_list": "comm, remain_dims, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    LOGICAL, INTENT(IN) :: remain_dims(*)\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, remain_dims, newcomm",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Cartdim_get\n    use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int), allocatable, dimension(:) :: remain_dims_c\n    integer :: length, cartdim_ierror",
      "f08_cshim_precall_stmts": "call PMPI_Cartdim_get(comm, length, cartdim_ierror)\n    if (cartdim_ierror /= 0) then\n        remain_dims_c = merge(1, 0, remain_dims(1:length))\n    endif",
      "f08_cshim_args": "comm%MPI_VAL, remain_dims_c, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, remain_dims, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(IN) :: remain_dims(*)\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "MPI_Fint comm, const int remain_dims[], MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Cartdim_get",
      "base_name": "MPI_Cartdim_get",
      "pmpi_name": "PMPI_Cartdim_get",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int* ndims",
      "c_args": "comm, ndims",
      "fc_params": "MPI_Fint *comm, MPI_Fint *ndims, MPI_Fint *ierror",
      "fc_args": "comm, ndims, ierror",
      "f08_par_list": "comm, ndims, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(OUT) :: ndims\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, ndims",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, ndims",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, ndims",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: ndims",
      "cshim_cdesc_params": "MPI_Fint comm, int* ndims"
    },
    {
      "name": "MPI_Dims_create",
      "base_name": "MPI_Dims_create",
      "pmpi_name": "PMPI_Dims_create",
      "embiggened": false,
      "c_params": "int nnodes, int ndims, int dims[]",
      "c_args": "nnodes, ndims, dims",
      "fc_params": "MPI_Fint *nnodes, MPI_Fint *ndims, MPI_Fint *dims, MPI_Fint *ierror",
      "fc_args": "nnodes, ndims, dims, ierror",
      "f08_par_list": "nnodes, ndims, dims, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(IN) :: nnodes, ndims\n    INTEGER, INTENT(INOUT) :: dims(ndims)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "nnodes, ndims, dims",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "nnodes, ndims, dims",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "nnodes, ndims, dims",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: nnodes\n            INTEGER(c_int), VALUE, INTENT(IN) :: ndims\n            INTEGER(c_int), INTENT(INOUT) :: dims(ndims)",
      "cshim_cdesc_params": "int nnodes, int ndims, int dims[]"
    },
    {
      "name": "MPI_Dist_graph_create",
      "base_name": "MPI_Dist_graph_create",
      "pmpi_name": "PMPI_Dist_graph_create",
      "embiggened": false,
      "c_params": "MPI_Comm comm_old, int n, const int sources[], const int degrees[], const int destinations[], const int weights[], MPI_Info info, int reorder, MPI_Comm* comm_dist_graph",
      "c_args": "comm_old, n, sources, degrees, destinations, weights, info, reorder, comm_dist_graph",
      "fc_params": "MPI_Fint *comm_old, MPI_Fint *n, const MPI_Fint *sources, const MPI_Fint *degrees, const MPI_Fint *destinations, const MPI_Fint *weights, MPI_Fint *info, MPI_Fint *reorder, MPI_Fint *comm_dist_graph, MPI_Fint *ierror",
      "fc_args": "comm_old, n, sources, degrees, destinations, weights, info, reorder, comm_dist_graph, ierror",
      "f08_par_list": "comm_old, n, sources, degrees, destinations, weights, info, reorder, comm_dist_graph, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm_old\n    INTEGER, INTENT(IN) :: n, sources(n), degrees(n), destinations(*), weights(*)\n    TYPE(MPI_Info), INTENT(IN) :: info\n    LOGICAL, INTENT(IN) :: reorder\n    TYPE(MPI_Comm), INTENT(OUT) :: comm_dist_graph\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm_old, n, sources, degrees, destinations, weights, info, reorder, comm_dist_graph",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: reorder_c",
      "f08_cshim_precall_stmts": "if (reorder) then\n        reorder_c = 1\n    else\n        reorder_c = 0\n    endif",
      "f08_cshim_args": "comm_old%MPI_VAL, n, sources, degrees, destinations, weights, info%MPI_VAL, reorder_c, comm_dist_graph%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm_old, n, sources, degrees, destinations, weights, info, reorder, comm_dist_graph",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm_old\n            INTEGER(c_int), VALUE, INTENT(IN) :: n\n            INTEGER(c_int), INTENT(IN) :: sources(n)\n            INTEGER(c_int), INTENT(IN) :: degrees(n)\n            INTEGER(c_int), INTENT(IN) :: destinations(*)\n            INTEGER(c_int), INTENT(IN) :: weights(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), VALUE, INTENT(IN) :: reorder\n            integer(c_int), INTENT(OUT) :: comm_dist_graph",
      "cshim_cdesc_params": "MPI_Fint comm_old, int n, const int sources[], const int degrees[], const int destinations[], const int weights[], MPI_Fint info, int reorder, MPI_Fint* comm_dist_graph"
    },
    {
      "name": "MPI_Dist_graph_create_adjacent",
      "base_name": "MPI_Dist_graph_create_adjacent",
      "pmpi_name": "PMPI_Dist_graph_create_adjacent",
      "embiggened": false,
      "c_params": "MPI_Comm comm_old, int indegree, const int sources[], const int sourceweights[], int outdegree, const int destinations[], const int destweights[], MPI_Info info, int reorder, MPI_Comm* comm_dist_graph",
      "c_args": "comm_old, indegree, sources, sourceweights, outdegree, destinations, destweights, info, reorder, comm_dist_graph",
      "fc_params": "MPI_Fint *comm_old, MPI_Fint *indegree, const MPI_Fint *sources, const MPI_Fint *sourceweights, MPI_Fint *outdegree, const MPI_Fint *destinations, const MPI_Fint *destweights, MPI_Fint *info, MPI_Fint *reorder, MPI_Fint *comm_dist_graph, MPI_Fint *ierror",
      "fc_args": "comm_old, indegree, sources, sourceweights, outdegree, destinations, destweights, info, reorder, comm_dist_graph, ierror",
      "f08_par_list": "comm_old, indegree, sources, sourceweights, outdegree, destinations, destweights, info, reorder, comm_dist_graph, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm_old\n    INTEGER, INTENT(IN) :: indegree, sources(indegree), sourceweights(*), outdegree, destinations(outdegree), destweights(*)\n    TYPE(MPI_Info), INTENT(IN) :: info\n    LOGICAL, INTENT(IN) :: reorder\n    TYPE(MPI_Comm), INTENT(OUT) :: comm_dist_graph\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm_old, indegree, sources, sourceweights, outdegree, destinations, destweights, info, reorder, comm_dist_graph",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: reorder_c",
      "f08_cshim_precall_stmts": "if (reorder) then\n        reorder_c = 1\n    else\n        reorder_c = 0\n    endif",
      "f08_cshim_args": "comm_old%MPI_VAL, indegree, sources, sourceweights, outdegree, destinations, destweights, info%MPI_VAL, reorder_c, comm_dist_graph%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm_old, indegree, sources, sourceweights, outdegree, destinations, destweights, info, reorder, comm_dist_graph",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm_old\n            INTEGER(c_int), VALUE, INTENT(IN) :: indegree\n            INTEGER(c_int), INTENT(IN) :: sources(indegree)\n            INTEGER(c_int), INTENT(IN) :: sourceweights(*)\n            INTEGER(c_int), VALUE, INTENT(IN) :: outdegree\n            INTEGER(c_int), INTENT(IN) :: destinations(outdegree)\n            INTEGER(c_int), INTENT(IN) :: destweights(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), VALUE, INTENT(IN) :: reorder\n            integer(c_int), INTENT(OUT) :: comm_dist_graph",
      "cshim_cdesc_params": "MPI_Fint comm_old, int indegree, const int sources[], const int sourceweights[], int outdegree, const int destinations[], const int destweights[], MPI_Fint info, int reorder, MPI_Fint* comm_dist_graph"
    },
    {
      "name": "MPI_Dist_graph_neighbors",
      "base_name": "MPI_Dist_graph_neighbors",
      "pmpi_name": "PMPI_Dist_graph_neighbors",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]",
      "c_args": "comm, maxindegree, sources, sourceweights, maxoutdegree, destinations, destweights",
      "fc_params": "MPI_Fint *comm, MPI_Fint *maxindegree, MPI_Fint *sources, MPI_Fint *sourceweights, MPI_Fint *maxoutdegree, MPI_Fint *destinations, MPI_Fint *destweights, MPI_Fint *ierror",
      "fc_args": "comm, maxindegree, sources, sourceweights, maxoutdegree, destinations, destweights, ierror",
      "f08_par_list": "comm, maxindegree, sources, sourceweights, maxoutdegree, destinations, destweights, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: maxindegree, maxoutdegree\n    INTEGER, INTENT(OUT) :: sources(maxindegree), destinations(maxoutdegree)\n    INTEGER :: sourceweights(*), destweights(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, maxindegree, sources, sourceweights, maxoutdegree, destinations, destweights",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, maxindegree, sources, sourceweights, maxoutdegree, destinations, destweights",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, maxindegree, sources, sourceweights, maxoutdegree, destinations, destweights",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: maxindegree\n            INTEGER(c_int), INTENT(OUT) :: sources(maxindegree)\n            INTEGER(c_int) :: sourceweights(*)\n            INTEGER(c_int), VALUE, INTENT(IN) :: maxoutdegree\n            INTEGER(c_int), INTENT(OUT) :: destinations(maxoutdegree)\n            INTEGER(c_int) :: destweights(*)",
      "cshim_cdesc_params": "MPI_Fint comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]"
    },
    {
      "name": "MPI_Dist_graph_neighbors_count",
      "base_name": "MPI_Dist_graph_neighbors_count",
      "pmpi_name": "PMPI_Dist_graph_neighbors_count",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int* indegree, int* outdegree, int* weighted",
      "c_args": "comm, indegree, outdegree, weighted",
      "fc_params": "MPI_Fint *comm, MPI_Fint *indegree, MPI_Fint *outdegree, MPI_Fint *weighted, MPI_Fint *ierror",
      "fc_args": "comm, indegree, outdegree, weighted, ierror",
      "f08_par_list": "comm, indegree, outdegree, weighted, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(OUT) :: indegree, outdegree\n    LOGICAL, INTENT(OUT) :: weighted\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, indegree, outdegree, weighted",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: weighted_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, indegree, outdegree, weighted_c",
      "f08_cshim_postcall_stmts": "weighted = (weighted_c /= 0)",
      "f08_cshim_iface_par_list": "comm, indegree, outdegree, weighted",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: indegree\n            INTEGER(c_int), INTENT(OUT) :: outdegree\n            INTEGER(c_int), INTENT(OUT) :: weighted",
      "cshim_cdesc_params": "MPI_Fint comm, int* indegree, int* outdegree, int* weighted"
    },
    {
      "name": "MPI_Graph_create",
      "base_name": "MPI_Graph_create",
      "pmpi_name": "PMPI_Graph_create",
      "embiggened": false,
      "c_params": "MPI_Comm comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Comm* comm_graph",
      "c_args": "comm_old, nnodes, index, edges, reorder, comm_graph",
      "fc_params": "MPI_Fint *comm_old, MPI_Fint *nnodes, const MPI_Fint *index, const MPI_Fint *edges, MPI_Fint *reorder, MPI_Fint *comm_graph, MPI_Fint *ierror",
      "fc_args": "comm_old, nnodes, index, edges, reorder, comm_graph, ierror",
      "f08_par_list": "comm_old, nnodes, index, edges, reorder, comm_graph, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm_old\n    INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*)\n    LOGICAL, INTENT(IN) :: reorder\n    TYPE(MPI_Comm), INTENT(OUT) :: comm_graph\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm_old, nnodes, index, edges, reorder, comm_graph",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: reorder_c",
      "f08_cshim_precall_stmts": "if (reorder) then\n        reorder_c = 1\n    else\n        reorder_c = 0\n    endif",
      "f08_cshim_args": "comm_old%MPI_VAL, nnodes, index, edges, reorder_c, comm_graph%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm_old, nnodes, index, edges, reorder, comm_graph",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm_old\n            INTEGER(c_int), VALUE, INTENT(IN) :: nnodes\n            INTEGER(c_int), INTENT(IN) :: index(nnodes)\n            INTEGER(c_int), INTENT(IN) :: edges(*)\n            INTEGER(c_int), VALUE, INTENT(IN) :: reorder\n            integer(c_int), INTENT(OUT) :: comm_graph",
      "cshim_cdesc_params": "MPI_Fint comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Fint* comm_graph"
    },
    {
      "name": "MPI_Graph_get",
      "base_name": "MPI_Graph_get",
      "pmpi_name": "PMPI_Graph_get",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int maxindex, int maxedges, int index[], int edges[]",
      "c_args": "comm, maxindex, maxedges, index, edges",
      "fc_params": "MPI_Fint *comm, MPI_Fint *maxindex, MPI_Fint *maxedges, MPI_Fint *index, MPI_Fint *edges, MPI_Fint *ierror",
      "fc_args": "comm, maxindex, maxedges, index, edges, ierror",
      "f08_par_list": "comm, maxindex, maxedges, index, edges, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: maxindex, maxedges\n    INTEGER, INTENT(OUT) :: index(maxindex), edges(maxedges)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, maxindex, maxedges, index, edges",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, maxindex, maxedges, index, edges",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, maxindex, maxedges, index, edges",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: maxindex\n            INTEGER(c_int), VALUE, INTENT(IN) :: maxedges\n            INTEGER(c_int), INTENT(OUT) :: index(maxindex)\n            INTEGER(c_int), INTENT(OUT) :: edges(maxedges)",
      "cshim_cdesc_params": "MPI_Fint comm, int maxindex, int maxedges, int index[], int edges[]"
    },
    {
      "name": "MPI_Graph_map",
      "base_name": "MPI_Graph_map",
      "pmpi_name": "PMPI_Graph_map",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int nnodes, const int index[], const int edges[], int* newrank",
      "c_args": "comm, nnodes, index, edges, newrank",
      "fc_params": "MPI_Fint *comm, MPI_Fint *nnodes, const MPI_Fint *index, const MPI_Fint *edges, MPI_Fint *newrank, MPI_Fint *ierror",
      "fc_args": "comm, nnodes, index, edges, newrank, ierror",
      "f08_par_list": "comm, nnodes, index, edges, newrank, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*)\n    INTEGER, INTENT(OUT) :: newrank\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, nnodes, index, edges, newrank",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, nnodes, index, edges, newrank",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, nnodes, index, edges, newrank",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: nnodes\n            INTEGER(c_int), INTENT(IN) :: index(nnodes)\n            INTEGER(c_int), INTENT(IN) :: edges(*)\n            INTEGER(c_int), INTENT(OUT) :: newrank",
      "cshim_cdesc_params": "MPI_Fint comm, int nnodes, const int index[], const int edges[], int* newrank"
    },
    {
      "name": "MPI_Graph_neighbors",
      "base_name": "MPI_Graph_neighbors",
      "pmpi_name": "PMPI_Graph_neighbors",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int rank, int maxneighbors, int neighbors[]",
      "c_args": "comm, rank, maxneighbors, neighbors",
      "fc_params": "MPI_Fint *comm, MPI_Fint *rank, MPI_Fint *maxneighbors, MPI_Fint *neighbors, MPI_Fint *ierror",
      "fc_args": "comm, rank, maxneighbors, neighbors, ierror",
      "f08_par_list": "comm, rank, maxneighbors, neighbors, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: rank, maxneighbors\n    INTEGER, INTENT(OUT) :: neighbors(maxneighbors)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, rank, maxneighbors, neighbors",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, rank, maxneighbors, neighbors",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, rank, maxneighbors, neighbors",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            INTEGER(c_int), VALUE, INTENT(IN) :: maxneighbors\n            INTEGER(c_int), INTENT(OUT) :: neighbors(maxneighbors)",
      "cshim_cdesc_params": "MPI_Fint comm, int rank, int maxneighbors, int neighbors[]"
    },
    {
      "name": "MPI_Graph_neighbors_count",
      "base_name": "MPI_Graph_neighbors_count",
      "pmpi_name": "PMPI_Graph_neighbors_count",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int rank, int* nneighbors",
      "c_args": "comm, rank, nneighbors",
      "fc_params": "MPI_Fint *comm, MPI_Fint *rank, MPI_Fint *nneighbors, MPI_Fint *ierror",
      "fc_args": "comm, rank, nneighbors, ierror",
      "f08_par_list": "comm, rank, nneighbors, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: rank\n    INTEGER, INTENT(OUT) :: nneighbors\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, rank, nneighbors",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, rank, nneighbors",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, rank, nneighbors",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            INTEGER(c_int), INTENT(OUT) :: nneighbors",
      "cshim_cdesc_params": "MPI_Fint comm, int rank, int* nneighbors"
    },
    {
      "name": "MPI_Graphdims_get",
      "base_name": "MPI_Graphdims_get",
      "pmpi_name": "PMPI_Graphdims_get",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int* nnodes, int* nedges",
      "c_args": "comm, nnodes, nedges",
      "fc_params": "MPI_Fint *comm, MPI_Fint *nnodes, MPI_Fint *nedges, MPI_Fint *ierror",
      "fc_args": "comm, nnodes, nedges, ierror",
      "f08_par_list": "comm, nnodes, nedges, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(OUT) :: nnodes, nedges\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, nnodes, nedges",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, nnodes, nedges",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, nnodes, nedges",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: nnodes\n            INTEGER(c_int), INTENT(OUT) :: nedges",
      "cshim_cdesc_params": "MPI_Fint comm, int* nnodes, int* nedges"
    },
    {
      "name": "MPI_Ineighbor_allgather",
      "base_name": "MPI_Ineighbor_allgather",
      "pmpi_name": "PMPI_Ineighbor_allgather",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_allgather_c",
      "base_name": "MPI_Ineighbor_allgather",
      "pmpi_name": "PMPI_Ineighbor_allgather",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_allgatherv",
      "base_name": "MPI_Ineighbor_allgatherv",
      "pmpi_name": "PMPI_Ineighbor_allgatherv",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_allgatherv_c",
      "base_name": "MPI_Ineighbor_allgatherv",
      "pmpi_name": "PMPI_Ineighbor_allgatherv",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_alltoall",
      "base_name": "MPI_Ineighbor_alltoall",
      "pmpi_name": "PMPI_Ineighbor_alltoall",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_alltoall_c",
      "base_name": "MPI_Ineighbor_alltoall",
      "pmpi_name": "PMPI_Ineighbor_alltoall",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_COUNT_KIND, MPI_Request, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_alltoallv",
      "base_name": "MPI_Ineighbor_alltoallv",
      "pmpi_name": "PMPI_Ineighbor_alltoallv",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_alltoallv_c",
      "base_name": "MPI_Ineighbor_alltoallv",
      "pmpi_name": "PMPI_Ineighbor_alltoallv",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_alltoallw",
      "base_name": "MPI_Ineighbor_alltoallw",
      "pmpi_name": "PMPI_Ineighbor_alltoallw",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Comm, MPI_Request, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Dist_graph_neighbors_count",
      "f08_cshim_local_vars": "integer :: indegree, outdegree\n    logical :: weighted",
      "f08_cshim_precall_stmts": "call PMPI_Dist_graph_neighbors_count(comm, indegree, outdegree, weighted)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:outdegree)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:indegree)%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Ineighbor_alltoallw_c",
      "base_name": "MPI_Ineighbor_alltoallw",
      "pmpi_name": "PMPI_Ineighbor_alltoallw",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Dist_graph_neighbors_count",
      "f08_cshim_local_vars": "integer :: indegree, outdegree\n    logical :: weighted",
      "f08_cshim_precall_stmts": "call PMPI_Dist_graph_neighbors_count(comm, indegree, outdegree, weighted)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:outdegree)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:indegree)%MPI_VAL, comm%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_allgather",
      "base_name": "MPI_Neighbor_allgather",
      "pmpi_name": "PMPI_Neighbor_allgather",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_allgather_c",
      "base_name": "MPI_Neighbor_allgather",
      "pmpi_name": "PMPI_Neighbor_allgather",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_allgather_init",
      "base_name": "MPI_Neighbor_allgather_init",
      "pmpi_name": "PMPI_Neighbor_allgather_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_allgather_init_c",
      "base_name": "MPI_Neighbor_allgather_init",
      "pmpi_name": "PMPI_Neighbor_allgather_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_allgatherv",
      "base_name": "MPI_Neighbor_allgatherv",
      "pmpi_name": "PMPI_Neighbor_allgatherv",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_allgatherv_c",
      "base_name": "MPI_Neighbor_allgatherv",
      "pmpi_name": "PMPI_Neighbor_allgatherv",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcounts(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_allgatherv_init",
      "base_name": "MPI_Neighbor_allgatherv_init",
      "pmpi_name": "PMPI_Neighbor_allgatherv_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, displs(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int displs[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_allgatherv_init_c",
      "base_name": "MPI_Neighbor_allgatherv_init",
      "pmpi_name": "PMPI_Neighbor_allgatherv_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *displs, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcounts, displs, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcounts, displs, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: displs(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint displs[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_alltoall",
      "base_name": "MPI_Neighbor_alltoall",
      "pmpi_name": "PMPI_Neighbor_alltoall",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_alltoall_c",
      "base_name": "MPI_Neighbor_alltoall",
      "pmpi_name": "PMPI_Neighbor_alltoall",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_alltoall_init",
      "base_name": "MPI_Neighbor_alltoall_init",
      "pmpi_name": "PMPI_Neighbor_alltoall_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, int sendcount, MPI_Datatype sendtype, void* recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, int sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, int recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_alltoall_init_c",
      "base_name": "MPI_Neighbor_alltoall_init",
      "pmpi_name": "PMPI_Neighbor_alltoall_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, MPI_Count sendcount, MPI_Datatype sendtype, void* recvbuf, MPI_Count recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, MPI_Fint *sendcount, MPI_Fint *sendtype, void* recvbuf, MPI_Fint *recvcount, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcount, recvcount\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcount, sendtype%MPI_VAL, recvbuf, recvcount, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcount, sendtype, recvbuf, recvcount, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: sendcount\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: recvcount\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, MPI_Count sendcount, MPI_Fint sendtype, CFI_cdesc_t * recvbuf, MPI_Count recvcount, MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_alltoallv",
      "base_name": "MPI_Neighbor_alltoallv",
      "pmpi_name": "PMPI_Neighbor_alltoallv",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_alltoallv_c",
      "base_name": "MPI_Neighbor_alltoallv",
      "pmpi_name": "PMPI_Neighbor_alltoallv",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Datatype recvtype, MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Fint recvtype, MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_alltoallv_init",
      "base_name": "MPI_Neighbor_alltoallv_init",
      "pmpi_name": "PMPI_Neighbor_alltoallv_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void* recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_Info, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(c_int), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(c_int), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const int sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const int recvcounts[], const int rdispls[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_alltoallv_init_c",
      "base_name": "MPI_Neighbor_alltoallv_init",
      "pmpi_name": "PMPI_Neighbor_alltoallv_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Datatype sendtype, void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, MPI_Fint *sendtype, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, MPI_Fint *recvtype, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtype%MPI_VAL, recvbuf, recvcounts, rdispls, recvtype%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtype, recvbuf, recvcounts, rdispls, recvtype, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: sendtype\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), VALUE, INTENT(IN) :: recvtype\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], MPI_Fint sendtype, CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], MPI_Fint recvtype, MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_alltoallw",
      "base_name": "MPI_Neighbor_alltoallw",
      "pmpi_name": "PMPI_Neighbor_alltoallw",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER, INTENT(IN) :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Dist_graph_neighbors_count",
      "f08_cshim_local_vars": "integer :: indegree, outdegree\n    logical :: weighted",
      "f08_cshim_precall_stmts": "call PMPI_Dist_graph_neighbors_count(comm, indegree, outdegree, weighted)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:outdegree)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:indegree)%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_alltoallw_c",
      "base_name": "MPI_Neighbor_alltoallw",
      "pmpi_name": "PMPI_Neighbor_alltoallw",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_COUNT_KIND, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN) :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Dist_graph_neighbors_count",
      "f08_cshim_local_vars": "integer :: indegree, outdegree\n    logical :: weighted",
      "f08_cshim_precall_stmts": "call PMPI_Dist_graph_neighbors_count(comm, indegree, outdegree, weighted)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:outdegree)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:indegree)%MPI_VAL, comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm"
    },
    {
      "name": "MPI_Neighbor_alltoallw_init",
      "base_name": "MPI_Neighbor_alltoallw_init",
      "pmpi_name": "PMPI_Neighbor_alltoallw_init",
      "embiggened": false,
      "c_params": "const void* sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Dist_graph_neighbors_count",
      "f08_cshim_local_vars": "integer :: indegree, outdegree\n    logical :: weighted",
      "f08_cshim_precall_stmts": "call PMPI_Dist_graph_neighbors_count(comm, indegree, outdegree, weighted)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:outdegree)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:indegree)%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(c_int), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(c_int), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Neighbor_alltoallw_init_c",
      "base_name": "MPI_Neighbor_alltoallw_init",
      "pmpi_name": "PMPI_Neighbor_alltoallw_init",
      "embiggened": true,
      "c_params": "const void* sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void* recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Info info, MPI_Request* request",
      "c_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "fc_params": "const void* sendbuf, const MPI_Fint *sendcounts, const MPI_Fint *sdispls, const MPI_Fint *sendtypes, void* recvbuf, const MPI_Fint *recvcounts, const MPI_Fint *rdispls, const MPI_Fint *recvtypes, MPI_Fint *comm, MPI_Fint *info, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request, ierror",
      "f08_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Comm, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: sendbuf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*)\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*)\n    TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*)\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: recvbuf\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: PMPI_Dist_graph_neighbors_count",
      "f08_cshim_local_vars": "integer :: indegree, outdegree\n    logical :: weighted",
      "f08_cshim_precall_stmts": "call PMPI_Dist_graph_neighbors_count(comm, indegree, outdegree, weighted)",
      "f08_cshim_args": "sendbuf, sendcounts, sdispls, sendtypes(1:outdegree)%MPI_VAL, recvbuf, recvcounts, rdispls, recvtypes(1:indegree)%MPI_VAL, comm%MPI_VAL, info%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "sendbuf, sendcounts, sdispls, sendtypes, recvbuf, recvcounts, rdispls, recvtypes, comm, info, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: sendbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: sendcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*)\n            integer(c_int), INTENT(IN) :: sendtypes(*)\n            CHOICE_BUFFER_TYPE :: recvbuf\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: recvcounts(*)\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: rdispls(*)\n            integer(c_int), INTENT(IN) :: recvtypes(*)\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * sendbuf, const MPI_Count sendcounts[], const MPI_Aint sdispls[], const MPI_Fint sendtypes[], CFI_cdesc_t * recvbuf, const MPI_Count recvcounts[], const MPI_Aint rdispls[], const MPI_Fint recvtypes[], MPI_Fint comm, MPI_Fint info, MPI_Fint* request"
    },
    {
      "name": "MPI_Topo_test",
      "base_name": "MPI_Topo_test",
      "pmpi_name": "PMPI_Topo_test",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int* status",
      "c_args": "comm, status",
      "fc_params": "MPI_Fint *comm, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "comm, status, ierror",
      "f08_par_list": "comm, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(OUT) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, status",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), INTENT(OUT) :: status",
      "cshim_cdesc_params": "MPI_Fint comm, int* status"
    },
    {
      "name": "MPI_Add_error_class",
      "base_name": "MPI_Add_error_class",
      "pmpi_name": "PMPI_Add_error_class",
      "embiggened": false,
      "c_params": "int* errorclass",
      "c_args": "errorclass",
      "fc_params": "MPI_Fint *errorclass, MPI_Fint *ierror",
      "fc_args": "errorclass, ierror",
      "f08_par_list": "errorclass, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(OUT) :: errorclass\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errorclass",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "errorclass",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "errorclass",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(OUT) :: errorclass",
      "cshim_cdesc_params": "int* errorclass"
    },
    {
      "name": "MPI_Add_error_code",
      "base_name": "MPI_Add_error_code",
      "pmpi_name": "PMPI_Add_error_code",
      "embiggened": false,
      "c_params": "int errorclass, int* errorcode",
      "c_args": "errorclass, errorcode",
      "fc_params": "MPI_Fint *errorclass, MPI_Fint *errorcode, MPI_Fint *ierror",
      "fc_args": "errorclass, errorcode, ierror",
      "f08_par_list": "errorclass, errorcode, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(IN) :: errorclass\n    INTEGER, INTENT(OUT) :: errorcode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errorclass, errorcode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "errorclass, errorcode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "errorclass, errorcode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: errorclass\n            INTEGER(c_int), INTENT(OUT) :: errorcode",
      "cshim_cdesc_params": "int errorclass, int* errorcode"
    },
    {
      "name": "MPI_Add_error_string",
      "base_name": "MPI_Add_error_string",
      "pmpi_name": "PMPI_Add_error_string",
      "embiggened": false,
      "c_params": "int errorcode, const char* string",
      "c_args": "errorcode, string",
      "fc_params": "MPI_Fint *errorcode, const char* string, MPI_Fint *ierror, int string_len",
      "fc_args": "errorcode, string, ierror, string_len",
      "f08_par_list": "errorcode, string, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(IN) :: errorcode\n    CHARACTER(LEN=*), INTENT(IN) :: string\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errorcode, string",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: string_c(len_trim(string)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(string, string_c)",
      "f08_cshim_args": "errorcode, string_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "errorcode, string",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: errorcode\n            CHARACTER(kind=c_char), INTENT(IN) :: string(*)",
      "cshim_cdesc_params": "int errorcode, const char* string"
    },
    {
      "name": "MPI_Alloc_mem",
      "base_name": "MPI_Alloc_mem",
      "pmpi_name": "PMPI_Alloc_mem",
      "embiggened": false,
      "c_params": "MPI_Aint size, MPI_Info info, void* baseptr",
      "c_args": "size, info, baseptr",
      "fc_params": "MPI_Fint *size, MPI_Fint *info, void* baseptr, MPI_Fint *ierror",
      "fc_args": "size, info, baseptr, ierror",
      "f08_par_list": "size, info, baseptr, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(C_PTR), INTENT(OUT) :: baseptr\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "size, info, baseptr",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "size, info%MPI_VAL, baseptr",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "size, info, baseptr",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: size\n            integer(c_int), VALUE, INTENT(IN) :: info\n            TYPE(c_ptr), INTENT(OUT) :: baseptr",
      "cshim_cdesc_params": "MPI_Aint size, MPI_Fint info, void* baseptr"
    },
    {
      "name": "MPI_Comm_call_errhandler",
      "base_name": "MPI_Comm_call_errhandler",
      "pmpi_name": "PMPI_Comm_call_errhandler",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int errorcode",
      "c_args": "comm, errorcode",
      "fc_params": "MPI_Fint *comm, MPI_Fint *errorcode, MPI_Fint *ierror",
      "fc_args": "comm, errorcode, ierror",
      "f08_par_list": "comm, errorcode, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: errorcode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, errorcode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, errorcode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, errorcode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: errorcode",
      "cshim_cdesc_params": "MPI_Fint comm, int errorcode"
    },
    {
      "name": "MPI_Comm_create_errhandler",
      "base_name": "MPI_Comm_create_errhandler",
      "pmpi_name": "PMPI_Comm_create_errhandler",
      "embiggened": false,
      "c_params": "MPI_Comm_errhandler_function* comm_errhandler_fn, MPI_Errhandler* errhandler",
      "c_args": "comm_errhandler_fn, errhandler",
      "fc_params": "MPI_Fint *comm_errhandler_fn, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "comm_errhandler_fn, errhandler, ierror",
      "f08_par_list": "comm_errhandler_fn, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm_errhandler_function, MPI_Errhandler",
      "f08_par_decl": "PROCEDURE(MPI_Comm_errhandler_function) :: comm_errhandler_fn\n    TYPE(MPI_Errhandler), INTENT(OUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm_errhandler_fn, errhandler",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_comm_errhandler_fn",
      "f08_cshim_precall_stmts": "cfunptr_comm_errhandler_fn = c_funloc(comm_errhandler_fn)",
      "f08_cshim_args": "cfunptr_comm_errhandler_fn, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm_errhandler_fn, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: comm_errhandler_fn\n            integer(c_int), INTENT(OUT) :: errhandler",
      "cshim_cdesc_params": "MPI_Comm_errhandler_function* comm_errhandler_fn, MPI_Fint* errhandler"
    },
    {
      "name": "MPI_Comm_get_errhandler",
      "base_name": "MPI_Comm_get_errhandler",
      "pmpi_name": "PMPI_Comm_get_errhandler",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Errhandler* errhandler",
      "c_args": "comm, errhandler",
      "fc_params": "MPI_Fint *comm, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "comm, errhandler, ierror",
      "f08_par_list": "comm, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Errhandler), INTENT(OUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint* errhandler"
    },
    {
      "name": "MPI_Comm_set_errhandler",
      "base_name": "MPI_Comm_set_errhandler",
      "pmpi_name": "PMPI_Comm_set_errhandler",
      "embiggened": false,
      "c_params": "MPI_Comm comm, MPI_Errhandler errhandler",
      "c_args": "comm, errhandler",
      "fc_params": "MPI_Fint *comm, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "comm, errhandler, ierror",
      "f08_par_list": "comm, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Errhandler), INTENT(IN) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), VALUE, INTENT(IN) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint comm, MPI_Fint errhandler"
    },
    {
      "name": "MPI_Errhandler_free",
      "base_name": "MPI_Errhandler_free",
      "pmpi_name": "PMPI_Errhandler_free",
      "embiggened": false,
      "c_params": "MPI_Errhandler* errhandler",
      "c_args": "errhandler",
      "fc_params": "MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "errhandler, ierror",
      "f08_par_list": "errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Errhandler), INTENT(INOUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint* errhandler"
    },
    {
      "name": "MPI_Error_class",
      "base_name": "MPI_Error_class",
      "pmpi_name": "PMPI_Error_class",
      "embiggened": false,
      "c_params": "int errorcode, int* errorclass",
      "c_args": "errorcode, errorclass",
      "fc_params": "MPI_Fint *errorcode, MPI_Fint *errorclass, MPI_Fint *ierror",
      "fc_args": "errorcode, errorclass, ierror",
      "f08_par_list": "errorcode, errorclass, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(IN) :: errorcode\n    INTEGER, INTENT(OUT) :: errorclass\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errorcode, errorclass",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "errorcode, errorclass",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "errorcode, errorclass",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: errorcode\n            INTEGER(c_int), INTENT(OUT) :: errorclass",
      "cshim_cdesc_params": "int errorcode, int* errorclass"
    },
    {
      "name": "MPI_Error_string",
      "base_name": "MPI_Error_string",
      "pmpi_name": "PMPI_Error_string",
      "embiggened": false,
      "c_params": "int errorcode, char* string, int* resultlen",
      "c_args": "errorcode, string, resultlen",
      "fc_params": "MPI_Fint *errorcode, char* string, MPI_Fint *resultlen, MPI_Fint *ierror, int string_len",
      "fc_args": "errorcode, string, resultlen, ierror, string_len",
      "f08_par_list": "errorcode, string, resultlen, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_MAX_ERROR_STRING",
      "f08_par_decl": "INTEGER, INTENT(IN) :: errorcode\n    CHARACTER(LEN=MPI_MAX_ERROR_STRING), INTENT(OUT) :: string\n    INTEGER, INTENT(OUT) :: resultlen\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errorcode, string, resultlen",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: string_c(MPI_MAX_ERROR_STRING + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "errorcode, string_c, resultlen",
      "f08_cshim_postcall_stmts": "call string_c2f(string_c, string)",
      "f08_cshim_iface_par_list": "errorcode, string, resultlen",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: errorcode\n            CHARACTER(kind=c_char), INTENT(OUT) :: string(*)\n            INTEGER(c_int), INTENT(OUT) :: resultlen",
      "cshim_cdesc_params": "int errorcode, char* string, int* resultlen"
    },
    {
      "name": "MPI_File_call_errhandler",
      "base_name": "MPI_File_call_errhandler",
      "pmpi_name": "PMPI_File_call_errhandler",
      "embiggened": false,
      "c_params": "MPI_File fh, int errorcode",
      "c_args": "fh, errorcode",
      "fc_params": "MPI_Fint *fh, MPI_Fint *errorcode, MPI_Fint *ierror",
      "fc_args": "fh, errorcode, ierror",
      "f08_par_list": "fh, errorcode, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER, INTENT(IN) :: errorcode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, errorcode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, errorcode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, errorcode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(c_int), VALUE, INTENT(IN) :: errorcode",
      "cshim_cdesc_params": "MPI_Fint fh, int errorcode"
    },
    {
      "name": "MPI_File_create_errhandler",
      "base_name": "MPI_File_create_errhandler",
      "pmpi_name": "PMPI_File_create_errhandler",
      "embiggened": false,
      "c_params": "MPI_File_errhandler_function* file_errhandler_fn, MPI_Errhandler* errhandler",
      "c_args": "file_errhandler_fn, errhandler",
      "fc_params": "MPI_Fint *file_errhandler_fn, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "file_errhandler_fn, errhandler, ierror",
      "f08_par_list": "file_errhandler_fn, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File_errhandler_function, MPI_Errhandler",
      "f08_par_decl": "PROCEDURE(MPI_File_errhandler_function) :: file_errhandler_fn\n    TYPE(MPI_Errhandler), INTENT(OUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "file_errhandler_fn, errhandler",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_file_errhandler_fn",
      "f08_cshim_precall_stmts": "cfunptr_file_errhandler_fn = c_funloc(file_errhandler_fn)",
      "f08_cshim_args": "cfunptr_file_errhandler_fn, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "file_errhandler_fn, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: file_errhandler_fn\n            integer(c_int), INTENT(OUT) :: errhandler",
      "cshim_cdesc_params": "MPI_File_errhandler_function* file_errhandler_fn, MPI_Fint* errhandler"
    },
    {
      "name": "MPI_File_get_errhandler",
      "base_name": "MPI_File_get_errhandler",
      "pmpi_name": "PMPI_File_get_errhandler",
      "embiggened": false,
      "c_params": "MPI_File file, MPI_Errhandler* errhandler",
      "c_args": "file, errhandler",
      "fc_params": "MPI_Fint *file, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "file, errhandler, ierror",
      "f08_par_list": "file, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: file\n    TYPE(MPI_Errhandler), INTENT(OUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "file, errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "file%MPI_VAL, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "file, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: file\n            integer(c_int), INTENT(OUT) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint file, MPI_Fint* errhandler"
    },
    {
      "name": "MPI_File_set_errhandler",
      "base_name": "MPI_File_set_errhandler",
      "pmpi_name": "PMPI_File_set_errhandler",
      "embiggened": false,
      "c_params": "MPI_File file, MPI_Errhandler errhandler",
      "c_args": "file, errhandler",
      "fc_params": "MPI_Fint *file, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "file, errhandler, ierror",
      "f08_par_list": "file, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: file\n    TYPE(MPI_Errhandler), INTENT(IN) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "file, errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "file%MPI_VAL, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "file, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: file\n            integer(c_int), VALUE, INTENT(IN) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint file, MPI_Fint errhandler"
    },
    {
      "name": "MPI_Free_mem",
      "base_name": "MPI_Free_mem",
      "pmpi_name": "PMPI_Free_mem",
      "embiggened": false,
      "c_params": "void* base",
      "c_args": "base",
      "fc_params": "void* base, MPI_Fint *ierror",
      "fc_args": "base, ierror",
      "f08_par_list": "base, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: base\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "base",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "base",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "base",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: base",
      "cshim_cdesc_params": "CFI_cdesc_t * base"
    },
    {
      "name": "MPI_Get_hw_resource_info",
      "base_name": "MPI_Get_hw_resource_info",
      "pmpi_name": "PMPI_Get_hw_resource_info",
      "embiggened": false,
      "c_params": "MPI_Info* hw_info",
      "c_args": "hw_info",
      "fc_params": "MPI_Fint *hw_info, MPI_Fint *ierror",
      "fc_args": "hw_info, ierror",
      "f08_par_list": "hw_info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(OUT) :: hw_info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "hw_info",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "hw_info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "hw_info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(OUT) :: hw_info",
      "cshim_cdesc_params": "MPI_Fint* hw_info"
    },
    {
      "name": "MPI_Get_library_version",
      "base_name": "MPI_Get_library_version",
      "pmpi_name": "PMPI_Get_library_version",
      "embiggened": false,
      "c_params": "char* version, int* resultlen",
      "c_args": "version, resultlen",
      "fc_params": "char* version, MPI_Fint *resultlen, MPI_Fint *ierror, int version_len",
      "fc_args": "version, resultlen, ierror, version_len",
      "f08_par_list": "version, resultlen, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_MAX_LIBRARY_VERSION_STRING",
      "f08_par_decl": "CHARACTER(LEN=MPI_MAX_LIBRARY_VERSION_STRING), INTENT(OUT) :: version\n    INTEGER, INTENT(OUT) :: resultlen\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "version, resultlen",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: version_c(MPI_MAX_LIBRARY_VERSION_STRING + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "version_c, resultlen",
      "f08_cshim_postcall_stmts": "call string_c2f(version_c, version)",
      "f08_cshim_iface_par_list": "version, resultlen",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(OUT) :: version(*)\n            INTEGER(c_int), INTENT(OUT) :: resultlen",
      "cshim_cdesc_params": "char* version, int* resultlen"
    },
    {
      "name": "MPI_Get_processor_name",
      "base_name": "MPI_Get_processor_name",
      "pmpi_name": "PMPI_Get_processor_name",
      "embiggened": false,
      "c_params": "char* name, int* resultlen",
      "c_args": "name, resultlen",
      "fc_params": "char* name, MPI_Fint *resultlen, MPI_Fint *ierror, int name_len",
      "fc_args": "name, resultlen, ierror, name_len",
      "f08_par_list": "name, resultlen, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_MAX_PROCESSOR_NAME",
      "f08_par_decl": "CHARACTER(LEN=MPI_MAX_PROCESSOR_NAME), INTENT(OUT) :: name\n    INTEGER, INTENT(OUT) :: resultlen\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "name, resultlen",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: name_c(MPI_MAX_PROCESSOR_NAME + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "name_c, resultlen",
      "f08_cshim_postcall_stmts": "call string_c2f(name_c, name)",
      "f08_cshim_iface_par_list": "name, resultlen",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(OUT) :: name(*)\n            INTEGER(c_int), INTENT(OUT) :: resultlen",
      "cshim_cdesc_params": "char* name, int* resultlen"
    },
    {
      "name": "MPI_Get_version",
      "base_name": "MPI_Get_version",
      "pmpi_name": "PMPI_Get_version",
      "embiggened": false,
      "c_params": "int* version, int* subversion",
      "c_args": "version, subversion",
      "fc_params": "MPI_Fint *version, MPI_Fint *subversion, MPI_Fint *ierror",
      "fc_args": "version, subversion, ierror",
      "f08_par_list": "version, subversion, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(OUT) :: version, subversion\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "version, subversion",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "version, subversion",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "version, subversion",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(OUT) :: version\n            INTEGER(c_int), INTENT(OUT) :: subversion",
      "cshim_cdesc_params": "int* version, int* subversion"
    },
    {
      "name": "MPI_Remove_error_class",
      "base_name": "MPI_Remove_error_class",
      "pmpi_name": "PMPI_Remove_error_class",
      "embiggened": false,
      "c_params": "int errorclass",
      "c_args": "errorclass",
      "fc_params": "MPI_Fint *errorclass, MPI_Fint *ierror",
      "fc_args": "errorclass, ierror",
      "f08_par_list": "errorclass, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(IN) :: errorclass\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errorclass",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "errorclass",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "errorclass",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: errorclass",
      "cshim_cdesc_params": "int errorclass"
    },
    {
      "name": "MPI_Remove_error_code",
      "base_name": "MPI_Remove_error_code",
      "pmpi_name": "PMPI_Remove_error_code",
      "embiggened": false,
      "c_params": "int errorcode",
      "c_args": "errorcode",
      "fc_params": "MPI_Fint *errorcode, MPI_Fint *ierror",
      "fc_args": "errorcode, ierror",
      "f08_par_list": "errorcode, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(IN) :: errorcode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errorcode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "errorcode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "errorcode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: errorcode",
      "cshim_cdesc_params": "int errorcode"
    },
    {
      "name": "MPI_Remove_error_string",
      "base_name": "MPI_Remove_error_string",
      "pmpi_name": "PMPI_Remove_error_string",
      "embiggened": false,
      "c_params": "int errorcode",
      "c_args": "errorcode",
      "fc_params": "MPI_Fint *errorcode, MPI_Fint *ierror",
      "fc_args": "errorcode, ierror",
      "f08_par_list": "errorcode, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(IN) :: errorcode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "errorcode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "errorcode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "errorcode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: errorcode",
      "cshim_cdesc_params": "int errorcode"
    },
    {
      "name": "MPI_Session_call_errhandler",
      "base_name": "MPI_Session_call_errhandler",
      "pmpi_name": "PMPI_Session_call_errhandler",
      "embiggened": false,
      "c_params": "MPI_Session session, int errorcode",
      "c_args": "session, errorcode",
      "fc_params": "MPI_Fint *session, MPI_Fint *errorcode, MPI_Fint *ierror",
      "fc_args": "session, errorcode, ierror",
      "f08_par_list": "session, errorcode, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    INTEGER, INTENT(IN) :: errorcode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, errorcode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, errorcode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, errorcode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            INTEGER(c_int), VALUE, INTENT(IN) :: errorcode",
      "cshim_cdesc_params": "MPI_Fint session, int errorcode"
    },
    {
      "name": "MPI_Session_create_errhandler",
      "base_name": "MPI_Session_create_errhandler",
      "pmpi_name": "PMPI_Session_create_errhandler",
      "embiggened": false,
      "c_params": "MPI_Session_errhandler_function* session_errhandler_fn, MPI_Errhandler* errhandler",
      "c_args": "session_errhandler_fn, errhandler",
      "fc_params": "MPI_Fint *session_errhandler_fn, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "session_errhandler_fn, errhandler, ierror",
      "f08_par_list": "session_errhandler_fn, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session_errhandler_function, MPI_Errhandler",
      "f08_par_decl": "PROCEDURE(MPI_Session_errhandler_function) :: session_errhandler_fn\n    TYPE(MPI_Errhandler), INTENT(OUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session_errhandler_fn, errhandler",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_session_errhandler_fn",
      "f08_cshim_precall_stmts": "cfunptr_session_errhandler_fn = c_funloc(session_errhandler_fn)",
      "f08_cshim_args": "cfunptr_session_errhandler_fn, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session_errhandler_fn, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: session_errhandler_fn\n            integer(c_int), INTENT(OUT) :: errhandler",
      "cshim_cdesc_params": "MPI_Session_errhandler_function* session_errhandler_fn, MPI_Fint* errhandler"
    },
    {
      "name": "MPI_Session_get_errhandler",
      "base_name": "MPI_Session_get_errhandler",
      "pmpi_name": "PMPI_Session_get_errhandler",
      "embiggened": false,
      "c_params": "MPI_Session session, MPI_Errhandler* errhandler",
      "c_args": "session, errhandler",
      "fc_params": "MPI_Fint *session, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "session, errhandler, ierror",
      "f08_par_list": "session, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    TYPE(MPI_Errhandler), INTENT(OUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            integer(c_int), INTENT(OUT) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint session, MPI_Fint* errhandler"
    },
    {
      "name": "MPI_Session_set_errhandler",
      "base_name": "MPI_Session_set_errhandler",
      "pmpi_name": "PMPI_Session_set_errhandler",
      "embiggened": false,
      "c_params": "MPI_Session session, MPI_Errhandler errhandler",
      "c_args": "session, errhandler",
      "fc_params": "MPI_Fint *session, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "session, errhandler, ierror",
      "f08_par_list": "session, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    TYPE(MPI_Errhandler), INTENT(IN) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            integer(c_int), VALUE, INTENT(IN) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint session, MPI_Fint errhandler"
    },
    {
      "name": "MPI_Win_call_errhandler",
      "base_name": "MPI_Win_call_errhandler",
      "pmpi_name": "PMPI_Win_call_errhandler",
      "embiggened": false,
      "c_params": "MPI_Win win, int errorcode",
      "c_args": "win, errorcode",
      "fc_params": "MPI_Fint *win, MPI_Fint *errorcode, MPI_Fint *ierror",
      "fc_args": "win, errorcode, ierror",
      "f08_par_list": "win, errorcode, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, INTENT(IN) :: errorcode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, errorcode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, errorcode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, errorcode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            INTEGER(c_int), VALUE, INTENT(IN) :: errorcode",
      "cshim_cdesc_params": "MPI_Fint win, int errorcode"
    },
    {
      "name": "MPI_Win_create_errhandler",
      "base_name": "MPI_Win_create_errhandler",
      "pmpi_name": "PMPI_Win_create_errhandler",
      "embiggened": false,
      "c_params": "MPI_Win_errhandler_function* win_errhandler_fn, MPI_Errhandler* errhandler",
      "c_args": "win_errhandler_fn, errhandler",
      "fc_params": "MPI_Fint *win_errhandler_fn, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "win_errhandler_fn, errhandler, ierror",
      "f08_par_list": "win_errhandler_fn, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win_errhandler_function, MPI_Errhandler",
      "f08_par_decl": "PROCEDURE(MPI_Win_errhandler_function) :: win_errhandler_fn\n    TYPE(MPI_Errhandler), INTENT(OUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win_errhandler_fn, errhandler",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_win_errhandler_fn",
      "f08_cshim_precall_stmts": "cfunptr_win_errhandler_fn = c_funloc(win_errhandler_fn)",
      "f08_cshim_args": "cfunptr_win_errhandler_fn, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win_errhandler_fn, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: win_errhandler_fn\n            integer(c_int), INTENT(OUT) :: errhandler",
      "cshim_cdesc_params": "MPI_Win_errhandler_function* win_errhandler_fn, MPI_Fint* errhandler"
    },
    {
      "name": "MPI_Win_get_errhandler",
      "base_name": "MPI_Win_get_errhandler",
      "pmpi_name": "PMPI_Win_get_errhandler",
      "embiggened": false,
      "c_params": "MPI_Win win, MPI_Errhandler* errhandler",
      "c_args": "win, errhandler",
      "fc_params": "MPI_Fint *win, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "win, errhandler, ierror",
      "f08_par_list": "win, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Errhandler), INTENT(OUT) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint win, MPI_Fint* errhandler"
    },
    {
      "name": "MPI_Win_set_errhandler",
      "base_name": "MPI_Win_set_errhandler",
      "pmpi_name": "PMPI_Win_set_errhandler",
      "embiggened": false,
      "c_params": "MPI_Win win, MPI_Errhandler errhandler",
      "c_args": "win, errhandler",
      "fc_params": "MPI_Fint *win, MPI_Fint *errhandler, MPI_Fint *ierror",
      "fc_args": "win, errhandler, ierror",
      "f08_par_list": "win, errhandler, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Errhandler), INTENT(IN) :: errhandler\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, errhandler",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, errhandler%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, errhandler",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), VALUE, INTENT(IN) :: errhandler",
      "cshim_cdesc_params": "MPI_Fint win, MPI_Fint errhandler"
    },
    {
      "name": "MPI_Info_create",
      "base_name": "MPI_Info_create",
      "pmpi_name": "PMPI_Info_create",
      "embiggened": false,
      "c_params": "MPI_Info* info",
      "c_args": "info",
      "fc_params": "MPI_Fint *info, MPI_Fint *ierror",
      "fc_args": "info, ierror",
      "f08_par_list": "info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(OUT) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(OUT) :: info",
      "cshim_cdesc_params": "MPI_Fint* info"
    },
    {
      "name": "MPI_Info_create_env",
      "base_name": "MPI_Info_create_env",
      "pmpi_name": "PMPI_Info_create_env",
      "embiggened": false,
      "c_params": "int argc, char argv[], MPI_Info* info",
      "c_args": "argc, argv, info",
      "fc_params": "MPI_Fint *info, MPI_Fint *ierror",
      "fc_args": "info, ierror",
      "f08_par_list": "info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(OUT) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "argc, argv, info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_ptr), VALUE, INTENT(in) :: argc\n            TYPE(c_ptr), VALUE, INTENT(in) :: argv\n            integer(c_int), INTENT(OUT) :: info",
      "cshim_cdesc_params": "int argc, char argv[], MPI_Fint* info"
    },
    {
      "name": "MPI_Info_delete",
      "base_name": "MPI_Info_delete",
      "pmpi_name": "PMPI_Info_delete",
      "embiggened": false,
      "c_params": "MPI_Info info, const char* key",
      "c_args": "info, key",
      "fc_params": "MPI_Fint *info, const char* key, MPI_Fint *ierror, int key_len",
      "fc_args": "info, key, ierror, key_len",
      "f08_par_list": "info, key, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    CHARACTER(LEN=*), INTENT(IN) :: key\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, key",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: key_c(len_trim(key)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(key, key_c)",
      "f08_cshim_args": "info%MPI_VAL, key_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "info, key",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(IN) :: key(*)",
      "cshim_cdesc_params": "MPI_Fint info, const char* key"
    },
    {
      "name": "MPI_Info_dup",
      "base_name": "MPI_Info_dup",
      "pmpi_name": "PMPI_Info_dup",
      "embiggened": false,
      "c_params": "MPI_Info info, MPI_Info* newinfo",
      "c_args": "info, newinfo",
      "fc_params": "MPI_Fint *info, MPI_Fint *newinfo, MPI_Fint *ierror",
      "fc_args": "info, newinfo, ierror",
      "f08_par_list": "info, newinfo, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Info), INTENT(OUT) :: newinfo\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, newinfo",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL, newinfo%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "info, newinfo",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: newinfo",
      "cshim_cdesc_params": "MPI_Fint info, MPI_Fint* newinfo"
    },
    {
      "name": "MPI_Info_free",
      "base_name": "MPI_Info_free",
      "pmpi_name": "PMPI_Info_free",
      "embiggened": false,
      "c_params": "MPI_Info* info",
      "c_args": "info",
      "fc_params": "MPI_Fint *info, MPI_Fint *ierror",
      "fc_args": "info, ierror",
      "f08_par_list": "info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(INOUT) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: info",
      "cshim_cdesc_params": "MPI_Fint* info"
    },
    {
      "name": "MPI_Info_get",
      "base_name": "MPI_Info_get",
      "pmpi_name": "PMPI_Info_get",
      "embiggened": false,
      "c_params": "MPI_Info info, const char* key, int valuelen, char* value, int* flag",
      "c_args": "info, key, valuelen, value, flag",
      "fc_params": "MPI_Fint *info, const char* key, MPI_Fint *valuelen, char* value, MPI_Fint *flag, MPI_Fint *ierror, int key_len, int value_len",
      "fc_args": "info, key, valuelen, value, flag, ierror, key_len, value_len",
      "f08_par_list": "info, key, valuelen, value, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    CHARACTER(LEN=*), INTENT(IN) :: key\n    INTEGER, INTENT(IN) :: valuelen\n    CHARACTER(LEN=valuelen), INTENT(OUT) :: value\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, key, valuelen, value, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char, c_int\n    use :: mod_string, only: string_f2c, string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: key_c(len_trim(key)+1)\n    character(kind=c_char) :: value_c(valuelen + 1)\n    integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "call string_f2c(key, key_c)",
      "f08_cshim_args": "info%MPI_VAL, key_c, valuelen, value_c, flag_c",
      "f08_cshim_postcall_stmts": "if (flag_c /= 0) then\n        call string_c2f(value_c, value)\n    endif\n    flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "info, key, valuelen, value, flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(IN) :: key(*)\n            INTEGER(c_int), VALUE, INTENT(IN) :: valuelen\n            CHARACTER(kind=c_char), INTENT(OUT) :: value(*)\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint info, const char* key, int valuelen, char* value, int* flag"
    },
    {
      "name": "MPI_Info_get_nkeys",
      "base_name": "MPI_Info_get_nkeys",
      "pmpi_name": "PMPI_Info_get_nkeys",
      "embiggened": false,
      "c_params": "MPI_Info info, int* nkeys",
      "c_args": "info, nkeys",
      "fc_params": "MPI_Fint *info, MPI_Fint *nkeys, MPI_Fint *ierror",
      "fc_args": "info, nkeys, ierror",
      "f08_par_list": "info, nkeys, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, INTENT(OUT) :: nkeys\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, nkeys",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL, nkeys",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "info, nkeys",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), INTENT(OUT) :: nkeys",
      "cshim_cdesc_params": "MPI_Fint info, int* nkeys"
    },
    {
      "name": "MPI_Info_get_nthkey",
      "base_name": "MPI_Info_get_nthkey",
      "pmpi_name": "PMPI_Info_get_nthkey",
      "embiggened": false,
      "c_params": "MPI_Info info, int n, char* key",
      "c_args": "info, n, key",
      "fc_params": "MPI_Fint *info, MPI_Fint *n, char* key, MPI_Fint *ierror, int key_len",
      "fc_args": "info, n, key, ierror, key_len",
      "f08_par_list": "info, n, key, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, INTENT(IN) :: n\n    CHARACTER(LEN=*), INTENT(OUT) :: key\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, n, key",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: key_c(len(key) + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL, n, key_c",
      "f08_cshim_postcall_stmts": "call string_c2f(key_c, key)",
      "f08_cshim_iface_par_list": "info, n, key",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), VALUE, INTENT(IN) :: n\n            CHARACTER(kind=c_char), INTENT(OUT) :: key(*)",
      "cshim_cdesc_params": "MPI_Fint info, int n, char* key"
    },
    {
      "name": "MPI_Info_get_valuelen",
      "base_name": "MPI_Info_get_valuelen",
      "pmpi_name": "PMPI_Info_get_valuelen",
      "embiggened": false,
      "c_params": "MPI_Info info, const char* key, int* valuelen, int* flag",
      "c_args": "info, key, valuelen, flag",
      "fc_params": "MPI_Fint *info, const char* key, MPI_Fint *valuelen, MPI_Fint *flag, MPI_Fint *ierror, int key_len",
      "fc_args": "info, key, valuelen, flag, ierror, key_len",
      "f08_par_list": "info, key, valuelen, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    CHARACTER(LEN=*), INTENT(IN) :: key\n    INTEGER, INTENT(OUT) :: valuelen\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, key, valuelen, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char, c_int\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: key_c(len_trim(key)+1)\n    integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "call string_f2c(key, key_c)",
      "f08_cshim_args": "info%MPI_VAL, key_c, valuelen, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "info, key, valuelen, flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(IN) :: key(*)\n            INTEGER(c_int), INTENT(OUT) :: valuelen\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint info, const char* key, int* valuelen, int* flag"
    },
    {
      "name": "MPI_Info_get_string",
      "base_name": "MPI_Info_get_string",
      "pmpi_name": "PMPI_Info_get_string",
      "embiggened": false,
      "c_params": "MPI_Info info, const char* key, int* buflen, char* value, int* flag",
      "c_args": "info, key, buflen, value, flag",
      "fc_params": "MPI_Fint *info, const char* key, MPI_Fint *buflen, char* value, MPI_Fint *flag, MPI_Fint *ierror, int key_len, int value_len",
      "fc_args": "info, key, buflen, value, flag, ierror, key_len, value_len",
      "f08_par_list": "info, key, buflen, value, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    CHARACTER(LEN=*), INTENT(IN) :: key\n    INTEGER, INTENT(INOUT) :: buflen\n    CHARACTER(LEN=*), INTENT(OUT) :: value\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, key, buflen, value, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char, c_int\n    use :: mod_string, only: string_f2c, string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: key_c(len_trim(key)+1)\n    integer(c_int) :: buflen_c\n    character(kind=c_char) :: value_c(len(value) + 1)\n    integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "call string_f2c(key, key_c)\n    if (buflen > 0) then\n        buflen_c = buflen + 1\n    else\n        buflen_c = 0\n    endif",
      "f08_cshim_args": "info%MPI_VAL, key_c, buflen_c, value_c, flag_c",
      "f08_cshim_postcall_stmts": "if (flag_c /= 0) then\n        if (buflen /= 0) then\n            call string_c2f(value_c, value)\n        endif\n        buflen = buflen_c - 1\n    endif\n    flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "info, key, buflen, value, flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(IN) :: key(*)\n            INTEGER(c_int), INTENT(INOUT) :: buflen\n            CHARACTER(kind=c_char), INTENT(OUT) :: value(*)\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint info, const char* key, int* buflen, char* value, int* flag"
    },
    {
      "name": "MPI_Info_set",
      "base_name": "MPI_Info_set",
      "pmpi_name": "PMPI_Info_set",
      "embiggened": false,
      "c_params": "MPI_Info info, const char* key, const char* value",
      "c_args": "info, key, value",
      "fc_params": "MPI_Fint *info, const char* key, const char* value, MPI_Fint *ierror, int key_len, int value_len",
      "fc_args": "info, key, value, ierror, key_len, value_len",
      "f08_par_list": "info, key, value, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    CHARACTER(LEN=*), INTENT(IN) :: key, value\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, key, value",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: key_c(len_trim(key)+1)\n    character(kind=c_char) :: value_c(len_trim(value)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(key, key_c)\n    call string_f2c(value, value_c)",
      "f08_cshim_args": "info%MPI_VAL, key_c, value_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "info, key, value",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(IN) :: key(*)\n            CHARACTER(kind=c_char), INTENT(IN) :: value(*)",
      "cshim_cdesc_params": "MPI_Fint info, const char* key, const char* value"
    },
    {
      "name": "MPI_Abort",
      "base_name": "MPI_Abort",
      "pmpi_name": "PMPI_Abort",
      "embiggened": false,
      "c_params": "MPI_Comm comm, int errorcode",
      "c_args": "comm, errorcode",
      "fc_params": "MPI_Fint *comm, MPI_Fint *errorcode, MPI_Fint *ierror",
      "fc_args": "comm, errorcode, ierror",
      "f08_par_list": "comm, errorcode, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    INTEGER, INTENT(IN) :: errorcode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, errorcode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL, errorcode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, errorcode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            INTEGER(c_int), VALUE, INTENT(IN) :: errorcode",
      "cshim_cdesc_params": "MPI_Fint comm, int errorcode"
    },
    {
      "name": "MPI_Close_port",
      "base_name": "MPI_Close_port",
      "pmpi_name": "PMPI_Close_port",
      "embiggened": false,
      "c_params": "const char* port_name",
      "c_args": "port_name",
      "fc_params": "const char* port_name, MPI_Fint *ierror, int port_name_len",
      "fc_args": "port_name, ierror, port_name_len",
      "f08_par_list": "port_name, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: port_name\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "port_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: port_name_c(len_trim(port_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(port_name, port_name_c)",
      "f08_cshim_args": "port_name_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "port_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: port_name(*)",
      "cshim_cdesc_params": "const char* port_name"
    },
    {
      "name": "MPI_Comm_accept",
      "base_name": "MPI_Comm_accept",
      "pmpi_name": "PMPI_Comm_accept",
      "embiggened": false,
      "c_params": "const char* port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm* newcomm",
      "c_args": "port_name, info, root, comm, newcomm",
      "fc_params": "const char* port_name, MPI_Fint *info, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *newcomm, MPI_Fint *ierror, int port_name_len",
      "fc_args": "port_name, info, root, comm, newcomm, ierror, port_name_len",
      "f08_par_list": "port_name, info, root, comm, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: port_name\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "port_name, info, root, comm, newcomm",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: port_name_c(len_trim(port_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(port_name, port_name_c)",
      "f08_cshim_args": "port_name_c, info%MPI_VAL, root, comm%MPI_VAL, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "port_name, info, root, comm, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: port_name(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "const char* port_name, MPI_Fint info, int root, MPI_Fint comm, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_connect",
      "base_name": "MPI_Comm_connect",
      "pmpi_name": "PMPI_Comm_connect",
      "embiggened": false,
      "c_params": "const char* port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm* newcomm",
      "c_args": "port_name, info, root, comm, newcomm",
      "fc_params": "const char* port_name, MPI_Fint *info, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *newcomm, MPI_Fint *ierror, int port_name_len",
      "fc_args": "port_name, info, root, comm, newcomm, ierror, port_name_len",
      "f08_par_list": "port_name, info, root, comm, newcomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: port_name\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, INTENT(IN) :: root\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Comm), INTENT(OUT) :: newcomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "port_name, info, root, comm, newcomm",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: port_name_c(len_trim(port_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(port_name, port_name_c)",
      "f08_cshim_args": "port_name_c, info%MPI_VAL, root, comm%MPI_VAL, newcomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "port_name, info, root, comm, newcomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: port_name(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: newcomm",
      "cshim_cdesc_params": "const char* port_name, MPI_Fint info, int root, MPI_Fint comm, MPI_Fint* newcomm"
    },
    {
      "name": "MPI_Comm_disconnect",
      "base_name": "MPI_Comm_disconnect",
      "pmpi_name": "PMPI_Comm_disconnect",
      "embiggened": false,
      "c_params": "MPI_Comm* comm",
      "c_args": "comm",
      "fc_params": "MPI_Fint *comm, MPI_Fint *ierror",
      "fc_args": "comm, ierror",
      "f08_par_list": "comm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(INOUT) :: comm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "comm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: comm",
      "cshim_cdesc_params": "MPI_Fint* comm"
    },
    {
      "name": "MPI_Comm_get_parent",
      "base_name": "MPI_Comm_get_parent",
      "pmpi_name": "PMPI_Comm_get_parent",
      "embiggened": false,
      "c_params": "MPI_Comm* parent",
      "c_args": "parent",
      "fc_params": "MPI_Fint *parent, MPI_Fint *ierror",
      "fc_args": "parent, ierror",
      "f08_par_list": "parent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(OUT) :: parent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "parent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "parent%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "parent",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(OUT) :: parent",
      "cshim_cdesc_params": "MPI_Fint* parent"
    },
    {
      "name": "MPI_Comm_join",
      "base_name": "MPI_Comm_join",
      "pmpi_name": "PMPI_Comm_join",
      "embiggened": false,
      "c_params": "int fd, MPI_Comm* intercomm",
      "c_args": "fd, intercomm",
      "fc_params": "MPI_Fint *fd, MPI_Fint *intercomm, MPI_Fint *ierror",
      "fc_args": "fd, intercomm, ierror",
      "f08_par_list": "fd, intercomm, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Comm",
      "f08_par_decl": "INTEGER, INTENT(IN) :: fd\n    TYPE(MPI_Comm), INTENT(OUT) :: intercomm\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fd, intercomm",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fd, intercomm%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fd, intercomm",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: fd\n            integer(c_int), INTENT(OUT) :: intercomm",
      "cshim_cdesc_params": "int fd, MPI_Fint* intercomm"
    },
    {
      "name": "MPI_Comm_spawn",
      "base_name": "MPI_Comm_spawn",
      "pmpi_name": "PMPI_Comm_spawn",
      "embiggened": false,
      "c_params": "const char* command, char* argv[], int maxprocs, MPI_Info info, int root, MPI_Comm comm, MPI_Comm* intercomm, int array_of_errcodes[]",
      "c_args": "command, argv, maxprocs, info, root, comm, intercomm, array_of_errcodes",
      "fc_params": "const char* command, char* argv[], MPI_Fint *maxprocs, MPI_Fint *info, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *intercomm, MPI_Fint *array_of_errcodes, MPI_Fint *ierror, int command_len, int argv_len",
      "fc_args": "command, argv, maxprocs, info, root, comm, intercomm, array_of_errcodes, ierror, command_len, argv_len",
      "f08_par_list": "command, argv, maxprocs, info, root, comm, intercomm, array_of_errcodes, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: command, argv(*)\n    INTEGER, INTENT(IN) :: maxprocs, root\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Comm), INTENT(OUT) :: intercomm\n    INTEGER :: array_of_errcodes(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "command, argv, maxprocs, info, root, comm, intercomm, array_of_errcodes",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: command_c(len_trim(command)+1)\n    character(kind=c_char) :: argv_c(len_trim(argv)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(command, command_c)\n    call string_f2c(argv, argv_c)",
      "f08_cshim_args": "command_c, argv_c, maxprocs, info%MPI_VAL, root, comm%MPI_VAL, intercomm%MPI_VAL, array_of_errcodes",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "command, argv, maxprocs, info, root, comm, intercomm, array_of_errcodes",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_ptr, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: command(*)\n            TYPE(c_ptr), VALUE, INTENT(in) :: argv\n            INTEGER(c_int), VALUE, INTENT(IN) :: maxprocs\n            integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: intercomm\n            INTEGER(c_int) :: array_of_errcodes(*)",
      "cshim_cdesc_params": ""
    },
    {
      "name": "MPI_Comm_spawn_multiple",
      "base_name": "MPI_Comm_spawn_multiple",
      "pmpi_name": "PMPI_Comm_spawn_multiple",
      "embiggened": false,
      "c_params": "int count, char* array_of_commands[], char** array_of_argv[], const int array_of_maxprocs[], const MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm* intercomm, int array_of_errcodes[]",
      "c_args": "count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes",
      "fc_params": "MPI_Fint *count, char* array_of_commands[], char** array_of_argv[], const MPI_Fint *array_of_maxprocs, const MPI_Fint *array_of_info, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *intercomm, MPI_Fint *array_of_errcodes, MPI_Fint *ierror, int array_of_commands_len, int array_of_argv_len",
      "fc_args": "count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes, ierror, array_of_commands_len, array_of_argv_len",
      "f08_par_list": "count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm",
      "f08_par_decl": "INTEGER, INTENT(IN) :: count, array_of_maxprocs(*), root\n    CHARACTER(LEN=*), INTENT(IN) :: array_of_commands(*), array_of_argv(count, *)\n    TYPE(MPI_Info), INTENT(IN) :: array_of_info(*)\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Comm), INTENT(OUT) :: intercomm\n    INTEGER :: array_of_errcodes(*)\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: array_of_commands_c(len_trim(array_of_commands)+1)\n    character(kind=c_char) :: array_of_argv_c(len_trim(array_of_argv)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(array_of_commands, array_of_commands_c)\n    call string_f2c(array_of_argv, array_of_argv_c)",
      "f08_cshim_args": "count, array_of_commands_c, array_of_argv_c, array_of_maxprocs, array_of_info%MPI_VAL, root, comm%MPI_VAL, intercomm%MPI_VAL, array_of_errcodes",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_ptr, c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: count\n            TYPE(c_ptr), VALUE, INTENT(in) :: array_of_commands\n            TYPE(c_ptr), VALUE, INTENT(in) :: array_of_argv\n            INTEGER(c_int), INTENT(IN) :: array_of_maxprocs(*)\n            integer(c_int), INTENT(IN) :: array_of_info(*)\n            INTEGER(c_int), VALUE, INTENT(IN) :: root\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: intercomm\n            INTEGER(c_int) :: array_of_errcodes(*)",
      "cshim_cdesc_params": ""
    },
    {
      "name": "MPI_Finalize",
      "base_name": "MPI_Finalize",
      "pmpi_name": "PMPI_Finalize",
      "embiggened": false,
      "c_params": "",
      "c_args": "",
      "fc_params": "MPI_Fint *ierror",
      "fc_args": "ierror",
      "f08_par_list": "ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "",
      "cshim_cdesc_params": ""
    },
    {
      "name": "MPI_Finalized",
      "base_name": "MPI_Finalized",
      "pmpi_name": "PMPI_Finalized",
      "embiggened": false,
      "c_params": "int* flag",
      "c_args": "flag",
      "fc_params": "MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "flag, ierror",
      "f08_par_list": "flag, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "int* flag"
    },
    {
      "name": "MPI_Init",
      "base_name": "MPI_Init",
      "pmpi_name": "PMPI_Init",
      "embiggened": false,
      "c_params": "int* argc, char*** argv",
      "c_args": "argc, argv",
      "fc_params": "MPI_Fint *ierror",
      "fc_args": "ierror",
      "f08_par_list": "ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "argc, argv",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_ptr), VALUE, INTENT(in) :: argc\n            TYPE(c_ptr), VALUE, INTENT(in) :: argv",
      "cshim_cdesc_params": "int* argc, char*** argv"
    },
    {
      "name": "MPI_Init_thread",
      "base_name": "MPI_Init_thread",
      "pmpi_name": "PMPI_Init_thread",
      "embiggened": false,
      "c_params": "int* argc, char*** argv, int required, int* provided",
      "c_args": "argc, argv, required, provided",
      "fc_params": "MPI_Fint *required, MPI_Fint *provided, MPI_Fint *ierror",
      "fc_args": "required, provided, ierror",
      "f08_par_list": "required, provided, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(IN) :: required\n    INTEGER, INTENT(OUT) :: provided\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "required, provided",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "required, provided",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "argc, argv, required, provided",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int",
      "f08_cshim_iface_par_decl": "TYPE(c_ptr), VALUE, INTENT(in) :: argc\n            TYPE(c_ptr), VALUE, INTENT(in) :: argv\n            INTEGER(c_int), VALUE, INTENT(IN) :: required\n            INTEGER(c_int), INTENT(OUT) :: provided",
      "cshim_cdesc_params": "int* argc, char*** argv, int required, int* provided"
    },
    {
      "name": "MPI_Initialized",
      "base_name": "MPI_Initialized",
      "pmpi_name": "PMPI_Initialized",
      "embiggened": false,
      "c_params": "int* flag",
      "c_args": "flag",
      "fc_params": "MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "flag, ierror",
      "f08_par_list": "flag, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "int* flag"
    },
    {
      "name": "MPI_Is_thread_main",
      "base_name": "MPI_Is_thread_main",
      "pmpi_name": "PMPI_Is_thread_main",
      "embiggened": false,
      "c_params": "int* flag",
      "c_args": "flag",
      "fc_params": "MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "flag, ierror",
      "f08_par_list": "flag, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "int* flag"
    },
    {
      "name": "MPI_Lookup_name",
      "base_name": "MPI_Lookup_name",
      "pmpi_name": "PMPI_Lookup_name",
      "embiggened": false,
      "c_params": "const char* service_name, MPI_Info info, char* port_name",
      "c_args": "service_name, info, port_name",
      "fc_params": "const char* service_name, MPI_Fint *info, char* port_name, MPI_Fint *ierror, int service_name_len, int port_name_len",
      "fc_args": "service_name, info, port_name, ierror, service_name_len, port_name_len",
      "f08_par_list": "service_name, info, port_name, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_MAX_PORT_NAME",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: service_name\n    TYPE(MPI_Info), INTENT(IN) :: info\n    CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: port_name\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "service_name, info, port_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c, string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: service_name_c(len_trim(service_name)+1)\n    character(kind=c_char) :: port_name_c(MPI_MAX_PORT_NAME + 1)",
      "f08_cshim_precall_stmts": "call string_f2c(service_name, service_name_c)",
      "f08_cshim_args": "service_name_c, info%MPI_VAL, port_name_c",
      "f08_cshim_postcall_stmts": "call string_c2f(port_name_c, port_name)",
      "f08_cshim_iface_par_list": "service_name, info, port_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: service_name(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(OUT) :: port_name(*)",
      "cshim_cdesc_params": "const char* service_name, MPI_Fint info, char* port_name"
    },
    {
      "name": "MPI_Open_port",
      "base_name": "MPI_Open_port",
      "pmpi_name": "PMPI_Open_port",
      "embiggened": false,
      "c_params": "MPI_Info info, char* port_name",
      "c_args": "info, port_name",
      "fc_params": "MPI_Fint *info, char* port_name, MPI_Fint *ierror, int port_name_len",
      "fc_args": "info, port_name, ierror, port_name_len",
      "f08_par_list": "info, port_name, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_MAX_PORT_NAME",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: port_name\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, port_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: port_name_c(MPI_MAX_PORT_NAME + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL, port_name_c",
      "f08_cshim_postcall_stmts": "call string_c2f(port_name_c, port_name)",
      "f08_cshim_iface_par_list": "info, port_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(OUT) :: port_name(*)",
      "cshim_cdesc_params": "MPI_Fint info, char* port_name"
    },
    {
      "name": "MPI_Publish_name",
      "base_name": "MPI_Publish_name",
      "pmpi_name": "PMPI_Publish_name",
      "embiggened": false,
      "c_params": "const char* service_name, MPI_Info info, const char* port_name",
      "c_args": "service_name, info, port_name",
      "fc_params": "const char* service_name, MPI_Fint *info, const char* port_name, MPI_Fint *ierror, int service_name_len, int port_name_len",
      "fc_args": "service_name, info, port_name, ierror, service_name_len, port_name_len",
      "f08_par_list": "service_name, info, port_name, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: service_name, port_name\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "service_name, info, port_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: service_name_c(len_trim(service_name)+1)\n    character(kind=c_char) :: port_name_c(len_trim(port_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(service_name, service_name_c)\n    call string_f2c(port_name, port_name_c)",
      "f08_cshim_args": "service_name_c, info%MPI_VAL, port_name_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "service_name, info, port_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: service_name(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(IN) :: port_name(*)",
      "cshim_cdesc_params": "const char* service_name, MPI_Fint info, const char* port_name"
    },
    {
      "name": "MPI_Query_thread",
      "base_name": "MPI_Query_thread",
      "pmpi_name": "PMPI_Query_thread",
      "embiggened": false,
      "c_params": "int* provided",
      "c_args": "provided",
      "fc_params": "MPI_Fint *provided, MPI_Fint *ierror",
      "fc_args": "provided, ierror",
      "f08_par_list": "provided, ierror",
      "f08_use_stmts": "",
      "f08_par_decl": "INTEGER, INTENT(OUT) :: provided\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "provided",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "provided",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "provided",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), INTENT(OUT) :: provided",
      "cshim_cdesc_params": "int* provided"
    },
    {
      "name": "MPI_Session_finalize",
      "base_name": "MPI_Session_finalize",
      "pmpi_name": "PMPI_Session_finalize",
      "embiggened": false,
      "c_params": "MPI_Session* session",
      "c_args": "session",
      "fc_params": "MPI_Fint *session, MPI_Fint *ierror",
      "fc_args": "session, ierror",
      "f08_par_list": "session, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(INOUT) :: session\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: session",
      "cshim_cdesc_params": "MPI_Fint* session"
    },
    {
      "name": "MPI_Session_get_info",
      "base_name": "MPI_Session_get_info",
      "pmpi_name": "PMPI_Session_get_info",
      "embiggened": false,
      "c_params": "MPI_Session session, MPI_Info* info_used",
      "c_args": "session, info_used",
      "fc_params": "MPI_Fint *session, MPI_Fint *info_used, MPI_Fint *ierror",
      "fc_args": "session, info_used, ierror",
      "f08_par_list": "session, info_used, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Info",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    TYPE(MPI_Info), INTENT(OUT) :: info_used\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, info_used",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, info_used%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, info_used",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            integer(c_int), INTENT(OUT) :: info_used",
      "cshim_cdesc_params": "MPI_Fint session, MPI_Fint* info_used"
    },
    {
      "name": "MPI_Session_get_nth_pset",
      "base_name": "MPI_Session_get_nth_pset",
      "pmpi_name": "PMPI_Session_get_nth_pset",
      "embiggened": false,
      "c_params": "MPI_Session session, MPI_Info info, int n, int* pset_len, char* pset_name",
      "c_args": "session, info, n, pset_len, pset_name",
      "fc_params": "MPI_Fint *session, MPI_Fint *info, MPI_Fint *n, MPI_Fint *pset_len, char* pset_name, MPI_Fint *ierror, int pset_name_len",
      "fc_args": "session, info, n, pset_len, pset_name, ierror, pset_name_len",
      "f08_par_list": "session, info, n, pset_len, pset_name, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Info",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, INTENT(IN) :: n\n    INTEGER, INTENT(INOUT) :: pset_len\n    CHARACTER(LEN=*), INTENT(OUT) :: pset_name\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, info, n, pset_len, pset_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: pset_name_c(len(pset_name) + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, info%MPI_VAL, n, pset_len, pset_name_c",
      "f08_cshim_postcall_stmts": "call string_c2f(pset_name_c, pset_name)",
      "f08_cshim_iface_par_list": "session, info, n, pset_len, pset_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), VALUE, INTENT(IN) :: n\n            INTEGER(c_int), INTENT(INOUT) :: pset_len\n            CHARACTER(kind=c_char), INTENT(OUT) :: pset_name(*)",
      "cshim_cdesc_params": "MPI_Fint session, MPI_Fint info, int n, int* pset_len, char* pset_name"
    },
    {
      "name": "MPI_Session_get_num_psets",
      "base_name": "MPI_Session_get_num_psets",
      "pmpi_name": "PMPI_Session_get_num_psets",
      "embiggened": false,
      "c_params": "MPI_Session session, MPI_Info info, int* npset_names",
      "c_args": "session, info, npset_names",
      "fc_params": "MPI_Fint *session, MPI_Fint *info, MPI_Fint *npset_names, MPI_Fint *ierror",
      "fc_args": "session, info, npset_names, ierror",
      "f08_par_list": "session, info, npset_names, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Info",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, INTENT(OUT) :: npset_names\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, info, npset_names",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "session%MPI_VAL, info%MPI_VAL, npset_names",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, info, npset_names",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            integer(c_int), VALUE, INTENT(IN) :: info\n            INTEGER(c_int), INTENT(OUT) :: npset_names",
      "cshim_cdesc_params": "MPI_Fint session, MPI_Fint info, int* npset_names"
    },
    {
      "name": "MPI_Session_get_pset_info",
      "base_name": "MPI_Session_get_pset_info",
      "pmpi_name": "PMPI_Session_get_pset_info",
      "embiggened": false,
      "c_params": "MPI_Session session, const char* pset_name, MPI_Info* info",
      "c_args": "session, pset_name, info",
      "fc_params": "MPI_Fint *session, const char* pset_name, MPI_Fint *info, MPI_Fint *ierror, int pset_name_len",
      "fc_args": "session, pset_name, info, ierror, pset_name_len",
      "f08_par_list": "session, pset_name, info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Info",
      "f08_par_decl": "TYPE(MPI_Session), INTENT(IN) :: session\n    CHARACTER(LEN=*), INTENT(IN) :: pset_name\n    TYPE(MPI_Info), INTENT(OUT) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "session, pset_name, info",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: pset_name_c(len_trim(pset_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(pset_name, pset_name_c)",
      "f08_cshim_args": "session%MPI_VAL, pset_name_c, info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "session, pset_name, info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: session\n            CHARACTER(kind=c_char), INTENT(IN) :: pset_name(*)\n            integer(c_int), INTENT(OUT) :: info",
      "cshim_cdesc_params": "MPI_Fint session, const char* pset_name, MPI_Fint* info"
    },
    {
      "name": "MPI_Session_init",
      "base_name": "MPI_Session_init",
      "pmpi_name": "PMPI_Session_init",
      "embiggened": false,
      "c_params": "MPI_Info info, MPI_Errhandler errhandler, MPI_Session* session",
      "c_args": "info, errhandler, session",
      "fc_params": "MPI_Fint *info, MPI_Fint *errhandler, MPI_Fint *session, MPI_Fint *ierror",
      "fc_args": "info, errhandler, session, ierror",
      "f08_par_list": "info, errhandler, session, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Session, MPI_Info, MPI_Errhandler",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Errhandler), INTENT(IN) :: errhandler\n    TYPE(MPI_Session), INTENT(OUT) :: session\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, errhandler, session",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL, errhandler%MPI_VAL, session%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "info, errhandler, session",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: errhandler\n            integer(c_int), INTENT(OUT) :: session",
      "cshim_cdesc_params": "MPI_Fint info, MPI_Fint errhandler, MPI_Fint* session"
    },
    {
      "name": "MPI_Unpublish_name",
      "base_name": "MPI_Unpublish_name",
      "pmpi_name": "PMPI_Unpublish_name",
      "embiggened": false,
      "c_params": "const char* service_name, MPI_Info info, const char* port_name",
      "c_args": "service_name, info, port_name",
      "fc_params": "const char* service_name, MPI_Fint *info, const char* port_name, MPI_Fint *ierror, int service_name_len, int port_name_len",
      "fc_args": "service_name, info, port_name, ierror, service_name_len, port_name_len",
      "f08_par_list": "service_name, info, port_name, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: service_name, port_name\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "service_name, info, port_name",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: service_name_c(len_trim(service_name)+1)\n    character(kind=c_char) :: port_name_c(len_trim(port_name)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(service_name, service_name_c)\n    call string_f2c(port_name, port_name_c)",
      "f08_cshim_args": "service_name_c, info%MPI_VAL, port_name_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "service_name, info, port_name",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: service_name(*)\n            integer(c_int), VALUE, INTENT(IN) :: info\n            CHARACTER(kind=c_char), INTENT(IN) :: port_name(*)",
      "cshim_cdesc_params": "const char* service_name, MPI_Fint info, const char* port_name"
    },
    {
      "name": "MPI_Accumulate",
      "base_name": "MPI_Accumulate",
      "pmpi_name": "PMPI_Accumulate",
      "embiggened": false,
      "c_params": "const void* origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *op, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER, INTENT(IN) :: origin_count, target_rank, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, op%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, int origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Fint target_datatype, MPI_Fint op, MPI_Fint win"
    },
    {
      "name": "MPI_Accumulate_c",
      "base_name": "MPI_Accumulate",
      "pmpi_name": "PMPI_Accumulate",
      "embiggened": true,
      "c_params": "const void* origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *op, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: origin_count, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, op%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, MPI_Count origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Fint target_datatype, MPI_Fint op, MPI_Fint win"
    },
    {
      "name": "MPI_Compare_and_swap",
      "base_name": "MPI_Compare_and_swap",
      "pmpi_name": "PMPI_Compare_and_swap",
      "embiggened": false,
      "c_params": "const void* origin_addr, const void* compare_addr, void* result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win",
      "c_args": "origin_addr, compare_addr, result_addr, datatype, target_rank, target_disp, win",
      "fc_params": "const void* origin_addr, const void* compare_addr, void* result_addr, MPI_Fint *datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, compare_addr, result_addr, datatype, target_rank, target_disp, win, ierror",
      "f08_par_list": "origin_addr, compare_addr, result_addr, datatype, target_rank, target_disp, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Win, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr, compare_addr\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: result_addr\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, compare_addr, result_addr, datatype, target_rank, target_disp, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, compare_addr, result_addr, datatype%MPI_VAL, target_rank, target_disp, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, compare_addr, result_addr, datatype, target_rank, target_disp, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: compare_addr\n            CHOICE_BUFFER_TYPE :: result_addr\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, CFI_cdesc_t * compare_addr, CFI_cdesc_t * result_addr, MPI_Fint datatype, int target_rank, MPI_Aint target_disp, MPI_Fint win"
    },
    {
      "name": "MPI_Fetch_and_op",
      "base_name": "MPI_Fetch_and_op",
      "pmpi_name": "PMPI_Fetch_and_op",
      "embiggened": false,
      "c_params": "const void* origin_addr, void* result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win",
      "c_args": "origin_addr, result_addr, datatype, target_rank, target_disp, op, win",
      "fc_params": "const void* origin_addr, void* result_addr, MPI_Fint *datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *op, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, result_addr, datatype, target_rank, target_disp, op, win, ierror",
      "f08_par_list": "origin_addr, result_addr, datatype, target_rank, target_disp, op, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: result_addr\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, result_addr, datatype, target_rank, target_disp, op, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, result_addr, datatype%MPI_VAL, target_rank, target_disp, op%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, result_addr, datatype, target_rank, target_disp, op, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            CHOICE_BUFFER_TYPE :: result_addr\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, CFI_cdesc_t * result_addr, MPI_Fint datatype, int target_rank, MPI_Aint target_disp, MPI_Fint op, MPI_Fint win"
    },
    {
      "name": "MPI_Get",
      "base_name": "MPI_Get",
      "pmpi_name": "PMPI_Get",
      "embiggened": false,
      "c_params": "void* origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "fc_params": "void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Win, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: origin_addr\n    INTEGER, INTENT(IN) :: origin_count, target_rank, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: origin_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, int origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Fint target_datatype, MPI_Fint win"
    },
    {
      "name": "MPI_Get_c",
      "base_name": "MPI_Get",
      "pmpi_name": "PMPI_Get",
      "embiggened": true,
      "c_params": "void* origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Win win",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "fc_params": "void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Win, MPI_COUNT_KIND, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: origin_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: origin_count, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: origin_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, MPI_Count origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Fint target_datatype, MPI_Fint win"
    },
    {
      "name": "MPI_Get_accumulate",
      "base_name": "MPI_Get_accumulate",
      "pmpi_name": "PMPI_Get_accumulate",
      "embiggened": false,
      "c_params": "const void* origin_addr, int origin_count, MPI_Datatype origin_datatype, void* result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win",
      "c_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, void* result_addr, MPI_Fint *result_count, MPI_Fint *result_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *op, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_Datatype, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, result_datatype, target_datatype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: result_addr\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, result_addr, result_count, result_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, op%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            CHOICE_BUFFER_TYPE :: result_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: result_count\n            integer(c_int), VALUE, INTENT(IN) :: result_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, int origin_count, MPI_Fint origin_datatype, CFI_cdesc_t * result_addr, int result_count, MPI_Fint result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Fint target_datatype, MPI_Fint op, MPI_Fint win"
    },
    {
      "name": "MPI_Get_accumulate_c",
      "base_name": "MPI_Get_accumulate",
      "pmpi_name": "PMPI_Get_accumulate",
      "embiggened": true,
      "c_params": "const void* origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, void* result_addr, MPI_Count result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win",
      "c_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, void* result_addr, MPI_Fint *result_count, MPI_Fint *result_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *op, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: origin_count, result_count, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, result_datatype, target_datatype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: result_addr\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, result_addr, result_count, result_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, op%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            CHOICE_BUFFER_TYPE :: result_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: result_count\n            integer(c_int), VALUE, INTENT(IN) :: result_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, MPI_Count origin_count, MPI_Fint origin_datatype, CFI_cdesc_t * result_addr, MPI_Count result_count, MPI_Fint result_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Fint target_datatype, MPI_Fint op, MPI_Fint win"
    },
    {
      "name": "MPI_Put",
      "base_name": "MPI_Put",
      "pmpi_name": "PMPI_Put",
      "embiggened": false,
      "c_params": "const void* origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Win, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER, INTENT(IN) :: origin_count, target_rank, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, int origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Fint target_datatype, MPI_Fint win"
    },
    {
      "name": "MPI_Put_c",
      "base_name": "MPI_Put",
      "pmpi_name": "PMPI_Put",
      "embiggened": true,
      "c_params": "const void* origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Win win",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Win, MPI_COUNT_KIND, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: origin_count, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, MPI_Count origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Fint target_datatype, MPI_Fint win"
    },
    {
      "name": "MPI_Raccumulate",
      "base_name": "MPI_Raccumulate",
      "pmpi_name": "PMPI_Raccumulate",
      "embiggened": false,
      "c_params": "const void* origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request* request",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *op, MPI_Fint *win, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_Request, MPI_ADDRESS_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER, INTENT(IN) :: origin_count, target_rank, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, op%MPI_VAL, win%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, int origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Fint target_datatype, MPI_Fint op, MPI_Fint win, MPI_Fint* request"
    },
    {
      "name": "MPI_Raccumulate_c",
      "base_name": "MPI_Raccumulate",
      "pmpi_name": "PMPI_Raccumulate",
      "embiggened": true,
      "c_params": "const void* origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request* request",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *op, MPI_Fint *win, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: origin_count, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, op%MPI_VAL, win%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, MPI_Count origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Fint target_datatype, MPI_Fint op, MPI_Fint win, MPI_Fint* request"
    },
    {
      "name": "MPI_Rget",
      "base_name": "MPI_Rget",
      "pmpi_name": "PMPI_Rget",
      "embiggened": false,
      "c_params": "void* origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request* request",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "fc_params": "void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *win, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Win, MPI_Request, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: origin_addr\n    INTEGER, INTENT(IN) :: origin_count, target_rank, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, win%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: origin_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, int origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Fint target_datatype, MPI_Fint win, MPI_Fint* request"
    },
    {
      "name": "MPI_Rget_c",
      "base_name": "MPI_Rget",
      "pmpi_name": "PMPI_Rget",
      "embiggened": true,
      "c_params": "void* origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request* request",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "fc_params": "void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *win, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: origin_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: origin_count, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, win%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: origin_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, MPI_Count origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Fint target_datatype, MPI_Fint win, MPI_Fint* request"
    },
    {
      "name": "MPI_Rget_accumulate",
      "base_name": "MPI_Rget_accumulate",
      "pmpi_name": "PMPI_Rget_accumulate",
      "embiggened": false,
      "c_params": "const void* origin_addr, int origin_count, MPI_Datatype origin_datatype, void* result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request* request",
      "c_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, void* result_addr, MPI_Fint *result_count, MPI_Fint *result_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *op, MPI_Fint *win, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_Request, MPI_ADDRESS_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, result_datatype, target_datatype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: result_addr\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, result_addr, result_count, result_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, op%MPI_VAL, win%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            CHOICE_BUFFER_TYPE :: result_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: result_count\n            integer(c_int), VALUE, INTENT(IN) :: result_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, int origin_count, MPI_Fint origin_datatype, CFI_cdesc_t * result_addr, int result_count, MPI_Fint result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Fint target_datatype, MPI_Fint op, MPI_Fint win, MPI_Fint* request"
    },
    {
      "name": "MPI_Rget_accumulate_c",
      "base_name": "MPI_Rget_accumulate",
      "pmpi_name": "PMPI_Rget_accumulate",
      "embiggened": true,
      "c_params": "const void* origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, void* result_addr, MPI_Count result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request* request",
      "c_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, void* result_addr, MPI_Fint *result_count, MPI_Fint *result_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *op, MPI_Fint *win, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Op, MPI_Win, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: origin_count, result_count, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, result_datatype, target_datatype\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: result_addr\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Op), INTENT(IN) :: op\n    TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, result_addr, result_count, result_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, op%MPI_VAL, win%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, result_addr, result_count, result_datatype, target_rank, target_disp, target_count, target_datatype, op, win, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            CHOICE_BUFFER_TYPE :: result_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: result_count\n            integer(c_int), VALUE, INTENT(IN) :: result_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: op\n            integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, MPI_Count origin_count, MPI_Fint origin_datatype, CFI_cdesc_t * result_addr, MPI_Count result_count, MPI_Fint result_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Fint target_datatype, MPI_Fint op, MPI_Fint win, MPI_Fint* request"
    },
    {
      "name": "MPI_Rput",
      "base_name": "MPI_Rput",
      "pmpi_name": "PMPI_Rput",
      "embiggened": false,
      "c_params": "const void* origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request* request",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *win, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Win, MPI_Request, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER, INTENT(IN) :: origin_count, target_rank, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, win%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(c_int), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, int origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Fint target_datatype, MPI_Fint win, MPI_Fint* request"
    },
    {
      "name": "MPI_Rput_c",
      "base_name": "MPI_Rput",
      "pmpi_name": "PMPI_Rput",
      "embiggened": true,
      "c_params": "const void* origin_addr, MPI_Count origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request* request",
      "c_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "fc_params": "const void* origin_addr, MPI_Fint *origin_count, MPI_Fint *origin_datatype, MPI_Fint *target_rank, MPI_Fint *target_disp, MPI_Fint *target_count, MPI_Fint *target_datatype, MPI_Fint *win, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror",
      "f08_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Request, MPI_ADDRESS_KIND, MPI_COUNT_KIND, MPI_Datatype",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: origin_addr\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: origin_count, target_count\n    TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype\n    INTEGER, INTENT(IN) :: target_rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp\n    TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "origin_addr, origin_count, origin_datatype%MPI_VAL, target_rank, target_disp, target_count, target_datatype%MPI_VAL, win%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "origin_addr, origin_count, origin_datatype, target_rank, target_disp, target_count, target_datatype, win, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t, c_long_long",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE, INTENT(IN) :: origin_addr\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: origin_count\n            integer(c_int), VALUE, INTENT(IN) :: origin_datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: target_rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: target_disp\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: target_count\n            integer(c_int), VALUE, INTENT(IN) :: target_datatype\n            integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "CFI_cdesc_t * origin_addr, MPI_Count origin_count, MPI_Fint origin_datatype, int target_rank, MPI_Aint target_disp, MPI_Count target_count, MPI_Fint target_datatype, MPI_Fint win, MPI_Fint* request"
    },
    {
      "name": "MPI_Win_allocate",
      "base_name": "MPI_Win_allocate",
      "pmpi_name": "PMPI_Win_allocate",
      "embiggened": false,
      "c_params": "MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void* baseptr, MPI_Win* win",
      "c_args": "size, disp_unit, info, comm, baseptr, win",
      "fc_params": "MPI_Fint *size, MPI_Fint *disp_unit, MPI_Fint *info, MPI_Fint *comm, void* baseptr, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "size, disp_unit, info, comm, baseptr, win, ierror",
      "f08_par_list": "size, disp_unit, info, comm, baseptr, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size\n    INTEGER, INTENT(IN) :: disp_unit\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(C_PTR), INTENT(OUT) :: baseptr\n    TYPE(MPI_Win), INTENT(OUT) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "size, disp_unit, info, comm, baseptr, win",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "size, disp_unit, info%MPI_VAL, comm%MPI_VAL, baseptr, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "size, disp_unit, info, comm, baseptr, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: size\n            INTEGER(c_int), VALUE, INTENT(IN) :: disp_unit\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(c_ptr), INTENT(OUT) :: baseptr\n            integer(c_int), INTENT(OUT) :: win",
      "cshim_cdesc_params": "MPI_Aint size, int disp_unit, MPI_Fint info, MPI_Fint comm, void* baseptr, MPI_Fint* win"
    },
    {
      "name": "MPI_Win_allocate_c",
      "base_name": "MPI_Win_allocate",
      "pmpi_name": "PMPI_Win_allocate",
      "embiggened": true,
      "c_params": "MPI_Aint size, MPI_Aint disp_unit, MPI_Info info, MPI_Comm comm, void* baseptr, MPI_Win* win",
      "c_args": "size, disp_unit, info, comm, baseptr, win",
      "fc_params": "MPI_Fint *size, MPI_Fint *disp_unit, MPI_Fint *info, MPI_Fint *comm, void* baseptr, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "size, disp_unit, info, comm, baseptr, win, ierror",
      "f08_par_list": "size, disp_unit, info, comm, baseptr, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size, disp_unit\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(C_PTR), INTENT(OUT) :: baseptr\n    TYPE(MPI_Win), INTENT(OUT) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "size, disp_unit, info, comm, baseptr, win",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "size, disp_unit, info%MPI_VAL, comm%MPI_VAL, baseptr, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "size, disp_unit, info, comm, baseptr, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: size\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: disp_unit\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(c_ptr), INTENT(OUT) :: baseptr\n            integer(c_int), INTENT(OUT) :: win",
      "cshim_cdesc_params": "MPI_Aint size, MPI_Aint disp_unit, MPI_Fint info, MPI_Fint comm, void* baseptr, MPI_Fint* win"
    },
    {
      "name": "MPI_Win_allocate_shared",
      "base_name": "MPI_Win_allocate_shared",
      "pmpi_name": "PMPI_Win_allocate_shared",
      "embiggened": false,
      "c_params": "MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void* baseptr, MPI_Win* win",
      "c_args": "size, disp_unit, info, comm, baseptr, win",
      "fc_params": "MPI_Fint *size, MPI_Fint *disp_unit, MPI_Fint *info, MPI_Fint *comm, void* baseptr, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "size, disp_unit, info, comm, baseptr, win, ierror",
      "f08_par_list": "size, disp_unit, info, comm, baseptr, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size\n    INTEGER, INTENT(IN) :: disp_unit\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(C_PTR), INTENT(OUT) :: baseptr\n    TYPE(MPI_Win), INTENT(OUT) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "size, disp_unit, info, comm, baseptr, win",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "size, disp_unit, info%MPI_VAL, comm%MPI_VAL, baseptr, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "size, disp_unit, info, comm, baseptr, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: size\n            INTEGER(c_int), VALUE, INTENT(IN) :: disp_unit\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(c_ptr), INTENT(OUT) :: baseptr\n            integer(c_int), INTENT(OUT) :: win",
      "cshim_cdesc_params": "MPI_Aint size, int disp_unit, MPI_Fint info, MPI_Fint comm, void* baseptr, MPI_Fint* win"
    },
    {
      "name": "MPI_Win_allocate_shared_c",
      "base_name": "MPI_Win_allocate_shared",
      "pmpi_name": "PMPI_Win_allocate_shared",
      "embiggened": true,
      "c_params": "MPI_Aint size, MPI_Aint disp_unit, MPI_Info info, MPI_Comm comm, void* baseptr, MPI_Win* win",
      "c_args": "size, disp_unit, info, comm, baseptr, win",
      "fc_params": "MPI_Fint *size, MPI_Fint *disp_unit, MPI_Fint *info, MPI_Fint *comm, void* baseptr, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "size, disp_unit, info, comm, baseptr, win, ierror",
      "f08_par_list": "size, disp_unit, info, comm, baseptr, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size, disp_unit\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(C_PTR), INTENT(OUT) :: baseptr\n    TYPE(MPI_Win), INTENT(OUT) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "size, disp_unit, info, comm, baseptr, win",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "size, disp_unit, info%MPI_VAL, comm%MPI_VAL, baseptr, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "size, disp_unit, info, comm, baseptr, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: size\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: disp_unit\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            TYPE(c_ptr), INTENT(OUT) :: baseptr\n            integer(c_int), INTENT(OUT) :: win",
      "cshim_cdesc_params": "MPI_Aint size, MPI_Aint disp_unit, MPI_Fint info, MPI_Fint comm, void* baseptr, MPI_Fint* win"
    },
    {
      "name": "MPI_Win_attach",
      "base_name": "MPI_Win_attach",
      "pmpi_name": "PMPI_Win_attach",
      "embiggened": false,
      "c_params": "MPI_Win win, void* base, MPI_Aint size",
      "c_args": "win, base, size",
      "fc_params": "MPI_Fint *win, void* base, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "win, base, size, ierror",
      "f08_par_list": "win, base, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: base\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, base, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, base, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, base, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            CHOICE_BUFFER_TYPE :: base\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "MPI_Fint win, CFI_cdesc_t * base, MPI_Aint size"
    },
    {
      "name": "MPI_Win_complete",
      "base_name": "MPI_Win_complete",
      "pmpi_name": "PMPI_Win_complete",
      "embiggened": false,
      "c_params": "MPI_Win win",
      "c_args": "win",
      "fc_params": "MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "win, ierror",
      "f08_par_list": "win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "MPI_Fint win"
    },
    {
      "name": "MPI_Win_create",
      "base_name": "MPI_Win_create",
      "pmpi_name": "PMPI_Win_create",
      "embiggened": false,
      "c_params": "void* base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win* win",
      "c_args": "base, size, disp_unit, info, comm, win",
      "fc_params": "void* base, MPI_Fint *size, MPI_Fint *disp_unit, MPI_Fint *info, MPI_Fint *comm, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "base, size, disp_unit, info, comm, win, ierror",
      "f08_par_list": "base, size, disp_unit, info, comm, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: base\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size\n    INTEGER, INTENT(IN) :: disp_unit\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Win), INTENT(OUT) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "base, size, disp_unit, info, comm, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "base, size, disp_unit, info%MPI_VAL, comm%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "base, size, disp_unit, info, comm, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: base\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: size\n            INTEGER(c_int), VALUE, INTENT(IN) :: disp_unit\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * base, MPI_Aint size, int disp_unit, MPI_Fint info, MPI_Fint comm, MPI_Fint* win"
    },
    {
      "name": "MPI_Win_create_c",
      "base_name": "MPI_Win_create",
      "pmpi_name": "PMPI_Win_create",
      "embiggened": true,
      "c_params": "void* base, MPI_Aint size, MPI_Aint disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win* win",
      "c_args": "base, size, disp_unit, info, comm, win",
      "fc_params": "void* base, MPI_Fint *size, MPI_Fint *disp_unit, MPI_Fint *info, MPI_Fint *comm, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "base, size, disp_unit, info, comm, win, ierror",
      "f08_par_list": "base, size, disp_unit, info, comm, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info, MPI_Comm, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: base\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size, disp_unit\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Win), INTENT(OUT) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "base, size, disp_unit, info, comm, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "base, size, disp_unit, info%MPI_VAL, comm%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "base, size, disp_unit, info, comm, win",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHOICE_BUFFER_TYPE :: base\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: size\n            INTEGER(KIND=MPI_ADDRESS_KIND), VALUE, INTENT(IN) :: disp_unit\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: win",
      "cshim_cdesc_params": "CFI_cdesc_t * base, MPI_Aint size, MPI_Aint disp_unit, MPI_Fint info, MPI_Fint comm, MPI_Fint* win"
    },
    {
      "name": "MPI_Win_create_dynamic",
      "base_name": "MPI_Win_create_dynamic",
      "pmpi_name": "PMPI_Win_create_dynamic",
      "embiggened": false,
      "c_params": "MPI_Info info, MPI_Comm comm, MPI_Win* win",
      "c_args": "info, comm, win",
      "fc_params": "MPI_Fint *info, MPI_Fint *comm, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "info, comm, win, ierror",
      "f08_par_list": "info, comm, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info, MPI_Comm",
      "f08_par_decl": "TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_Comm), INTENT(IN) :: comm\n    TYPE(MPI_Win), INTENT(OUT) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "info, comm, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "info%MPI_VAL, comm%MPI_VAL, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "info, comm, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), VALUE, INTENT(IN) :: comm\n            integer(c_int), INTENT(OUT) :: win",
      "cshim_cdesc_params": "MPI_Fint info, MPI_Fint comm, MPI_Fint* win"
    },
    {
      "name": "MPI_Win_detach",
      "base_name": "MPI_Win_detach",
      "pmpi_name": "PMPI_Win_detach",
      "embiggened": false,
      "c_params": "MPI_Win win, const void* base",
      "c_args": "win, base",
      "fc_params": "MPI_Fint *win, const void* base, MPI_Fint *ierror",
      "fc_args": "win, base, ierror",
      "f08_par_list": "win, base, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: base\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, base",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, base",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, base",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            CHOICE_BUFFER_TYPE :: base",
      "cshim_cdesc_params": "MPI_Fint win, CFI_cdesc_t * base"
    },
    {
      "name": "MPI_Win_fence",
      "base_name": "MPI_Win_fence",
      "pmpi_name": "PMPI_Win_fence",
      "embiggened": false,
      "c_params": "int assert, MPI_Win win",
      "c_args": "assert, win",
      "fc_params": "MPI_Fint *assert, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "assert, win, ierror",
      "f08_par_list": "assert, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "INTEGER, INTENT(IN) :: assert\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "assert, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "assert, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "assert, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: assert\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "int assert, MPI_Fint win"
    },
    {
      "name": "MPI_Win_flush",
      "base_name": "MPI_Win_flush",
      "pmpi_name": "PMPI_Win_flush",
      "embiggened": false,
      "c_params": "int rank, MPI_Win win",
      "c_args": "rank, win",
      "fc_params": "MPI_Fint *rank, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "rank, win, ierror",
      "f08_par_list": "rank, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "INTEGER, INTENT(IN) :: rank\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "rank, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "rank, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "rank, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "int rank, MPI_Fint win"
    },
    {
      "name": "MPI_Win_flush_all",
      "base_name": "MPI_Win_flush_all",
      "pmpi_name": "PMPI_Win_flush_all",
      "embiggened": false,
      "c_params": "MPI_Win win",
      "c_args": "win",
      "fc_params": "MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "win, ierror",
      "f08_par_list": "win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "MPI_Fint win"
    },
    {
      "name": "MPI_Win_flush_local",
      "base_name": "MPI_Win_flush_local",
      "pmpi_name": "PMPI_Win_flush_local",
      "embiggened": false,
      "c_params": "int rank, MPI_Win win",
      "c_args": "rank, win",
      "fc_params": "MPI_Fint *rank, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "rank, win, ierror",
      "f08_par_list": "rank, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "INTEGER, INTENT(IN) :: rank\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "rank, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "rank, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "rank, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "int rank, MPI_Fint win"
    },
    {
      "name": "MPI_Win_flush_local_all",
      "base_name": "MPI_Win_flush_local_all",
      "pmpi_name": "PMPI_Win_flush_local_all",
      "embiggened": false,
      "c_params": "MPI_Win win",
      "c_args": "win",
      "fc_params": "MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "win, ierror",
      "f08_par_list": "win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "MPI_Fint win"
    },
    {
      "name": "MPI_Win_free",
      "base_name": "MPI_Win_free",
      "pmpi_name": "PMPI_Win_free",
      "embiggened": false,
      "c_params": "MPI_Win* win",
      "c_args": "win",
      "fc_params": "MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "win, ierror",
      "f08_par_list": "win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(INOUT) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: win",
      "cshim_cdesc_params": "MPI_Fint* win"
    },
    {
      "name": "MPI_Win_get_group",
      "base_name": "MPI_Win_get_group",
      "pmpi_name": "PMPI_Win_get_group",
      "embiggened": false,
      "c_params": "MPI_Win win, MPI_Group* group",
      "c_args": "win, group",
      "fc_params": "MPI_Fint *win, MPI_Fint *group, MPI_Fint *ierror",
      "fc_args": "win, group, ierror",
      "f08_par_list": "win, group, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Group",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Group), INTENT(OUT) :: group\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, group",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, group%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, group",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: group",
      "cshim_cdesc_params": "MPI_Fint win, MPI_Fint* group"
    },
    {
      "name": "MPI_Win_get_info",
      "base_name": "MPI_Win_get_info",
      "pmpi_name": "PMPI_Win_get_info",
      "embiggened": false,
      "c_params": "MPI_Win win, MPI_Info* info_used",
      "c_args": "win, info_used",
      "fc_params": "MPI_Fint *win, MPI_Fint *info_used, MPI_Fint *ierror",
      "fc_args": "win, info_used, ierror",
      "f08_par_list": "win, info_used, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Info), INTENT(OUT) :: info_used\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, info_used",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, info_used%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, info_used",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), INTENT(OUT) :: info_used",
      "cshim_cdesc_params": "MPI_Fint win, MPI_Fint* info_used"
    },
    {
      "name": "MPI_Win_lock",
      "base_name": "MPI_Win_lock",
      "pmpi_name": "PMPI_Win_lock",
      "embiggened": false,
      "c_params": "int lock_type, int rank, int assert, MPI_Win win",
      "c_args": "lock_type, rank, assert, win",
      "fc_params": "MPI_Fint *lock_type, MPI_Fint *rank, MPI_Fint *assert, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "lock_type, rank, assert, win, ierror",
      "f08_par_list": "lock_type, rank, assert, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "INTEGER, INTENT(IN) :: lock_type, rank, assert\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "lock_type, rank, assert, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "lock_type, rank, assert, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "lock_type, rank, assert, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: lock_type\n            INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            INTEGER(c_int), VALUE, INTENT(IN) :: assert\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "int lock_type, int rank, int assert, MPI_Fint win"
    },
    {
      "name": "MPI_Win_lock_all",
      "base_name": "MPI_Win_lock_all",
      "pmpi_name": "PMPI_Win_lock_all",
      "embiggened": false,
      "c_params": "int assert, MPI_Win win",
      "c_args": "assert, win",
      "fc_params": "MPI_Fint *assert, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "assert, win, ierror",
      "f08_par_list": "assert, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "INTEGER, INTENT(IN) :: assert\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "assert, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "assert, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "assert, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: assert\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "int assert, MPI_Fint win"
    },
    {
      "name": "MPI_Win_post",
      "base_name": "MPI_Win_post",
      "pmpi_name": "PMPI_Win_post",
      "embiggened": false,
      "c_params": "MPI_Group group, int assert, MPI_Win win",
      "c_args": "group, assert, win",
      "fc_params": "MPI_Fint *group, MPI_Fint *assert, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "group, assert, win, ierror",
      "f08_par_list": "group, assert, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(IN) :: assert\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, assert, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL, assert, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, assert, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), VALUE, INTENT(IN) :: assert\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "MPI_Fint group, int assert, MPI_Fint win"
    },
    {
      "name": "MPI_Win_set_info",
      "base_name": "MPI_Win_set_info",
      "pmpi_name": "PMPI_Win_set_info",
      "embiggened": false,
      "c_params": "MPI_Win win, MPI_Info info",
      "c_args": "win, info",
      "fc_params": "MPI_Fint *win, MPI_Fint *info, MPI_Fint *ierror",
      "fc_args": "win, info, ierror",
      "f08_par_list": "win, info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Info",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, info",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            integer(c_int), VALUE, INTENT(IN) :: info",
      "cshim_cdesc_params": "MPI_Fint win, MPI_Fint info"
    },
    {
      "name": "MPI_Win_shared_query",
      "base_name": "MPI_Win_shared_query",
      "pmpi_name": "PMPI_Win_shared_query",
      "embiggened": false,
      "c_params": "MPI_Win win, int rank, MPI_Aint* size, int* disp_unit, void* baseptr",
      "c_args": "win, rank, size, disp_unit, baseptr",
      "fc_params": "MPI_Fint *win, MPI_Fint *rank, MPI_Fint *size, MPI_Fint *disp_unit, void* baseptr, MPI_Fint *ierror",
      "fc_args": "win, rank, size, disp_unit, baseptr, ierror",
      "f08_par_list": "win, rank, size, disp_unit, baseptr, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, INTENT(IN) :: rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size\n    INTEGER, INTENT(OUT) :: disp_unit\n    TYPE(C_PTR), INTENT(OUT) :: baseptr\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, rank, size, disp_unit, baseptr",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, rank, size, disp_unit, baseptr",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, rank, size, disp_unit, baseptr",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size\n            INTEGER(c_int), INTENT(OUT) :: disp_unit\n            TYPE(c_ptr), INTENT(OUT) :: baseptr",
      "cshim_cdesc_params": "MPI_Fint win, int rank, MPI_Aint* size, int* disp_unit, void* baseptr"
    },
    {
      "name": "MPI_Win_shared_query_c",
      "base_name": "MPI_Win_shared_query",
      "pmpi_name": "PMPI_Win_shared_query",
      "embiggened": true,
      "c_params": "MPI_Win win, int rank, MPI_Aint* size, MPI_Aint* disp_unit, void* baseptr",
      "c_args": "win, rank, size, disp_unit, baseptr",
      "fc_params": "MPI_Fint *win, MPI_Fint *rank, MPI_Fint *size, MPI_Fint *disp_unit, void* baseptr, MPI_Fint *ierror",
      "fc_args": "win, rank, size, disp_unit, baseptr, ierror",
      "f08_par_list": "win, rank, size, disp_unit, baseptr, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, INTENT(IN) :: rank\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size, disp_unit\n    TYPE(C_PTR), INTENT(OUT) :: baseptr\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, rank, size, disp_unit, baseptr",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_ptr",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, rank, size, disp_unit, baseptr",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win, rank, size, disp_unit, baseptr",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_ptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: disp_unit\n            TYPE(c_ptr), INTENT(OUT) :: baseptr",
      "cshim_cdesc_params": "MPI_Fint win, int rank, MPI_Aint* size, MPI_Aint* disp_unit, void* baseptr"
    },
    {
      "name": "MPI_Win_start",
      "base_name": "MPI_Win_start",
      "pmpi_name": "PMPI_Win_start",
      "embiggened": false,
      "c_params": "MPI_Group group, int assert, MPI_Win win",
      "c_args": "group, assert, win",
      "fc_params": "MPI_Fint *group, MPI_Fint *assert, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "group, assert, win, ierror",
      "f08_par_list": "group, assert, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win, MPI_Group",
      "f08_par_decl": "TYPE(MPI_Group), INTENT(IN) :: group\n    INTEGER, INTENT(IN) :: assert\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "group, assert, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "group%MPI_VAL, assert, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "group, assert, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: group\n            INTEGER(c_int), VALUE, INTENT(IN) :: assert\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "MPI_Fint group, int assert, MPI_Fint win"
    },
    {
      "name": "MPI_Win_sync",
      "base_name": "MPI_Win_sync",
      "pmpi_name": "PMPI_Win_sync",
      "embiggened": false,
      "c_params": "MPI_Win win",
      "c_args": "win",
      "fc_params": "MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "win, ierror",
      "f08_par_list": "win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "MPI_Fint win"
    },
    {
      "name": "MPI_Win_test",
      "base_name": "MPI_Win_test",
      "pmpi_name": "PMPI_Win_test",
      "embiggened": false,
      "c_params": "MPI_Win win, int* flag",
      "c_args": "win, flag",
      "fc_params": "MPI_Fint *win, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "win, flag, ierror",
      "f08_par_list": "win, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "win, flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint win, int* flag"
    },
    {
      "name": "MPI_Win_unlock",
      "base_name": "MPI_Win_unlock",
      "pmpi_name": "PMPI_Win_unlock",
      "embiggened": false,
      "c_params": "int rank, MPI_Win win",
      "c_args": "rank, win",
      "fc_params": "MPI_Fint *rank, MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "rank, win, ierror",
      "f08_par_list": "rank, win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "INTEGER, INTENT(IN) :: rank\n    TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "rank, win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "rank, win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "rank, win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "INTEGER(c_int), VALUE, INTENT(IN) :: rank\n            integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "int rank, MPI_Fint win"
    },
    {
      "name": "MPI_Win_unlock_all",
      "base_name": "MPI_Win_unlock_all",
      "pmpi_name": "PMPI_Win_unlock_all",
      "embiggened": false,
      "c_params": "MPI_Win win",
      "c_args": "win",
      "fc_params": "MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "win, ierror",
      "f08_par_list": "win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "MPI_Fint win"
    },
    {
      "name": "MPI_Win_wait",
      "base_name": "MPI_Win_wait",
      "pmpi_name": "PMPI_Win_wait",
      "embiggened": false,
      "c_params": "MPI_Win win",
      "c_args": "win",
      "fc_params": "MPI_Fint *win, MPI_Fint *ierror",
      "fc_args": "win, ierror",
      "f08_par_list": "win, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Win",
      "f08_par_decl": "TYPE(MPI_Win), INTENT(IN) :: win\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "win",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "win%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "win",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: win",
      "cshim_cdesc_params": "MPI_Fint win"
    },
    {
      "name": "MPI_Grequest_complete",
      "base_name": "MPI_Grequest_complete",
      "pmpi_name": "PMPI_Grequest_complete",
      "embiggened": false,
      "c_params": "MPI_Request request",
      "c_args": "request",
      "fc_params": "MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "request, ierror",
      "f08_par_list": "request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request",
      "f08_par_decl": "TYPE(MPI_Request), INTENT(IN) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: request",
      "cshim_cdesc_params": "MPI_Fint request"
    },
    {
      "name": "MPI_Grequest_start",
      "base_name": "MPI_Grequest_start",
      "pmpi_name": "PMPI_Grequest_start",
      "embiggened": false,
      "c_params": "MPI_Grequest_query_function* query_fn, MPI_Grequest_free_function* free_fn, MPI_Grequest_cancel_function* cancel_fn, void* extra_state, MPI_Request* request",
      "c_args": "query_fn, free_fn, cancel_fn, extra_state, request",
      "fc_params": "MPI_Fint *query_fn, MPI_Fint *free_fn, MPI_Fint *cancel_fn, void* extra_state, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "query_fn, free_fn, cancel_fn, extra_state, request, ierror",
      "f08_par_list": "query_fn, free_fn, cancel_fn, extra_state, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Request, MPI_ADDRESS_KIND, MPI_Grequest_cancel_function, MPI_Grequest_free_function, MPI_Grequest_query_function",
      "f08_par_decl": "PROCEDURE(MPI_Grequest_query_function) :: query_fn\n    PROCEDURE(MPI_Grequest_free_function) :: free_fn\n    PROCEDURE(MPI_Grequest_cancel_function) :: cancel_fn\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "query_fn, free_fn, cancel_fn, extra_state, request",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_funloc",
      "f08_cshim_local_vars": "type(c_funptr) :: cfunptr_query_fn\n    type(c_funptr) :: cfunptr_free_fn\n    type(c_funptr) :: cfunptr_cancel_fn",
      "f08_cshim_precall_stmts": "cfunptr_query_fn = c_funloc(query_fn)\n    cfunptr_free_fn = c_funloc(free_fn)\n    cfunptr_cancel_fn = c_funloc(cancel_fn)",
      "f08_cshim_args": "cfunptr_query_fn, cfunptr_free_fn, cfunptr_cancel_fn, extra_state, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "query_fn, free_fn, cancel_fn, extra_state, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_funptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "TYPE(c_funptr), VALUE :: query_fn\n            TYPE(c_funptr), VALUE :: free_fn\n            TYPE(c_funptr), VALUE :: cancel_fn\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Grequest_query_function* query_fn, MPI_Grequest_free_function* free_fn, MPI_Grequest_cancel_function* cancel_fn, void* extra_state, MPI_Fint* request"
    },
    {
      "name": "MPI_Status_set_cancelled",
      "base_name": "MPI_Status_set_cancelled",
      "pmpi_name": "PMPI_Status_set_cancelled",
      "embiggened": false,
      "c_params": "MPI_Status* status, int flag",
      "c_args": "status, flag",
      "fc_params": "MPI_Fint *status, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "status, flag, ierror",
      "f08_par_list": "status, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n    LOGICAL, INTENT(IN) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "if (flag) then\n        flag_c = 1\n    else\n        flag_c = 0\n    endif",
      "f08_cshim_args": "status, flag_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, flag",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n            INTEGER(c_int), VALUE, INTENT(IN) :: flag",
      "cshim_cdesc_params": "MPI_F08_status* status, int flag"
    },
    {
      "name": "MPI_Status_set_elements",
      "base_name": "MPI_Status_set_elements",
      "pmpi_name": "PMPI_Status_set_elements",
      "embiggened": false,
      "c_params": "MPI_Status* status, MPI_Datatype datatype, int count",
      "c_args": "status, datatype, count",
      "fc_params": "MPI_Fint *status, MPI_Fint *datatype, MPI_Fint *count, MPI_Fint *ierror",
      "fc_args": "status, datatype, count, ierror",
      "f08_par_list": "status, datatype, count, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, INTENT(IN) :: count\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, datatype, count",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, datatype%MPI_VAL, count",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, datatype, count",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(c_int), VALUE, INTENT(IN) :: count",
      "cshim_cdesc_params": "MPI_F08_status* status, MPI_Fint datatype, int count"
    },
    {
      "name": "MPI_Status_set_elements_c",
      "base_name": "MPI_Status_set_elements",
      "pmpi_name": "PMPI_Status_set_elements",
      "embiggened": true,
      "c_params": "MPI_Status* status, MPI_Datatype datatype, MPI_Count count",
      "c_args": "status, datatype, count",
      "fc_params": "MPI_Fint *status, MPI_Fint *datatype, MPI_Fint *count, MPI_Fint *ierror",
      "fc_args": "status, datatype, count, ierror",
      "f08_par_list": "status, datatype, count, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, datatype, count",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, datatype%MPI_VAL, count",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, datatype, count",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count",
      "cshim_cdesc_params": "MPI_F08_status* status, MPI_Fint datatype, MPI_Count count"
    },
    {
      "name": "MPI_Status_set_elements_x",
      "base_name": "MPI_Status_set_elements_x",
      "pmpi_name": "PMPI_Status_set_elements_x",
      "embiggened": false,
      "c_params": "MPI_Status* status, MPI_Datatype datatype, MPI_Count count",
      "c_args": "status, datatype, count",
      "fc_params": "MPI_Fint *status, MPI_Fint *datatype, MPI_Fint *count, MPI_Fint *ierror",
      "fc_args": "status, datatype, count, ierror",
      "f08_par_list": "status, datatype, count, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, datatype, count",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, datatype%MPI_VAL, count",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, datatype, count",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count",
      "cshim_cdesc_params": "MPI_F08_status* status, MPI_Fint datatype, MPI_Count count"
    },
    {
      "name": "MPI_Status_set_error",
      "base_name": "MPI_Status_set_error",
      "pmpi_name": "PMPI_Status_set_error",
      "embiggened": false,
      "c_params": "MPI_Status* status, int err",
      "c_args": "status, err",
      "fc_params": "MPI_Fint *status, MPI_Fint *err, MPI_Fint *ierror",
      "fc_args": "status, err, ierror",
      "f08_par_list": "status, err, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n    INTEGER, INTENT(IN) :: err\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, err",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, err",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, err",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n            INTEGER(c_int), VALUE, INTENT(IN) :: err",
      "cshim_cdesc_params": "MPI_F08_status* status, int err"
    },
    {
      "name": "MPI_Status_set_source",
      "base_name": "MPI_Status_set_source",
      "pmpi_name": "PMPI_Status_set_source",
      "embiggened": false,
      "c_params": "MPI_Status* status, int source",
      "c_args": "status, source",
      "fc_params": "MPI_Fint *status, MPI_Fint *source, MPI_Fint *ierror",
      "fc_args": "status, source, ierror",
      "f08_par_list": "status, source, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n    INTEGER, INTENT(IN) :: source\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, source",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, source",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, source",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n            INTEGER(c_int), VALUE, INTENT(IN) :: source",
      "cshim_cdesc_params": "MPI_F08_status* status, int source"
    },
    {
      "name": "MPI_Status_set_tag",
      "base_name": "MPI_Status_set_tag",
      "pmpi_name": "PMPI_Status_set_tag",
      "embiggened": false,
      "c_params": "MPI_Status* status, int tag",
      "c_args": "status, tag",
      "fc_params": "MPI_Fint *status, MPI_Fint *tag, MPI_Fint *ierror",
      "fc_args": "status, tag, ierror",
      "f08_par_list": "status, tag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status",
      "f08_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n    INTEGER, INTENT(IN) :: tag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "status, tag",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "status, tag",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "status, tag",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "TYPE(MPI_Status), INTENT(INOUT) :: status\n            INTEGER(c_int), VALUE, INTENT(IN) :: tag",
      "cshim_cdesc_params": "MPI_F08_status* status, int tag"
    },
    {
      "name": "MPI_File_close",
      "base_name": "MPI_File_close",
      "pmpi_name": "PMPI_File_close",
      "embiggened": false,
      "c_params": "MPI_File* fh",
      "c_args": "fh",
      "fc_params": "MPI_Fint *fh, MPI_Fint *ierror",
      "fc_args": "fh, ierror",
      "f08_par_list": "fh, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(INOUT) :: fh\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), INTENT(INOUT) :: fh",
      "cshim_cdesc_params": "MPI_Fint* fh"
    },
    {
      "name": "MPI_File_delete",
      "base_name": "MPI_File_delete",
      "pmpi_name": "PMPI_File_delete",
      "embiggened": false,
      "c_params": "const char* filename, MPI_Info info",
      "c_args": "filename, info",
      "fc_params": "const char* filename, MPI_Fint *info, MPI_Fint *ierror, int filename_len",
      "fc_args": "filename, info, ierror, filename_len",
      "f08_par_list": "filename, info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: filename\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "filename, info",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: filename_c(len_trim(filename)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(filename, filename_c)",
      "f08_cshim_args": "filename_c, info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "filename, info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: filename(*)\n            integer(c_int), VALUE, INTENT(IN) :: info",
      "cshim_cdesc_params": "const char* filename, MPI_Fint info"
    },
    {
      "name": "MPI_File_get_amode",
      "base_name": "MPI_File_get_amode",
      "pmpi_name": "PMPI_File_get_amode",
      "embiggened": false,
      "c_params": "MPI_File fh, int* amode",
      "c_args": "fh, amode",
      "fc_params": "MPI_Fint *fh, MPI_Fint *amode, MPI_Fint *ierror",
      "fc_args": "fh, amode, ierror",
      "f08_par_list": "fh, amode, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER, INTENT(OUT) :: amode\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, amode",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, amode",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, amode",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(c_int), INTENT(OUT) :: amode",
      "cshim_cdesc_params": "MPI_Fint fh, int* amode"
    },
    {
      "name": "MPI_File_get_atomicity",
      "base_name": "MPI_File_get_atomicity",
      "pmpi_name": "PMPI_File_get_atomicity",
      "embiggened": false,
      "c_params": "MPI_File fh, int* flag",
      "c_args": "fh, flag",
      "fc_params": "MPI_Fint *fh, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "fh, flag, ierror",
      "f08_par_list": "fh, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    LOGICAL, INTENT(OUT) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, flag_c",
      "f08_cshim_postcall_stmts": "flag = (flag_c /= 0)",
      "f08_cshim_iface_par_list": "fh, flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(c_int), INTENT(OUT) :: flag",
      "cshim_cdesc_params": "MPI_Fint fh, int* flag"
    },
    {
      "name": "MPI_File_get_byte_offset",
      "base_name": "MPI_File_get_byte_offset",
      "pmpi_name": "PMPI_File_get_byte_offset",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, MPI_Offset* disp",
      "c_args": "fh, offset, disp",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, MPI_Fint *disp, MPI_Fint *ierror",
      "fc_args": "fh, offset, disp, ierror",
      "f08_par_list": "fh, offset, disp, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: disp\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, disp",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, disp",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, disp",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: disp",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, MPI_Offset* disp"
    },
    {
      "name": "MPI_File_get_group",
      "base_name": "MPI_File_get_group",
      "pmpi_name": "PMPI_File_get_group",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Group* group",
      "c_args": "fh, group",
      "fc_params": "MPI_Fint *fh, MPI_Fint *group, MPI_Fint *ierror",
      "fc_args": "fh, group, ierror",
      "f08_par_list": "fh, group, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Group, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    TYPE(MPI_Group), INTENT(OUT) :: group\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, group",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, group%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, group",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            integer(c_int), INTENT(OUT) :: group",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Fint* group"
    },
    {
      "name": "MPI_File_get_info",
      "base_name": "MPI_File_get_info",
      "pmpi_name": "PMPI_File_get_info",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Info* info_used",
      "c_args": "fh, info_used",
      "fc_params": "MPI_Fint *fh, MPI_Fint *info_used, MPI_Fint *ierror",
      "fc_args": "fh, info_used, ierror",
      "f08_par_list": "fh, info_used, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    TYPE(MPI_Info), INTENT(OUT) :: info_used\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, info_used",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, info_used%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, info_used",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            integer(c_int), INTENT(OUT) :: info_used",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Fint* info_used"
    },
    {
      "name": "MPI_File_get_position",
      "base_name": "MPI_File_get_position",
      "pmpi_name": "PMPI_File_get_position",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset* offset",
      "c_args": "fh, offset",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, MPI_Fint *ierror",
      "fc_args": "fh, offset, ierror",
      "f08_par_list": "fh, offset, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: offset\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: offset",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset* offset"
    },
    {
      "name": "MPI_File_get_position_shared",
      "base_name": "MPI_File_get_position_shared",
      "pmpi_name": "PMPI_File_get_position_shared",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset* offset",
      "c_args": "fh, offset",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, MPI_Fint *ierror",
      "fc_args": "fh, offset, ierror",
      "f08_par_list": "fh, offset, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: offset\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: offset",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset* offset"
    },
    {
      "name": "MPI_File_get_size",
      "base_name": "MPI_File_get_size",
      "pmpi_name": "PMPI_File_get_size",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset* size",
      "c_args": "fh, size",
      "fc_params": "MPI_Fint *fh, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "fh, size, ierror",
      "f08_par_list": "fh, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: size",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset* size"
    },
    {
      "name": "MPI_File_get_type_extent",
      "base_name": "MPI_File_get_type_extent",
      "pmpi_name": "PMPI_File_get_type_extent",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Datatype datatype, MPI_Aint* extent",
      "c_args": "fh, datatype, extent",
      "fc_params": "MPI_Fint *fh, MPI_Fint *datatype, MPI_Fint *extent, MPI_Fint *ierror",
      "fc_args": "fh, datatype, extent, ierror",
      "f08_par_list": "fh, datatype, extent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_File, MPI_ADDRESS_KIND",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: extent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, datatype, extent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, datatype%MPI_VAL, extent",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, datatype, extent",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: extent",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Fint datatype, MPI_Aint* extent"
    },
    {
      "name": "MPI_File_get_type_extent_c",
      "base_name": "MPI_File_get_type_extent",
      "pmpi_name": "PMPI_File_get_type_extent",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Datatype datatype, MPI_Count* extent",
      "c_args": "fh, datatype, extent",
      "fc_params": "MPI_Fint *fh, MPI_Fint *datatype, MPI_Fint *extent, MPI_Fint *ierror",
      "fc_args": "fh, datatype, extent, ierror",
      "f08_par_list": "fh, datatype, extent, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: extent\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, datatype, extent",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, datatype%MPI_VAL, extent",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, datatype, extent",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            INTEGER(KIND=MPI_COUNT_KIND), INTENT(OUT) :: extent",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Fint datatype, MPI_Count* extent"
    },
    {
      "name": "MPI_File_get_view",
      "base_name": "MPI_File_get_view",
      "pmpi_name": "PMPI_File_get_view",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset* disp, MPI_Datatype* etype, MPI_Datatype* filetype, char* datarep",
      "c_args": "fh, disp, etype, filetype, datarep",
      "fc_params": "MPI_Fint *fh, MPI_Fint *disp, MPI_Fint *etype, MPI_Fint *filetype, char* datarep, MPI_Fint *ierror, int datarep_len",
      "fc_args": "fh, disp, etype, filetype, datarep, ierror, datarep_len",
      "f08_par_list": "fh, disp, etype, filetype, datarep, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: disp\n    TYPE(MPI_Datatype), INTENT(OUT) :: etype, filetype\n    CHARACTER(LEN=*), INTENT(OUT) :: datarep\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, disp, etype, filetype, datarep",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_c2f",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len(datarep) + 1)",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, disp, etype%MPI_VAL, filetype%MPI_VAL, datarep_c",
      "f08_cshim_postcall_stmts": "call string_c2f(datarep_c, datarep)",
      "f08_cshim_iface_par_list": "fh, disp, etype, filetype, datarep",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: disp\n            integer(c_int), INTENT(OUT) :: etype\n            integer(c_int), INTENT(OUT) :: filetype\n            CHARACTER(kind=c_char), INTENT(OUT) :: datarep(*)",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset* disp, MPI_Fint* etype, MPI_Fint* filetype, char* datarep"
    },
    {
      "name": "MPI_File_iread",
      "base_name": "MPI_File_iread",
      "pmpi_name": "PMPI_File_iread",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Request, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_c",
      "base_name": "MPI_File_iread",
      "pmpi_name": "PMPI_File_iread",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_all",
      "base_name": "MPI_File_iread_all",
      "pmpi_name": "PMPI_File_iread_all",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Request, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_all_c",
      "base_name": "MPI_File_iread_all",
      "pmpi_name": "PMPI_File_iread_all",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_at",
      "base_name": "MPI_File_iread_at",
      "pmpi_name": "PMPI_File_iread_at",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, offset, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_at_c",
      "base_name": "MPI_File_iread_at",
      "pmpi_name": "PMPI_File_iread_at",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, offset, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Request, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_at_all",
      "base_name": "MPI_File_iread_at_all",
      "pmpi_name": "PMPI_File_iread_at_all",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, offset, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_at_all_c",
      "base_name": "MPI_File_iread_at_all",
      "pmpi_name": "PMPI_File_iread_at_all",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, offset, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Request, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_shared",
      "base_name": "MPI_File_iread_shared",
      "pmpi_name": "PMPI_File_iread_shared",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Request, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iread_shared_c",
      "base_name": "MPI_File_iread_shared",
      "pmpi_name": "PMPI_File_iread_shared",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite",
      "base_name": "MPI_File_iwrite",
      "pmpi_name": "PMPI_File_iwrite",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Request, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_c",
      "base_name": "MPI_File_iwrite",
      "pmpi_name": "PMPI_File_iwrite",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_all",
      "base_name": "MPI_File_iwrite_all",
      "pmpi_name": "PMPI_File_iwrite_all",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Request, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_all_c",
      "base_name": "MPI_File_iwrite_all",
      "pmpi_name": "PMPI_File_iwrite_all",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_at",
      "base_name": "MPI_File_iwrite_at",
      "pmpi_name": "PMPI_File_iwrite_at",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, offset, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_at_c",
      "base_name": "MPI_File_iwrite_at",
      "pmpi_name": "PMPI_File_iwrite_at",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, offset, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Request, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_at_all",
      "base_name": "MPI_File_iwrite_at_all",
      "pmpi_name": "PMPI_File_iwrite_at_all",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, offset, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_at_all_c",
      "base_name": "MPI_File_iwrite_at_all",
      "pmpi_name": "PMPI_File_iwrite_at_all",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, offset, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Request, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_shared",
      "base_name": "MPI_File_iwrite_shared",
      "pmpi_name": "PMPI_File_iwrite_shared",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Request, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_iwrite_shared_c",
      "base_name": "MPI_File_iwrite_shared",
      "pmpi_name": "PMPI_File_iwrite_shared",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Request* request",
      "c_args": "fh, buf, count, datatype, request",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *request, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, request, ierror",
      "f08_par_list": "fh, buf, count, datatype, request, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Request, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Request), INTENT(OUT) :: request\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, request",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, request%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, request",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            integer(c_int), INTENT(OUT) :: request",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_Fint* request"
    },
    {
      "name": "MPI_File_open",
      "base_name": "MPI_File_open",
      "pmpi_name": "PMPI_File_open",
      "embiggened": false,
      "c_params": "MPI_Comm comm, const char* filename, int amode, MPI_Info info, MPI_File* fh",
      "c_args": "comm, filename, amode, info, fh",
      "fc_params": "MPI_Fint *comm, const char* filename, MPI_Fint *amode, MPI_Fint *info, MPI_Fint *fh, MPI_Fint *ierror, int filename_len",
      "fc_args": "comm, filename, amode, info, fh, ierror, filename_len",
      "f08_par_list": "comm, filename, amode, info, fh, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_Comm, MPI_File",
      "f08_par_decl": "TYPE(MPI_Comm), INTENT(IN) :: comm\n    CHARACTER(LEN=*), INTENT(IN) :: filename\n    INTEGER, INTENT(IN) :: amode\n    TYPE(MPI_Info), INTENT(IN) :: info\n    TYPE(MPI_File), INTENT(OUT) :: fh\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "comm, filename, amode, info, fh",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: filename_c(len_trim(filename)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(filename, filename_c)",
      "f08_cshim_args": "comm%MPI_VAL, filename_c, amode, info%MPI_VAL, fh%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "comm, filename, amode, info, fh",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_char, c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: comm\n            CHARACTER(kind=c_char), INTENT(IN) :: filename(*)\n            INTEGER(c_int), VALUE, INTENT(IN) :: amode\n            integer(c_int), VALUE, INTENT(IN) :: info\n            integer(c_int), INTENT(OUT) :: fh",
      "cshim_cdesc_params": "MPI_Fint comm, const char* filename, int amode, MPI_Fint info, MPI_Fint* fh"
    },
    {
      "name": "MPI_File_preallocate",
      "base_name": "MPI_File_preallocate",
      "pmpi_name": "PMPI_File_preallocate",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset size",
      "c_args": "fh, size",
      "fc_params": "MPI_Fint *fh, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "fh, size, ierror",
      "f08_par_list": "fh, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset size"
    },
    {
      "name": "MPI_File_read",
      "base_name": "MPI_File_read",
      "pmpi_name": "PMPI_File_read",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_c",
      "base_name": "MPI_File_read",
      "pmpi_name": "PMPI_File_read",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_all",
      "base_name": "MPI_File_read_all",
      "pmpi_name": "PMPI_File_read_all",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_all_c",
      "base_name": "MPI_File_read_all",
      "pmpi_name": "PMPI_File_read_all",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_all_begin",
      "base_name": "MPI_File_read_all_begin",
      "pmpi_name": "PMPI_File_read_all_begin",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype",
      "c_args": "fh, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, ierror",
      "f08_par_list": "fh, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_read_all_begin_c",
      "base_name": "MPI_File_read_all_begin",
      "pmpi_name": "PMPI_File_read_all_begin",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype",
      "c_args": "fh, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, ierror",
      "f08_par_list": "fh, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_read_all_end",
      "base_name": "MPI_File_read_all_end",
      "pmpi_name": "PMPI_File_read_all_end",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, MPI_Status* status",
      "c_args": "fh, buf, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, status, ierror",
      "f08_par_list": "fh, buf, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_at",
      "base_name": "MPI_File_read_at",
      "pmpi_name": "PMPI_File_read_at",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, offset, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_at_c",
      "base_name": "MPI_File_read_at",
      "pmpi_name": "PMPI_File_read_at",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, offset, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_at_all",
      "base_name": "MPI_File_read_at_all",
      "pmpi_name": "PMPI_File_read_at_all",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, offset, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_at_all_c",
      "base_name": "MPI_File_read_at_all",
      "pmpi_name": "PMPI_File_read_at_all",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, offset, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_at_all_begin",
      "base_name": "MPI_File_read_at_all_begin",
      "pmpi_name": "PMPI_File_read_at_all_begin",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, int count, MPI_Datatype datatype",
      "c_args": "fh, offset, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_read_at_all_begin_c",
      "base_name": "MPI_File_read_at_all_begin",
      "pmpi_name": "PMPI_File_read_at_all_begin",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, void* buf, MPI_Count count, MPI_Datatype datatype",
      "c_args": "fh, offset, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_read_at_all_end",
      "base_name": "MPI_File_read_at_all_end",
      "pmpi_name": "PMPI_File_read_at_all_end",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, MPI_Status* status",
      "c_args": "fh, buf, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, status, ierror",
      "f08_par_list": "fh, buf, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_ordered",
      "base_name": "MPI_File_read_ordered",
      "pmpi_name": "PMPI_File_read_ordered",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_ordered_c",
      "base_name": "MPI_File_read_ordered",
      "pmpi_name": "PMPI_File_read_ordered",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_ordered_begin",
      "base_name": "MPI_File_read_ordered_begin",
      "pmpi_name": "PMPI_File_read_ordered_begin",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype",
      "c_args": "fh, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, ierror",
      "f08_par_list": "fh, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_read_ordered_begin_c",
      "base_name": "MPI_File_read_ordered_begin",
      "pmpi_name": "PMPI_File_read_ordered_begin",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype",
      "c_args": "fh, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, ierror",
      "f08_par_list": "fh, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_read_ordered_end",
      "base_name": "MPI_File_read_ordered_end",
      "pmpi_name": "PMPI_File_read_ordered_end",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, MPI_Status* status",
      "c_args": "fh, buf, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, status, ierror",
      "f08_par_list": "fh, buf, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, ASYNCHRONOUS :: buf\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_shared",
      "base_name": "MPI_File_read_shared",
      "pmpi_name": "PMPI_File_read_shared",
      "embiggened": false,
      "c_params": "MPI_File fh, void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_read_shared_c",
      "base_name": "MPI_File_read_shared",
      "pmpi_name": "PMPI_File_read_shared",
      "embiggened": true,
      "c_params": "MPI_File fh, void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_seek",
      "base_name": "MPI_File_seek",
      "pmpi_name": "PMPI_File_seek",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, int whence",
      "c_args": "fh, offset, whence",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, MPI_Fint *whence, MPI_Fint *ierror",
      "fc_args": "fh, offset, whence, ierror",
      "f08_par_list": "fh, offset, whence, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    INTEGER, INTENT(IN) :: whence\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, whence",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, whence",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, whence",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            INTEGER(c_int), VALUE, INTENT(IN) :: whence",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, int whence"
    },
    {
      "name": "MPI_File_seek_shared",
      "base_name": "MPI_File_seek_shared",
      "pmpi_name": "PMPI_File_seek_shared",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, int whence",
      "c_args": "fh, offset, whence",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, MPI_Fint *whence, MPI_Fint *ierror",
      "fc_args": "fh, offset, whence, ierror",
      "f08_par_list": "fh, offset, whence, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    INTEGER, INTENT(IN) :: whence\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, whence",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, whence",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, whence",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            INTEGER(c_int), VALUE, INTENT(IN) :: whence",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, int whence"
    },
    {
      "name": "MPI_File_set_atomicity",
      "base_name": "MPI_File_set_atomicity",
      "pmpi_name": "PMPI_File_set_atomicity",
      "embiggened": false,
      "c_params": "MPI_File fh, int flag",
      "c_args": "fh, flag",
      "fc_params": "MPI_Fint *fh, MPI_Fint *flag, MPI_Fint *ierror",
      "fc_args": "fh, flag, ierror",
      "f08_par_list": "fh, flag, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    LOGICAL, INTENT(IN) :: flag\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, flag",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_int",
      "f08_cshim_local_vars": "integer(c_int) :: flag_c",
      "f08_cshim_precall_stmts": "if (flag) then\n        flag_c = 1\n    else\n        flag_c = 0\n    endif",
      "f08_cshim_args": "fh%MPI_VAL, flag_c",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, flag",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(c_int), VALUE, INTENT(IN) :: flag",
      "cshim_cdesc_params": "MPI_Fint fh, int flag"
    },
    {
      "name": "MPI_File_set_info",
      "base_name": "MPI_File_set_info",
      "pmpi_name": "PMPI_File_set_info",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Info info",
      "c_args": "fh, info",
      "fc_params": "MPI_Fint *fh, MPI_Fint *info, MPI_Fint *ierror",
      "fc_args": "fh, info, ierror",
      "f08_par_list": "fh, info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Info, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, info",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, info",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            integer(c_int), VALUE, INTENT(IN) :: info",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Fint info"
    },
    {
      "name": "MPI_File_set_size",
      "base_name": "MPI_File_set_size",
      "pmpi_name": "PMPI_File_set_size",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset size",
      "c_args": "fh, size",
      "fc_params": "MPI_Fint *fh, MPI_Fint *size, MPI_Fint *ierror",
      "fc_args": "fh, size, ierror",
      "f08_par_list": "fh, size, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: size\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, size",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, size",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, size",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: size",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset size"
    },
    {
      "name": "MPI_File_set_view",
      "base_name": "MPI_File_set_view",
      "pmpi_name": "PMPI_File_set_view",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, const char* datarep, MPI_Info info",
      "c_args": "fh, disp, etype, filetype, datarep, info",
      "fc_params": "MPI_Fint *fh, MPI_Fint *disp, MPI_Fint *etype, MPI_Fint *filetype, const char* datarep, MPI_Fint *info, MPI_Fint *ierror, int datarep_len",
      "fc_args": "fh, disp, etype, filetype, datarep, info, ierror, datarep_len",
      "f08_par_list": "fh, disp, etype, filetype, datarep, info, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Info, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: disp\n    TYPE(MPI_Datatype), INTENT(IN) :: etype, filetype\n    CHARACTER(LEN=*), INTENT(IN) :: datarep\n    TYPE(MPI_Info), INTENT(IN) :: info\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, disp, etype, filetype, datarep, info",
      "f08_cshim_use_stmts": "use, intrinsic :: iso_c_binding, only: c_char\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)",
      "f08_cshim_args": "fh%MPI_VAL, disp, etype%MPI_VAL, filetype%MPI_VAL, datarep_c, info%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, disp, etype, filetype, datarep, info",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: disp\n            integer(c_int), VALUE, INTENT(IN) :: etype\n            integer(c_int), VALUE, INTENT(IN) :: filetype\n            CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            integer(c_int), VALUE, INTENT(IN) :: info",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset disp, MPI_Fint etype, MPI_Fint filetype, const char* datarep, MPI_Fint info"
    },
    {
      "name": "MPI_File_sync",
      "base_name": "MPI_File_sync",
      "pmpi_name": "PMPI_File_sync",
      "embiggened": false,
      "c_params": "MPI_File fh",
      "c_args": "fh",
      "fc_params": "MPI_Fint *fh, MPI_Fint *ierror",
      "fc_args": "fh, ierror",
      "f08_par_list": "fh, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh",
      "cshim_cdesc_params": "MPI_Fint fh"
    },
    {
      "name": "MPI_File_write",
      "base_name": "MPI_File_write",
      "pmpi_name": "PMPI_File_write",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_c",
      "base_name": "MPI_File_write",
      "pmpi_name": "PMPI_File_write",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_all",
      "base_name": "MPI_File_write_all",
      "pmpi_name": "PMPI_File_write_all",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_all_c",
      "base_name": "MPI_File_write_all",
      "pmpi_name": "PMPI_File_write_all",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_all_begin",
      "base_name": "MPI_File_write_all_begin",
      "pmpi_name": "PMPI_File_write_all_begin",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype",
      "c_args": "fh, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, ierror",
      "f08_par_list": "fh, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_write_all_begin_c",
      "base_name": "MPI_File_write_all_begin",
      "pmpi_name": "PMPI_File_write_all_begin",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype",
      "c_args": "fh, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, ierror",
      "f08_par_list": "fh, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_write_all_end",
      "base_name": "MPI_File_write_all_end",
      "pmpi_name": "PMPI_File_write_all_end",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, MPI_Status* status",
      "c_args": "fh, buf, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, status, ierror",
      "f08_par_list": "fh, buf, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_at",
      "base_name": "MPI_File_write_at",
      "pmpi_name": "PMPI_File_write_at",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, offset, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_at_c",
      "base_name": "MPI_File_write_at",
      "pmpi_name": "PMPI_File_write_at",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, offset, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_at_all",
      "base_name": "MPI_File_write_at_all",
      "pmpi_name": "PMPI_File_write_at_all",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, offset, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_at_all_c",
      "base_name": "MPI_File_write_at_all",
      "pmpi_name": "PMPI_File_write_at_all",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, offset, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_Status, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_at_all_begin",
      "base_name": "MPI_File_write_at_all_begin",
      "pmpi_name": "PMPI_File_write_at_all_begin",
      "embiggened": false,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, int count, MPI_Datatype datatype",
      "c_args": "fh, offset, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, int count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_write_at_all_begin_c",
      "base_name": "MPI_File_write_at_all_begin",
      "pmpi_name": "PMPI_File_write_at_all_begin",
      "embiggened": true,
      "c_params": "MPI_File fh, MPI_Offset offset, const void* buf, MPI_Count count, MPI_Datatype datatype",
      "c_args": "fh, offset, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, MPI_Fint *offset, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, offset, buf, count, datatype, ierror",
      "f08_par_list": "fh, offset, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, offset, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, offset, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, offset, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_OFFSET_KIND, MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            INTEGER(KIND=MPI_OFFSET_KIND), VALUE, INTENT(IN) :: offset\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, MPI_Offset offset, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_write_at_all_end",
      "base_name": "MPI_File_write_at_all_end",
      "pmpi_name": "PMPI_File_write_at_all_end",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, MPI_Status* status",
      "c_args": "fh, buf, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, status, ierror",
      "f08_par_list": "fh, buf, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_ordered",
      "base_name": "MPI_File_write_ordered",
      "pmpi_name": "PMPI_File_write_ordered",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_ordered_c",
      "base_name": "MPI_File_write_ordered",
      "pmpi_name": "PMPI_File_write_ordered",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_ordered_begin",
      "base_name": "MPI_File_write_ordered_begin",
      "pmpi_name": "PMPI_File_write_ordered_begin",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype",
      "c_args": "fh, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, ierror",
      "f08_par_list": "fh, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_write_ordered_begin_c",
      "base_name": "MPI_File_write_ordered_begin",
      "pmpi_name": "PMPI_File_write_ordered_begin",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype",
      "c_args": "fh, buf, count, datatype",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, ierror",
      "f08_par_list": "fh, buf, count, datatype, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype"
    },
    {
      "name": "MPI_File_write_ordered_end",
      "base_name": "MPI_File_write_ordered_end",
      "pmpi_name": "PMPI_File_write_ordered_end",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, MPI_Status* status",
      "c_args": "fh, buf, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, status, ierror",
      "f08_par_list": "fh, buf, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN), ASYNCHRONOUS :: buf\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_shared",
      "base_name": "MPI_File_write_shared",
      "pmpi_name": "PMPI_File_write_shared",
      "embiggened": false,
      "c_params": "MPI_File fh, const void* buf, int count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datatype, MPI_Status, MPI_File",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER, INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(c_int), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, int count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_File_write_shared_c",
      "base_name": "MPI_File_write_shared",
      "pmpi_name": "PMPI_File_write_shared",
      "embiggened": true,
      "c_params": "MPI_File fh, const void* buf, MPI_Count count, MPI_Datatype datatype, MPI_Status* status",
      "c_args": "fh, buf, count, datatype, status",
      "fc_params": "MPI_Fint *fh, const void* buf, MPI_Fint *count, MPI_Fint *datatype, MPI_Fint *status, MPI_Fint *ierror",
      "fc_args": "fh, buf, count, datatype, status, ierror",
      "f08_par_list": "fh, buf, count, datatype, status, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status, MPI_File, MPI_Datatype",
      "f08_par_decl": "TYPE(MPI_File), INTENT(IN) :: fh\n    CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n    INTEGER(KIND=MPI_COUNT_KIND), INTENT(IN) :: count\n    TYPE(MPI_Datatype), INTENT(IN) :: datatype\n    TYPE(MPI_Status) :: status\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "fh, buf, count, datatype, status",
      "f08_cshim_use_stmts": "",
      "f08_cshim_local_vars": "",
      "f08_cshim_precall_stmts": "",
      "f08_cshim_args": "fh%MPI_VAL, buf, count, datatype%MPI_VAL, status",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "fh, buf, count, datatype, status",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_COUNT_KIND, MPI_Status\n            use, intrinsic :: ISO_C_BINDING, only: c_int, c_long_long",
      "f08_cshim_iface_par_decl": "integer(c_int), VALUE, INTENT(IN) :: fh\n            CHOICE_BUFFER_TYPE, INTENT(IN) :: buf\n            INTEGER(KIND=MPI_COUNT_KIND), VALUE, INTENT(IN) :: count\n            integer(c_int), VALUE, INTENT(IN) :: datatype\n            TYPE(MPI_Status) :: status",
      "cshim_cdesc_params": "MPI_Fint fh, CFI_cdesc_t * buf, MPI_Count count, MPI_Fint datatype, MPI_F08_status* status"
    },
    {
      "name": "MPI_Register_datarep",
      "base_name": "MPI_Register_datarep",
      "pmpi_name": "PMPI_Register_datarep",
      "embiggened": false,
      "c_params": "const char* datarep, MPI_Datarep_conversion_function* read_conversion_fn, MPI_Datarep_conversion_function* write_conversion_fn, MPI_Datarep_extent_function* dtype_file_extent_fn, void* extra_state",
      "c_args": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state",
      "fc_params": "const char* datarep, MPI_Fint *read_conversion_fn, MPI_Fint *write_conversion_fn, MPI_Fint *dtype_file_extent_fn, void* extra_state, MPI_Fint *ierror, int datarep_len",
      "fc_args": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state, ierror, datarep_len",
      "f08_par_list": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datarep_conversion_function, MPI_Datarep_extent_function, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: datarep\n    PROCEDURE(MPI_Datarep_conversion_function) :: read_conversion_fn, write_conversion_fn\n    PROCEDURE(MPI_Datarep_extent_function) :: dtype_file_extent_fn\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: MPI_CONVERSION_FN_NULL\n    use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_null_funptr, c_char, c_associated, c_funloc\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)\n    type(c_funptr) :: cfunptr_read_conversion_fn\n    type(c_funptr) :: cfunptr_write_conversion_fn\n    type(c_funptr) :: cfunptr_dtype_file_extent_fn",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)\n    cfunptr_read_conversion_fn = c_funloc(read_conversion_fn)\n    if (c_associated(cfunptr_read_conversion_fn, c_funloc(MPI_CONVERSION_FN_NULL))) then\n        cfunptr_read_conversion_fn = c_null_funptr\n    endif\n    cfunptr_write_conversion_fn = c_funloc(write_conversion_fn)\n    if (c_associated(cfunptr_write_conversion_fn, c_funloc(MPI_CONVERSION_FN_NULL))) then\n        cfunptr_write_conversion_fn = c_null_funptr\n    endif\n    cfunptr_dtype_file_extent_fn = c_funloc(dtype_file_extent_fn)",
      "f08_cshim_args": "datarep_c, cfunptr_read_conversion_fn, cfunptr_write_conversion_fn, cfunptr_dtype_file_extent_fn, extra_state",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_funptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            TYPE(c_funptr), VALUE :: read_conversion_fn\n            TYPE(c_funptr), VALUE :: write_conversion_fn\n            TYPE(c_funptr), VALUE :: dtype_file_extent_fn\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state",
      "cshim_cdesc_params": "const char* datarep, MPI_Datarep_conversion_function* read_conversion_fn, MPI_Datarep_conversion_function* write_conversion_fn, MPI_Datarep_extent_function* dtype_file_extent_fn, void* extra_state"
    },
    {
      "name": "MPI_Register_datarep_c",
      "base_name": "MPI_Register_datarep_c",
      "pmpi_name": "PMPI_Register_datarep_c",
      "embiggened": true,
      "c_params": "const char* datarep, MPI_Datarep_conversion_function_c* read_conversion_fn, MPI_Datarep_conversion_function_c* write_conversion_fn, MPI_Datarep_extent_function* dtype_file_extent_fn, void* extra_state",
      "c_args": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state",
      "fc_params": "const char* datarep, MPI_Fint *read_conversion_fn, MPI_Fint *write_conversion_fn, MPI_Fint *dtype_file_extent_fn, void* extra_state, MPI_Fint *ierror, int datarep_len",
      "fc_args": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state, ierror, datarep_len",
      "f08_par_list": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state, ierror",
      "f08_use_stmts": "use :: mpi_f08, only: MPI_Datarep_conversion_function_c, MPI_Datarep_extent_function, MPI_ADDRESS_KIND",
      "f08_par_decl": "CHARACTER(LEN=*), INTENT(IN) :: datarep\n    PROCEDURE(MPI_Datarep_conversion_function_c) :: read_conversion_fn, write_conversion_fn\n    PROCEDURE(MPI_Datarep_extent_function) :: dtype_file_extent_fn\n    INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state\n    INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
      "f08_args": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state",
      "f08_cshim_use_stmts": "use :: mpi_f08, only: MPI_CONVERSION_FN_NULL_C\n    use, intrinsic :: iso_c_binding, only: c_funptr, c_ptr, c_null_funptr, c_char, c_associated, c_funloc\n    use :: mod_string, only: string_f2c",
      "f08_cshim_local_vars": "character(kind=c_char) :: datarep_c(len_trim(datarep)+1)\n    type(c_funptr) :: cfunptr_read_conversion_fn\n    type(c_funptr) :: cfunptr_write_conversion_fn\n    type(c_funptr) :: cfunptr_dtype_file_extent_fn",
      "f08_cshim_precall_stmts": "call string_f2c(datarep, datarep_c)\n    cfunptr_read_conversion_fn = c_funloc(read_conversion_fn)\n    if (c_associated(cfunptr_read_conversion_fn, c_funloc(MPI_CONVERSION_FN_NULL_C))) then\n        cfunptr_read_conversion_fn = c_null_funptr\n    endif\n    cfunptr_write_conversion_fn = c_funloc(write_conversion_fn)\n    if (c_associated(cfunptr_write_conversion_fn, c_funloc(MPI_CONVERSION_FN_NULL_C))) then\n        cfunptr_write_conversion_fn = c_null_funptr\n    endif\n    cfunptr_dtype_file_extent_fn = c_funloc(dtype_file_extent_fn)",
      "f08_cshim_args": "datarep_c, cfunptr_read_conversion_fn, cfunptr_write_conversion_fn, cfunptr_dtype_file_extent_fn, extra_state",
      "f08_cshim_postcall_stmts": "",
      "f08_cshim_iface_par_list": "datarep, read_conversion_fn, write_conversion_fn, dtype_file_extent_fn, extra_state",
      "f08_cshim_iface_use_stmts": "use :: mpi_f08, only: MPI_ADDRESS_KIND\n            use, intrinsic :: ISO_C_BINDING, only: c_char, c_funptr, c_int, c_intptr_t",
      "f08_cshim_iface_par_decl": "CHARACTER(kind=c_char), INTENT(IN) :: datarep(*)\n            TYPE(c_funptr), VALUE :: read_conversion_fn\n            TYPE(c_funptr), VALUE :: write_conversion_fn\n            TYPE(c_funptr), VALUE :: dtype_file_extent_fn\n            INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state",
      "cshim_cdesc_params": "const char* datarep, MPI_Datarep_conversion_function_c* read_conversion_fn, MPI_Datarep_conversion_function_c* write_conversion_fn, MPI_Datarep_extent_function* dtype_file_extent_fn, void* extra_state"
    }
  ]
}