{
    "mpi_calls": [
        "### MPI 3-1. A.2.1  Point-to-Point Communication Functions ###",
        {
            "name": "MPI_Bsend",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send|_Blocking"
        },
        {
            "name": "MPI_Bsend_init",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send"
        },
        {
            "name": "MPI_Buffer_attach",
            "cpar": "void *buffer, int size",
            "f08par": "TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buffer; INTEGER, INTENT(IN) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Buffer_detach",
            "cpar": "void *buffer_addr, int *size",
            "f08par": "TYPE(*), DIMENSION(..) :: buffer_addr; INTEGER, INTENT(OUT) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Cancel",
            "cpar": "MPI_Request *request",
            "f08par": "TYPE(MPI_Request), INTENT(IN) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Get_count",
            "cpar": "MPI3_CONST MPI_Status *status, MPI_Datatype datatype, int *count",
            "f08par": "TYPE(MPI_Status), INTENT(IN) :: status; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, INTENT(OUT) :: count; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Ibsend",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send"
        },
        {
            "name": "MPI_Improbe",
            "cpar": "int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status",
            "f08par": "INTEGER, INTENT(IN) :: source, tag; TYPE(MPI_Comm), INTENT(IN) :: comm; LOGICAL, INTENT(OUT) :: flag; TYPE(MPI_Message), INTENT(OUT) :: message; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Imrecv",
            "cpar": "void *buf, int count, MPI_Datatype datatype, MPI_Message *message, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Message), INTENT(INOUT) :: message; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Iprobe",
            "cpar": "int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status",
            "f08par": "INTEGER, INTENT(IN) :: source, tag; TYPE(MPI_Comm), INTENT(IN) :: comm; LOGICAL, INTENT(OUT) :: flag; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Test"
        },
        {
            "name": "MPI_Irecv",
            "cpar": "void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, source, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Receive"
        },
        {
            "name": "MPI_Irsend",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send"
        },
        {
            "name": "MPI_Isend",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send"
        },
        {
            "name": "MPI_Issend",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send"
        },
        {
            "name": "MPI_Mprobe",
            "cpar": "int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status",
            "f08par": "INTEGER, INTENT(IN) :: source, tag; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Message), INTENT(OUT) :: message; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Mrecv",
            "cpar": "void *buf, int count, MPI_Datatype datatype, MPI_Message *message, MPI_Status *status",
            "f08par": "TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Message), INTENT(INOUT) :: message; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Probe",
            "cpar": "int source, int tag, MPI_Comm comm, MPI_Status *status",
            "f08par": "INTEGER, INTENT(IN) :: source, tag; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Test"
        },
        {
            "name": "MPI_Recv",
            "cpar": "void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status",
            "f08par": "TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count, source, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Receive|_Blocking"
        },
        {
            "name": "MPI_Recv_init",
            "cpar": "void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, source, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Receive"
        },
        {
            "name": "MPI_Request_free",
            "cpar": "MPI_Request *request",
            "f08par": "TYPE(MPI_Request), INTENT(INOUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Request_get_status",
            "cpar": "MPI_Request request, int *flag, MPI_Status *status",
            "f08par": "TYPE(MPI_Request), INTENT(IN) :: request; LOGICAL, INTENT(OUT) :: flag; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Test"
        },
        {
            "name": "MPI_Rsend",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send|_Blocking"
        },
        {
            "name": "MPI_Rsend_init",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send"
        },
        {
            "name": "MPI_Send",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send|_Blocking"
        },
        {
            "name": "MPI_Send_init",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send"
        },
        {
            "name": "MPI_Sendrecv",
            "cpar": "MPI3_CONST void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, dest, sendtag, recvcount, source, recvtag; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_SendRecv|_Blocking"
        },
        {
            "name": "MPI_Sendrecv_replace",
            "cpar": "void *buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status",
            "f08par": "TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count, dest, sendtag, source, recvtag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_SendRecv|_Blocking"
        },
        {
            "name": "MPI_Ssend",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send|_Blocking"
        },
        {
            "name": "MPI_Ssend_init",
            "cpar": "MPI3_CONST void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count, dest, tag; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Send"
        },
        {
            "name": "MPI_Start",
            "cpar": "MPI_Request *request",
            "f08par": "TYPE(MPI_Request), INTENT(INOUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Startall",
            "cpar": "int count, MPI_Request array_of_requests[]",
            "f08par": "INTEGER, INTENT(IN) :: count; TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Test",
            "cpar": "MPI_Request *request, int *flag, MPI_Status *status",
            "f08par": "TYPE(MPI_Request), INTENT(INOUT) :: request; LOGICAL, INTENT(OUT) :: flag; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Test"
        },
        {
            "name": "MPI_Test_cancelled",
            "cpar": "MPI3_CONST MPI_Status *status, int *flag",
            "f08par": "TYPE(MPI_Status), INTENT(IN) :: status; LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Testall",
            "cpar": "int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[]",
            "f08par": "INTEGER, INTENT(IN) :: count; TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count); LOGICAL, INTENT(OUT) :: flag; TYPE(MPI_Status) :: array_of_statuses; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Test"
        },
        {
            "name": "MPI_Testany",
            "cpar": "int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status",
            "f08par": "INTEGER, INTENT(IN) :: count; TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count); INTEGER, INTENT(OUT) :: index; LOGICAL, INTENT(OUT) :: flag; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Test"
        },
        {
            "name": "MPI_Testsome",
            "cpar": "int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]",
            "f08par": "INTEGER, INTENT(IN) :: incount; TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(incount); INTEGER, INTENT(OUT) :: outcount, array_of_indices(*); TYPE(MPI_Status) :: array_of_statuses; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Test"
        },
        {
            "name": "MPI_Wait",
            "cpar": "MPI_Request *request, MPI_Status *status",
            "f08par": "TYPE(MPI_Request), INTENT(INOUT) :: request; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Wait|_Blocking"
        },
        {
            "name": "MPI_Waitall",
            "cpar": "int count, MPI_Request *array_of_requests, MPI_Status *array_of_statuses",
            "f08par": "INTEGER, INTENT(IN) :: count; TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count); TYPE(MPI_Status) :: array_of_statuses; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Wait|_Blocking"
        },
        {
            "name": "MPI_Waitany",
            "cpar": "int count, MPI_Request *array_of_requests, int *index, MPI_Status *status",
            "f08par": "INTEGER, INTENT(IN) :: count; TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(count); INTEGER, INTENT(OUT) :: index; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Wait|_Blocking"
        },
        {
            "name": "MPI_Waitsome",
            "cpar": "int incount, MPI_Request *array_of_requests, int *outcount, int *array_of_indices, MPI_Status *array_of_statuses",
            "f08par": "INTEGER, INTENT(IN) :: incount; TYPE(MPI_Request), INTENT(INOUT) :: array_of_requests(incount); INTEGER, INTENT(OUT) :: outcount, array_of_indices(*); TYPE(MPI_Status) :: array_of_statuses; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Wait|_Blocking"
        },
        "### MPI 3-1. A.2.2  Datatypes Functions (not implemented) ###",
        "### MPI 3-1. A.2.3  Collective Communication Functions ###",
        {
            "name": "MPI_Allgather",
            "cpar": "MPI3_CONST void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Gather|_Blocking|_Collective"
        },
        {
            "name": "MPI_Allgatherv",
            "cpar": "MPI3_CONST void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, MPI3_CONST int *recvcounts, MPI3_CONST int *displs, MPI_Datatype recvtype, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Gather|_Blocking|_Collective"
        },
        {
            "name": "MPI_Allreduce",
            "cpar": "MPI3_CONST void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Reduce|_Blocking|_Collective"
        },
        {
            "name": "MPI_Alltoall",
            "cpar": "MPI3_CONST void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_All2All|_Blocking|_Collective"
        },
        {
            "name": "MPI_Alltoallv",
            "cpar": "MPI3_CONST void *sendbuf, MPI3_CONST int *sendcounts, MPI3_CONST int *sdispls, MPI_Datatype sendtype, void *recvbuf, MPI3_CONST int *recvcounts, MPI3_CONST int *rdispls, MPI_Datatype recvtype, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_All2All|_Blocking|_Collective"
        },
        {
            "name": "MPI_Alltoallw",
            "cpar": "MPI3_CONST void *sendbuf, MPI3_CONST int *sendcounts, MPI3_CONST int *sdispls, MPI3_CONST MPI_Datatype sendtypes[], void *recvbuf, MPI3_CONST int *recvcounts, MPI3_CONST int *rdispls, MPI3_CONST MPI_Datatype recvtypes[], MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtypes(*), recvtypes(*); TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_All2All|_Blocking|_Collective"
        },
        {
            "name": "MPI_Barrier",
            "cpar": "MPI_Comm comm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Barrier|_Blocking|_Collective"
        },
        {
            "name": "MPI_Bcast",
            "cpar": "void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..) :: buffer; INTEGER, INTENT(IN) :: count, root; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Bcast|_Blocking|_Collective"
        },
        {
            "name": "MPI_Exscan",
            "cpar": "MPI3_CONST void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Scan|_Blocking|_Collective"
        },{
            "name": "MPI_Gather",
            "cpar": "MPI3_CONST void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount, root; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Gather|_Blocking|_Collective"
        },
        {
            "name": "MPI_Gatherv",
            "cpar": "MPI3_CONST void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, MPI3_CONST int *recvcounts, MPI3_CONST int *displs, MPI_Datatype recvtype, int root, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*), root; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Gather|_Blocking|_Collective"
        },
        {
            "name": "MPI_Iallgather",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Gather|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Iallgatherv",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount; INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Gather|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Iallreduce",
            "cpar": "const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror ",
            "tags": "_Reduce|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ialltoall",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_All2All|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ialltoallv",
            "cpar": "const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_All2All|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ialltoallw",
            "cpar": "const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtypes(*), recvtypes(*); TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_All2All|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ibarrier",
            "cpar": "MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Barrier|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ibcast",
            "cpar": "void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buffer; INTEGER, INTENT(IN) :: count, root; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Bcast|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Iexscan",
            "cpar": "const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Scan|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Igather",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount, root; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Gather|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Igatherv",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount, root; INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Gather|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ireduce",
            "cpar": "const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: count, root; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Reduce|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ireduce_scatter",
            "cpar": "const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*); TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Reduce|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ireduce_scatter_block",
            "cpar": "const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: recvcount; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Reduce|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Iscan",
            "cpar": "const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Scan|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Iscatter",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount, root; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Scatter|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Iscatterv",
            "cpar": "const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), displs(*); INTEGER, INTENT(IN) :: recvcount, root; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Scatter|_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Op_commutative",
            "cpar": "MPI_Op op, int *commute",
            "f08par": "TYPE(MPI_Op), INTENT(IN) :: op; LOGICAL, INTENT(OUT) :: commute; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Collective",
            "since": "MPI-2.2"
        },
        {
            "name": "MPI_Op_create",
            "cpar": "MPI_User_function *user_fn, int commute, MPI_Op *op",
            "f08par": "PROCEDURE(MPI_User_function) :: user_fn; LOGICAL, INTENT(IN) :: commute; TYPE(MPI_Op), INTENT(OUT) :: op; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Collective"
        },
        {
            "name": "MPI_Op_free",
            "cpar": "MPI_Op *op",
            "f08par": "TYPE(MPI_Op), INTENT(INOUT) :: op; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Collective",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Reduce",
            "cpar": "MPI3_CONST void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: count, root; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Reduce|_Blocking|_Collective"
        },
        {
            "name": "MPI_Reduce_local",
            "cpar": "MPI3_CONST void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op op",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: inbuf; TYPE(*), DIMENSION(..) :: inoutbuf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Reduce|_Blocking|_Collective",
            "since": "MPI-2.2"
        },
        {
            "name": "MPI_Reduce_scatter",
            "cpar": "MPI3_CONST void *sendbuf, void *recvbuf, MPI3_CONST int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: recvcounts(*); TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Reduce|_Blocking|_Collective"
        },
        {
            "name": "MPI_Reduce_scatter_block",
            "cpar": "MPI3_CONST void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: recvcount; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Reduce|_Blocking|_Collective",
            "since": "MPI-2.2"
        },
        {
            "name": "MPI_Scan",
            "cpar": "MPI3_CONST void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Scan|_Blocking|_Collective"
        },
        {
            "name": "MPI_Scatter",
            "cpar": "MPI3_CONST void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount, root; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Scatter|_Blocking|_Collective"
        },
        {
            "name": "MPI_Scatterv",
            "cpar": "MPI3_CONST void *sendbuf, MPI3_CONST int *sendcounts, MPI3_CONST int *displs, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcounts(*), displs(*), recvcount, root; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Scatter|_Blocking|_Collective"
        },
        "### MPI 3-1. A.2.4  Groups, Contexts, Communicators, and Caching Functions ###",
        {
            "name": "MPI_Comm_compare",
            "cpar": "MPI_Comm comm1, MPI_Comm comm2, int *result",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm1, comm2; INTEGER, INTENT(OUT) :: result; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_create",
            "cpar": "MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Group), INTENT(IN) :: group; TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_create_group",
            "cpar": "MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(IN) :: tag; TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Comm_create_keyval",
            "cpar": "MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state",
            "f08par": "PROCEDURE(MPI_Comm_copy_attr_function) :: comm_copy_attr_fn; PROCEDURE(MPI_Comm_delete_attr_function) :: comm_delete_attr_fn; INTEGER, INTENT(OUT) :: comm_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_delete_attr",
            "cpar": "MPI_Comm comm, int comm_keyval",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: comm_keyval; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_dup",
            "cpar": "MPI_Comm comm, MPI_Comm *newcomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_dup_with_info",
            "cpar": "MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Info), INTENT(IN) :: info; TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Comm_free",
            "cpar": "MPI_Comm *comm",
            "f08par": "TYPE(MPI_Comm), INTENT(INOUT) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_free_keyval",
            "cpar": "int *comm_keyval",
            "f08par": "INTEGER, INTENT(INOUT) :: comm_keyval; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_get_attr",
            "cpar": "MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: comm_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val; LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_get_info",
            "cpar": "MPI_Comm comm, MPI_Info *info_used",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Info), INTENT(OUT) :: info_used; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Comm_get_name",
            "cpar": "MPI_Comm comm, char *comm_name, int *resultlen",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: comm_name; INTEGER, INTENT(OUT) :: resultlen; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_group",
            "cpar": "MPI_Comm comm, MPI_Group *group",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Group), INTENT(OUT) :: group; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_idup",
            "cpar": "MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Comm), INTENT(OUT), ASYNCHRONOUS :: newcomm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Comm_rank",
            "cpar": "MPI_Comm comm, int *rank",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(OUT) :: rank; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_remote_group",
            "cpar": "MPI_Comm comm, MPI_Group *group",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Group), INTENT(OUT) :: group; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_remote_size",
            "cpar": "MPI_Comm comm, int *size",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(OUT) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_set_attr",
            "cpar": "MPI_Comm comm, int comm_keyval, void *attribute_val",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: comm_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_set_info",
            "cpar": "MPI_Comm comm, MPI_Info info",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Info), INTENT(IN) :: info; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Comm_set_name",
            "cpar": "MPI_Comm comm, MPI3_CONST char *comm_name",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; CHARACTER(LEN=*), INTENT(IN) :: comm_name; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_size",
            "cpar": "MPI_Comm comm, int *size",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(OUT) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_split",
            "cpar": "MPI_Comm comm, int color, int key, MPI_Comm *newcomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: color, key; TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_split_type",
            "cpar": "MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: split_type, key; TYPE(MPI_Info), INTENT(IN) :: info; TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Comm_test_inter",
            "cpar": "MPI_Comm comm, int *flag",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_compare",
            "cpar": "MPI_Group group1, MPI_Group group2, int *result",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group1, group2; INTEGER, INTENT(OUT) :: result; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_difference",
            "cpar": "MPI_Group group1, MPI_Group group2, MPI_Group *newgroup",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group1, group2; TYPE(MPI_Group), INTENT(OUT) :: newgroup; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_excl",
            "cpar": "MPI_Group group, int n, MPI3_CONST int ranks[], MPI_Group *newgroup",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(IN) :: n, ranks(n); TYPE(MPI_Group), INTENT(OUT) :: newgroup; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_free",
            "cpar": "MPI_Group *group",
            "f08par": "TYPE(MPI_Group), INTENT(INOUT) :: group; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_incl",
            "cpar": "MPI_Group group, int n, MPI3_CONST int ranks[], MPI_Group *newgroup",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(IN) :: n, ranks(n); TYPE(MPI_Group), INTENT(OUT) :: newgroup; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_intersection",
            "cpar": "MPI_Group group1, MPI_Group group2, MPI_Group *newgroup",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group1, group2; TYPE(MPI_Group), INTENT(OUT) :: newgroup; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_range_excl",
            "cpar": "MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(IN) :: n, ranges(3,n); TYPE(MPI_Group), INTENT(OUT) :: newgroup; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_range_incl",
            "cpar": "MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(IN) :: n, ranges(3,n); TYPE(MPI_Group), INTENT(OUT) :: newgroup; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_rank",
            "cpar": "MPI_Group group, int *rank",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(OUT) :: rank; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_size",
            "cpar": "MPI_Group group, int *size",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(OUT) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_translate_ranks",
            "cpar": "MPI_Group group1, int n, MPI3_CONST int ranks1[], MPI_Group group2, int ranks2[]",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group1, group2; INTEGER, INTENT(IN) :: n, ranks1(n); INTEGER, INTENT(OUT) :: ranks2(n); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Group_union",
            "cpar": "MPI_Group group1, MPI_Group group2, MPI_Group *newgroup",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group1, group2; TYPE(MPI_Group), INTENT(OUT) :: newgroup; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Intercomm_create",
            "cpar": "MPI_Comm local_comm, int local_leader, MPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: local_comm, peer_comm; INTEGER, INTENT(IN) :: local_leader, remote_leader, tag; TYPE(MPI_Comm), INTENT(OUT) :: newintercomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Intercomm_merge",
            "cpar": "MPI_Comm intercomm, int high, MPI_Comm *newintracomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: intercomm; LOGICAL, INTENT(IN) :: high; TYPE(MPI_Comm), INTENT(OUT) :: newintracomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Type_create_keyval",
            "cpar": "MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state",
            "f08par": "PROCEDURE(MPI_Type_copy_attr_function) :: type_copy_attr_fn; PROCEDURE(MPI_Type_delete_attr_function) :: type_delete_attr_fn; INTEGER, INTENT(OUT) :: type_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Type_delete_attr",
            "cpar": "MPI_Datatype datatype, int type_keyval",
            "f08par": "TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, INTENT(IN) :: type_keyval; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Type_free_keyval",
            "cpar": "int *type_keyval",
            "f08par": "INTEGER, INTENT(INOUT) :: type_keyval; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Type_get_attr",
            "cpar": "MPI_Datatype datatype, int type_keyval, void *attribute_val, int *flag",
            "f08par": "TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, INTENT(IN) :: type_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val; LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Type_get_name",
            "cpar": "MPI_Datatype datatype, char *type_name, int *resultlen",
            "f08par": "TYPE(MPI_Datatype), INTENT(IN) :: datatype; CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: type_name; INTEGER, INTENT(OUT) :: resultlen; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Type_set_attr",
            "cpar": "MPI_Datatype datatype, int type_keyval, void *attribute_val",
            "f08par": "TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, INTENT(IN) :: type_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Type_set_name",
            "cpar": "MPI_Datatype datatype, MPI3_CONST char *type_name",
            "f08par": "TYPE(MPI_Datatype), INTENT(IN) :: datatype; CHARACTER(LEN=*), INTENT(IN) :: type_name; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Win_create_keyval",
            "cpar": "MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state",
            "f08par": "PROCEDURE(MPI_Win_copy_attr_function) :: win_copy_attr_fn; PROCEDURE(MPI_Win_delete_attr_function) :: win_delete_attr_fn; INTEGER, INTENT(OUT) :: win_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Win_delete_attr",
            "cpar": "MPI_Win win, int win_keyval",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, INTENT(IN) :: win_keyval; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Win_free_keyval",
            "cpar": "int *win_keyval",
            "f08par": "INTEGER, INTENT(INOUT) :: win_keyval; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Win_get_attr",
            "cpar": "MPI_Win win, int win_keyval, void *attribute_val, int *flag",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, INTENT(IN) :: win_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: attribute_val; LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Win_get_name",
            "cpar": "MPI_Win win, char *win_name, int *resultlen",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; CHARACTER(LEN=MPI_MAX_OBJECT_NAME), INTENT(OUT) :: win_name; INTEGER, INTENT(OUT) :: resultlen; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Win_set_attr",
            "cpar": "MPI_Win win, int win_keyval, void *attribute_val",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, INTENT(IN) :: win_keyval; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: attribute_val; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Win_set_name",
            "cpar": "MPI_Win win, MPI3_CONST char *win_name",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; CHARACTER(LEN=*), INTENT(IN) :: win_name; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        "### MPI 3-1. A.2.5  Process Topologies Functions ###",
        {
            "name": "MPI_Cart_coords",
            "cpar": "MPI_Comm comm, int rank, int maxdims, int coords[]",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: rank, maxdims; INTEGER, INTENT(OUT) :: coords(maxdims); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Cart_create",
            "cpar": "MPI_Comm comm_old, int ndims, MPI3_CONST int dims[], MPI3_CONST int periods[], int reorder, MPI_Comm *comm_cart",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm_old; INTEGER, INTENT(IN) :: ndims, dims(ndims); LOGICAL, INTENT(IN) :: periods(ndims), reorder; TYPE(MPI_Comm), INTENT(OUT) :: comm_cart; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm|_Blocking"
        },
        {
            "name": "MPI_Cart_get",
            "cpar": "MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[]",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: maxdims; INTEGER, INTENT(OUT) :: dims(maxdims), coords(maxdims); LOGICAL, INTENT(OUT) :: periods(maxdims); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Cart_map",
            "cpar": "MPI_Comm comm, int ndims, MPI3_CONST int dims[], MPI3_CONST int periods[], int *newrank",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: ndims, dims(ndims); LOGICAL, INTENT(IN) :: periods(ndims); INTEGER, INTENT(OUT) :: newrank; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Cart_rank",
            "cpar": "MPI_Comm comm, MPI3_CONST int coords[], int *rank",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: coords(*); INTEGER, INTENT(OUT) :: rank; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Cart_shift",
            "cpar": "MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: direction, disp; INTEGER, INTENT(OUT) :: rank_source, rank_dest; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Cart_sub",
            "cpar": "MPI_Comm comm, MPI3_CONST int remain_dims[], MPI_Comm *newcomm",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; LOGICAL, INTENT(IN) :: remain_dims(*); TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Cartdim_get",
            "cpar": "MPI_Comm comm, int *ndims",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(OUT) :: ndims; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Dims_create",
            "cpar": "int nnodes, int ndims, int dims[]",
            "f08par": "INTEGER, INTENT(IN) :: nnodes, ndims; INTEGER, INTENT(INOUT) :: dims(ndims); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Dist_graph_create",
            "cpar": "MPI_Comm comm_old, int n, MPI3_CONST int sources[], MPI3_CONST int degrees[], MPI3_CONST int destinations[], MPI3_CONST int weights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm_old; INTEGER, INTENT(IN) :: n, sources(n), degrees(n), destinations(*); INTEGER, INTENT(IN) :: weights(*); TYPE(MPI_Info), INTENT(IN) :: info; LOGICAL, INTENT(IN) :: reorder; TYPE(MPI_Comm), INTENT(OUT) :: comm_dist_graph; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-2.2"
        },
        {
            "name": "MPI_Dist_graph_create_adjacent",
            "cpar": "MPI_Comm comm_old, int indegree, MPI3_CONST int sources[], MPI3_CONST int sourceweights[], int outdegree, MPI3_CONST int destinations[], MPI3_CONST int destweights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm_old; INTEGER, INTENT(IN) :: indegree, sources(indegree), outdegree, destinations(outdegree); INTEGER, INTENT(IN) :: sourceweights(*), destweights(*); TYPE(MPI_Info), INTENT(IN) :: info; LOGICAL, INTENT(IN) :: reorder; TYPE(MPI_Comm), INTENT(OUT) :: comm_dist_graph; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-2.2"
        },
        {
            "name": "MPI_Dist_graph_neighbors",
            "cpar": "MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: maxindegree, maxoutdegree; INTEGER, INTENT(OUT) :: sources(maxindegree), destinations(maxoutdegree); INTEGER :: sourceweights(*), destweights(*); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-2.2"
        },
        {
            "name": "MPI_Dist_graph_neighbors_count",
            "cpar": "MPI_Comm comm, int *indegree, int *outdegree, int *weighted",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(OUT) :: indegree, outdegree; LOGICAL, INTENT(OUT) :: weighted; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-2.2"
        },
        {
            "name": "MPI_Graph_create",
            "cpar": "MPI_Comm comm_old, int nnodes, MPI3_CONST int index[], MPI3_CONST int edges[], int reorder, MPI_Comm *comm_graph",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm_old; INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*); LOGICAL, INTENT(IN) :: reorder; TYPE(MPI_Comm), INTENT(OUT) :: comm_graph; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Graph_get",
            "cpar": "MPI_Comm comm, int maxindex, int maxedges, int index[], int edges[]",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: maxindex, maxedges; INTEGER, INTENT(OUT) :: index(maxindex), edges(maxedges); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Graph_map",
            "cpar": "MPI_Comm comm, int nnodes, MPI3_CONST int index[], MPI3_CONST int edges[], int *newrank",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: nnodes, index(nnodes), edges(*); INTEGER, INTENT(OUT) :: newrank; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Graph_neighbors",
            "cpar": "MPI_Comm comm, int rank, int maxneighbors, int neighbors[]",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: rank, maxneighbors; INTEGER, INTENT(OUT) :: neighbors(maxneighbors); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Graph_neighbors_count",
            "cpar": "MPI_Comm comm, int rank, int *nneighbors",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(IN) :: rank; INTEGER, INTENT(OUT) :: nneighbors; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Graphdims_get",
            "cpar": "MPI_Comm comm, int *nnodes, int *nedges",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(OUT) :: nnodes, nedges; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Ineighbor_allgather",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ineighbor_allgatherv",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount; INTEGER, INTENT(IN), ASYNCHRONOUS :: recvcounts(*), displs(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ineighbor_alltoall",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ineighbor_alltoallv",
            "cpar": "const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Ineighbor_alltoallw",
            "cpar": "const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: sendbuf; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: recvbuf; INTEGER, INTENT(IN), ASYNCHRONOUS :: sendcounts(*), recvcounts(*); INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN), ASYNCHRONOUS :: sdispls(*), rdispls(*); TYPE(MPI_Datatype), INTENT(IN), ASYNCHRONOUS :: sendtypes(*), recvtypes(*); TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Neighbor_allgather",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Neighbor_allgatherv",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcounts(*), displs(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Neighbor_alltoall",
            "cpar": "const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcount, recvcount; TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Neighbor_alltoallv",
            "cpar": "const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcounts(*), sdispls(*), recvcounts(*), rdispls(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtype, recvtype; TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Neighbor_alltoallw",
            "cpar": "const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN) :: sendbuf; TYPE(*), DIMENSION(..) :: recvbuf; INTEGER, INTENT(IN) :: sendcounts(*), recvcounts(*); INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: sdispls(*), rdispls(*); TYPE(MPI_Datatype), INTENT(IN) :: sendtypes(*), recvtypes(*); TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Topo_test",
            "cpar": "MPI_Comm comm, int *status",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; INTEGER, INTENT(OUT) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        "### MPI 3-1. A.2.6  MPI Environmental Management Functions (partially implemented) ###",
        {
            "name": "MPI_Finalize",
            "cpar": "void",
            "fpar": "MPI_Fint *ierror",
            "f08par": "INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Finalized",
            "cpar": "int *flag",
            "f08par": "LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Init",
            "cpar": "int *argc, char ***argv",
            "fpar": "MPI_Fint *ierror",
            "f08par": "INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Initialized",
            "cpar": "int *flag",
            "f08par": "LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        "### MPI 3-1. A.2.7   Info Object Functions (not implemented) ###",
        "### MPI 3-1. A.2.8   Process Creation and Management Functions ###",
        {
            "name": "MPI_Close_port",
            "cpar": "MPI3_CONST char *port_name",
            "f08par": "CHARACTER(LEN=*), INTENT(IN) :: port_name; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Comm_accept",
            "cpar": "MPI3_CONST char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm",
            "f08par": "CHARACTER(LEN=*), INTENT(IN) :: port_name; TYPE(MPI_Info), INTENT(IN) :: info; INTEGER, INTENT(IN) :: root; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Comm_connect",
            "cpar": "MPI3_CONST char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm",
            "f08par": "CHARACTER(LEN=*), INTENT(IN) :: port_name; TYPE(MPI_Info), INTENT(IN) :: info; INTEGER, INTENT(IN) :: root; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Comm), INTENT(OUT) :: newcomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Comm_disconnect",
            "cpar": "MPI_Comm *comm",
            "f08par": "TYPE(MPI_Comm), INTENT(INOUT) :: comm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Comm_get_parent",
            "cpar": "MPI_Comm *parent",
            "f08par": "TYPE(MPI_Comm), INTENT(OUT) :: parent; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Comm_join",
            "cpar": "int fd, MPI_Comm *intercomm",
            "f08par": "INTEGER, INTENT(IN) :: fd; TYPE(MPI_Comm), INTENT(OUT) :: intercomm; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Comm_spawn",
            "cpar": "MPI3_CONST char *command, char *argv[], int maxprocs, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]",
            "f08par": "CHARACTER(LEN=*), INTENT(IN) :: command, argv(*); INTEGER, INTENT(IN) :: maxprocs, root; TYPE(MPI_Info), INTENT(IN) :: info; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Comm), INTENT(OUT) :: intercomm; INTEGER :: array_of_errcodes(*); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Comm_spawn_multiple",
            "cpar": "int count, char *array_of_commands[], char **array_of_argv[], MPI3_CONST int array_of_maxprocs[], MPI3_CONST MPI_Info array_of_info[], int root, MPI_Comm comm, MPI_Comm *intercomm, int array_of_errcodes[]",
            "f08par": "INTEGER, INTENT(IN) :: count, array_of_maxprocs(*), root; CHARACTER(LEN=*), INTENT(IN) :: array_of_commands(*); CHARACTER(LEN=*), INTENT(IN) :: array_of_argv(count, *); TYPE(MPI_Info), INTENT(IN) :: array_of_info; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Comm), INTENT(OUT) :: intercomm; INTEGER :: array_of_errcodes(*); INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_Comm"
        },
        {
            "name": "MPI_Lookup_name",
            "cpar": "MPI3_CONST char *service_name, MPI_Info info, char *port_name",
            "f08par": "CHARACTER(LEN=*), INTENT(IN) :: service_name; TYPE(MPI_Info), INTENT(IN) :: info; CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: port_name; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Open_port",
            "cpar": "MPI_Info info, char *port_name",
            "f08par": "TYPE(MPI_Info), INTENT(IN) :: info; CHARACTER(LEN=MPI_MAX_PORT_NAME), INTENT(OUT) :: port_name; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Publish_name",
            "cpar": "MPI3_CONST char *service_name, MPI_Info info, MPI3_CONST char *port_name",
            "f08par": "TYPE(MPI_Info), INTENT(IN) :: info; CHARACTER(LEN=*), INTENT(IN) :: service_name, port_name; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Unpublish_name",
            "cpar": "MPI3_CONST char *service_name, MPI_Info info, MPI3_CONST char *port_name",
            "f08par": "CHARACTER(LEN=*), INTENT(IN) :: service_name, port_name; TYPE(MPI_Info), INTENT(IN) :: info; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        "### MPI 3-1. A.2.9   One-Sided Communications Functions ###",
        {
            "name": "MPI_Accumulate",
            "cpar": "MPI3_CONST void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr; INTEGER, INTENT(IN) :: origin_count, target_rank, target_count; TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Compare_and_swap",
            "cpar": "const void *origin_addr, const void *compare_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: compare_addr; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: result_addr; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, INTENT(IN) :: target_rank; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0",
            "broken_in": {"Open MPI": ["1.7.\\d", "1.8.\\d", "1.10.0"]},
            "broken_in_comment": "See Open MPI 1.10.1 changelog: Add missing 'const' attributes to MPI_COMPARE_AND_SWAP, MPI_FETCH_AND_OP, MPI_RACCUMULATE, and MPI_WIN_DETACH prototypes."
        },
        {
            "name": "MPI_Fetch_and_op",
            "cpar": "const void *origin_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: result_addr; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, INTENT(IN) :: target_rank; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0",
            "broken_in": {"Open MPI": ["1.7.\\d", "1.8.\\d", "1.10.0"]},
            "broken_in_comment": "See Open MPI 1.10.1 changelog: Add missing 'const' attributes to MPI_COMPARE_AND_SWAP, MPI_FETCH_AND_OP, MPI_RACCUMULATE, and MPI_WIN_DETACH prototypes."
        },
        {
            "name": "MPI_Get",
            "cpar": "void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win",
            "f08par": "TYPE(*), DIMENSION(..), ASYNCHRONOUS :: origin_addr; INTEGER, INTENT(IN) :: origin_count, target_rank, target_count; TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Get_accumulate",
            "cpar": "const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: result_addr; INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count; TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Put",
            "cpar": "MPI3_CONST void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr; INTEGER, INTENT(IN) :: origin_count, target_rank, target_count; TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Raccumulate",
            "cpar": "const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr; INTEGER, INTENT(IN) :: origin_count, target_rank, target_count; TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Win), INTENT(IN) :: win; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0",
            "broken_in": {"Open MPI": ["1.7.\\d", "1.8.\\d", "1.10.0"]},
            "broken_in_comment": "See Open MPI 1.10.1 changelog: Add missing 'const' attributes to MPI_COMPARE_AND_SWAP, MPI_FETCH_AND_OP, MPI_RACCUMULATE, and MPI_WIN_DETACH prototypes."
        },
        {
            "name": "MPI_Rget",
            "cpar": "void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), ASYNCHRONOUS :: origin_addr; INTEGER, INTENT(IN) :: origin_count, target_rank, target_count; TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Win), INTENT(IN) :: win; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Rget_accumulate",
            "cpar": "const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: result_addr; INTEGER, INTENT(IN) :: origin_count, result_count, target_rank, target_count; TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype, result_datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Op), INTENT(IN) :: op; TYPE(MPI_Win), INTENT(IN) :: win; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Rput",
            "cpar": "const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request",
            "f08par": "TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: origin_addr; INTEGER, INTENT(IN) :: origin_count, target_rank, target_count; TYPE(MPI_Datatype), INTENT(IN) :: origin_datatype, target_datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: target_disp; TYPE(MPI_Win), INTENT(IN) :: win; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_allocate",
            "cpar": "MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win",
            "f08par": "INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size; INTEGER, INTENT(IN) :: disp_unit; TYPE(MPI_Info), INTENT(IN) :: info; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(C_PTR), INTENT(OUT) :: baseptr; TYPE(MPI_Win), INTENT(OUT) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_allocate_shared",
            "cpar": "MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win",
            "f08par": "INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size; INTEGER, INTENT(IN) :: disp_unit; TYPE(MPI_Info), INTENT(IN) :: info; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(C_PTR), INTENT(OUT) :: baseptr; TYPE(MPI_Win), INTENT(OUT) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_attach",
            "cpar": "MPI_Win win, void *base, MPI_Aint size",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_complete",
            "cpar": "MPI_Win win",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_create",
            "cpar": "void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win *win",
            "f08par": "TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: size; INTEGER, INTENT(IN) :: disp_unit; TYPE(MPI_Info), INTENT(IN) :: info; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Win), INTENT(OUT) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_create_dynamic",
            "cpar": "MPI_Info info, MPI_Comm comm, MPI_Win *win",
            "f08par": "TYPE(MPI_Info), INTENT(IN) :: info; TYPE(MPI_Comm), INTENT(IN) :: comm; TYPE(MPI_Win), INTENT(OUT) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_detach",
            "cpar": "MPI_Win win, const void *base",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: base; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0",
            "broken_in": {"Open MPI": ["1.7.\\d", "1.8.\\d", "1.10.0"]},
            "broken_in_comment": "See Open MPI 1.10.1 changelog: Add missing 'const' attributes to MPI_COMPARE_AND_SWAP, MPI_FETCH_AND_OP, MPI_RACCUMULATE, and MPI_WIN_DETACH prototypes."
        },
        {
            "name": "MPI_Win_fence",
            "cpar": "int assert, MPI_Win win",
            "f08par": "INTEGER, INTENT(IN) :: assert; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_flush",
            "cpar": "int rank, MPI_Win win",
            "f08par": "INTEGER, INTENT(IN) :: rank; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_flush_all",
            "cpar": "MPI_Win win",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_flush_local",
            "cpar": "int rank, MPI_Win win",
            "f08par": "INTEGER, INTENT(IN) :: rank; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_flush_local_all",
            "cpar": "MPI_Win win",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_free",
            "cpar": "MPI_Win *win",
            "f08par": "TYPE(MPI_Win), INTENT(INOUT) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_get_group",
            "cpar": "MPI_Win win, MPI_Group *group",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; TYPE(MPI_Group), INTENT(OUT) :: group; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_get_info",
            "cpar": "MPI_Win win, MPI_Info *info_used",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; TYPE(MPI_Info), INTENT(OUT) :: info_used; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_lock",
            "cpar": "int lock_type, int rank, int assert, MPI_Win win",
            "f08par": "INTEGER, INTENT(IN) :: lock_type, rank, assert; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_lock_all",
            "cpar": "int assert, MPI_Win win",
            "f08par": "INTEGER, INTENT(IN) :: assert; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_post",
            "cpar": "MPI_Group group, int assert, MPI_Win win",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(IN) :: assert; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_set_info",
            "cpar": "MPI_Win win, MPI_Info info",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; TYPE(MPI_Info), INTENT(IN) :: info; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_shared_query",
            "cpar": "MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, INTENT(IN) :: rank; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: size; INTEGER, INTENT(OUT) :: disp_unit; TYPE(C_PTR), INTENT(OUT) :: baseptr; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_start",
            "cpar": "MPI_Group group, int assert, MPI_Win win",
            "f08par": "TYPE(MPI_Group), INTENT(IN) :: group; INTEGER, INTENT(IN) :: assert; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_sync",
            "cpar": "MPI_Win win",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_test",
            "cpar": "MPI_Win win, int *flag",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_unlock",
            "cpar": "int rank, MPI_Win win",
            "f08par": "INTEGER, INTENT(IN) :: rank; TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Win_unlock_all",
            "cpar": "MPI_Win win",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        {
            "name": "MPI_Win_wait",
            "cpar": "MPI_Win win",
            "f08par": "TYPE(MPI_Win), INTENT(IN) :: win; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        "### MPI 3-1. A.2.10  External Interfaces Functions ###",
        {
            "name": "MPI_Grequest_complete",
            "cpar": "MPI_Request request",
            "f08par": "TYPE(MPI_Request), INTENT(IN) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Grequest_start",
            "cpar": "MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request",
            "f08par": "PROCEDURE(MPI_Grequest_query_function) :: query_fn; PROCEDURE(MPI_Grequest_free_function) :: free_fn; PROCEDURE(MPI_Grequest_cancel_function) :: cancel_fn; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Init_thread",
            "cpar": "int *argc, char ***argv, int required, int *provided",
            "fpar": "MPI_Fint *required, MPI_Fint *provided, MPI_Fint *ierror",
            "f08par": "INTEGER, INTENT(IN) :: required; INTEGER, INTENT(OUT) :: provided; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Is_thread_main",
            "cpar": "int *flag",
            "f08par": "LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Query_thread",
            "cpar": "int *provided",
            "f08par": "INTEGER, INTENT(OUT) :: provided; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Status_set_cancelled",
            "cpar": "MPI_Status *status, int flag",
            "f08par": "TYPE(MPI_Status), INTENT(INOUT) :: status; LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Status_set_elements",
            "cpar": "MPI_Status *status, MPI_Datatype datatype, int count",
            "f08par": "TYPE(MPI_Status), INTENT(INOUT) :: status; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, INTENT(IN) :: count; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": ""
        },
        {
            "name": "MPI_Status_set_elements_x",
            "cpar": "MPI_Status *status, MPI_Datatype datatype, MPI_Count count",
            "f08par": "TYPE(MPI_Status), INTENT(INOUT) :: status; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER(KIND = MPI_COUNT_KIND), INTENT(IN) :: count; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "",
            "since": "MPI-3.0"
        },
        "### MPI 3-1. A.2.11  I/O Functions ###",
        {
            "name": "MPI_File_close",
            "cpar": "MPI_File *fh",
            "f08par": "TYPE(MPI_File), INTENT(INOUT) :: fh; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_delete",
            "cpar": "MPI3_CONST char *filename, MPI_Info info",
            "f08par": "CHARACTER(LEN=*), INTENT(IN) :: filename; TYPE(MPI_Info), INTENT(IN) :: info; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_amode",
            "cpar": "MPI_File fh, int *amode",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER, INTENT(OUT) :: amode; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_atomicity",
            "cpar": "MPI_File fh, int *flag",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; LOGICAL, INTENT(OUT) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_byte_offset",
            "cpar": "MPI_File fh, MPI_Offset offset, MPI_Offset *disp",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: disp; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_group",
            "cpar": "MPI_File fh, MPI_Group *group",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(MPI_Group), INTENT(OUT) :: group; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_info",
            "cpar": "MPI_File fh, MPI_Info *info_used",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(MPI_Info), INTENT(OUT) :: info_used; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_position",
            "cpar": "MPI_File fh, MPI_Offset *offset",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: offset; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_position_shared",
            "cpar": "MPI_File fh, MPI_Offset *offset",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: offset; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_size",
            "cpar": "MPI_File fh, MPI_Offset *size",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_type_extent",
            "cpar": "MPI_File fh, MPI_Datatype datatype, MPI_Aint *extent",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(OUT) :: extent; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_get_view",
            "cpar": "MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(OUT) :: disp; TYPE(MPI_Datatype), INTENT(OUT) :: etype, filetype; CHARACTER(LEN=*), INTENT(OUT) :: datarep; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_iread",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_iread_all",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO",
            "since": "MPI-3.1"
        },
        {
            "name": "MPI_File_iread_at",
            "cpar": "MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_iread_at_all",
            "cpar": "MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO",
            "since": "MPI-3.1"
        },
        {
            "name": "MPI_File_iread_shared",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_iwrite",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_iwrite_all",
            "cpar": "MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO",
            "since": "MPI-3.1"
        },
        {
            "name": "MPI_File_iwrite_at",
            "cpar": "MPI_File fh, MPI_Offset offset, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_iwrite_at_all",
            "cpar": "MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO",
            "since": "MPI-3.1"
        },
        {
            "name": "MPI_File_iwrite_shared",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Request *request",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Request), INTENT(OUT) :: request; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_open",
            "cpar": "MPI_Comm comm, MPI3_CONST char *filename, int amode, MPI_Info info, MPI_File *fh",
            "f08par": "TYPE(MPI_Comm), INTENT(IN) :: comm; CHARACTER(LEN=*), INTENT(IN) :: filename; INTEGER, INTENT(IN) :: amode; TYPE(MPI_Info), INTENT(IN) :: info; TYPE(MPI_File), INTENT(OUT) :: fh; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_preallocate",
            "cpar": "MPI_File fh, MPI_Offset size",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_all",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_all_begin",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_all_end",
            "cpar": "MPI_File fh, void *buf, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_at",
            "cpar": "MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_at_all",
            "cpar": "MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_at_all_begin",
            "cpar": "MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_at_all_end",
            "cpar": "MPI_File fh, void *buf, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_ordered",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_ordered_begin",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_ordered_end",
            "cpar": "MPI_File fh, void *buf, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), ASYNCHRONOUS :: buf; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_read_shared",
            "cpar": "MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_seek",
            "cpar": "MPI_File fh, MPI_Offset offset, int whence",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; INTEGER, INTENT(IN) :: whence; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_seek_shared",
            "cpar": "MPI_File fh, MPI_Offset offset, int whence",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; INTEGER, INTENT(IN) :: whence; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_set_atomicity",
            "cpar": "MPI_File fh, int flag",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; LOGICAL, INTENT(IN) :: flag; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_set_info",
            "cpar": "MPI_File fh, MPI_Info info",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(MPI_Info), INTENT(IN) :: info; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_set_size",
            "cpar": "MPI_File fh, MPI_Offset size",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: size; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_set_view",
            "cpar": "MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, MPI3_CONST char *datarep, MPI_Info info",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: disp; TYPE(MPI_Datatype), INTENT(IN) :: etype, filetype; CHARACTER(LEN=*), INTENT(IN) :: datarep; TYPE(MPI_Info), INTENT(IN) :: info; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_sync",
            "cpar": "MPI_File fh",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_all",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_all_begin",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, int count, MPI_Datatype datatype",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_all_end",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_at",
            "cpar": "MPI_File fh, MPI_Offset offset, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_at_all",
            "cpar": "MPI_File fh, MPI_Offset offset, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_at_all_begin",
            "cpar": "MPI_File fh, MPI_Offset offset, MPI3_CONST void *buf, int count, MPI_Datatype datatype",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; INTEGER(KIND=MPI_OFFSET_KIND), INTENT(IN) :: offset; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_at_all_end",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_ordered",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_ordered_begin",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, int count, MPI_Datatype datatype",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_ordered_end",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN), ASYNCHRONOUS :: buf; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_File_write_shared",
            "cpar": "MPI_File fh, MPI3_CONST void *buf, int count, MPI_Datatype datatype, MPI_Status *status",
            "f08par": "TYPE(MPI_File), INTENT(IN) :: fh; TYPE(*), DIMENSION(..), INTENT(IN) :: buf; INTEGER, INTENT(IN) :: count; TYPE(MPI_Datatype), INTENT(IN) :: datatype; TYPE(MPI_Status) :: status; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        {
            "name": "MPI_Register_datarep",
            "cpar": "MPI3_CONST char *datarep, MPI_Datarep_conversion_function *read_conversion_fn, MPI_Datarep_conversion_function *write_conversion_fn, MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state",
            "f08par": "CHARACTER(LEN=*), INTENT(IN) :: datarep; PROCEDURE(MPI_Datarep_conversion_function) :: read_conversion_fn; PROCEDURE(MPI_Datarep_conversion_function) :: write_conversion_fn; PROCEDURE(MPI_Datarep_extent_function) :: dtype_file_extent_fn; INTEGER(KIND=MPI_ADDRESS_KIND), INTENT(IN) :: extra_state; INTEGER, OPTIONAL, INTENT(OUT) :: ierror",
            "tags": "_IO"
        },
        "### MPI 3-1. A.2.12  Language Bindings Functions (not implemented) ###",
        "### MPI 3-1. A.2.13  Tools / Profiling Interface Functions (not implemented) ###",
        "### MPI 3-1. A.2.14  Tools / MPI Tool Information Interface Functions (not implemented) ###"
    ]
}
