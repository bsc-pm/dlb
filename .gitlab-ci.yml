workflow:
  rules:
    # Disable CI for Draft MR
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TITLE =~ /^(\[Draft\]|\(Draft\)|Draft:)/
      when: never
    # Disable double pipelines on Merge Requests
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    # Allow CI pipelines only for MR and push events
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH

stages:
  - build
  - test

build:
  image: bscpm/citools
  stage: build
  script:
    - ./bootstrap
    - ./configure --disable-instrumentation --disable-instrumentation-debug --enable-coverage
    - make -j$(nproc)
  cache:
    untracked: true
    key: "$CI_PIPELINE_ID"

coverage:
  image: bscpm/citools
  stage: test
  before_script:
    # Re-build in case stage is executed by another runner
    - >
      if [ ! -f Makefile ] ; then
        ./bootstrap ;
        ./configure --disable-instrumentation --disable-instrumentation-debug --enable-coverage
        make -j$(nproc)
      fi
  script:
    - make check DLB_EXTRA_TESTS=1
    - gcovr -r .
  coverage: '/TOTAL.*\s+(\d+\%)/'
  cache:
    untracked: true
    key: "$CI_PIPELINE_ID"
  rules:
    - when: on_success

talp-pages:test&lint:
    stage: test
    image: $DOCKER_IMAGE
    before_script:
      - pip install poetry
    script:
      - cd talp-pages
      - poetry install
      - poetry run tox
    parallel:
      matrix:
        - DOCKER_IMAGE: ["python:3.9-slim", "python:3.10-slim", "python:3.11-slim", "python:3.12-slim"]
    rules:
      - changes:
        - talp-pages/**/*
      - when: never
